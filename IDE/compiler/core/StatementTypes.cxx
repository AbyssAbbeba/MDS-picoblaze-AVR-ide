/**
 * @brief
 * C++ Implementation: ...
 *
 * ...
 *
 * Copyright: See COPYING file that comes with this distribution.
 *
 * @author: Martin OÅ¡mera <martin.osmera@gmail.com>, (C) 2012
 *
 */

#include "StatementTypes.h"

std::ostream & operator << (std::ostream & out, const StatementTypes::StatementType type) {
	using namespace StatementTypes;

	switch ( type ) {
		case EMPTY_STATEMENT:			out << "EMPTY_STATEMENT";		break;
		case ASM51_LABEL:			out << "ASM51_LABEL";			break;
		case ASM51_MACRO:			out << "ASM51_MACRO";			break;
		case ASM51_DIR_MACRO:			out << "ASM51_DIR_MACRO";		break;
		case ASM51_DIR_DB:			out << "ASM51_DIR_DB";			break;
		case ASM51_INS_ACALL:			out << "ASM51_INS_ACALL";		break;
		case ASM51_INS_ADD__A_IMM:		out << "ASM51_INS_ADD__A_IMM";		break;
		case ASM51_INS_ADD__A_DIR:		out << "ASM51_INS_ADD__A_DIR";		break;
		case ASM51_INS_ADD__A_IR0:		out << "ASM51_INS_ADD__A_IR0";		break;
		case ASM51_INS_ADD__A_IR1:		out << "ASM51_INS_ADD__A_IR1";		break;
		case ASM51_INS_ADD__A_R0:		out << "ASM51_INS_ADD__A_R0";		break;
		case ASM51_INS_ADD__A_R1:		out << "ASM51_INS_ADD__A_R1";		break;
		case ASM51_INS_ADD__A_R2:		out << "ASM51_INS_ADD__A_R2";		break;
		case ASM51_INS_ADD__A_R3:		out << "ASM51_INS_ADD__A_R3";		break;
		case ASM51_INS_ADD__A_R4:		out << "ASM51_INS_ADD__A_R4";		break;
		case ASM51_INS_ADD__A_R5:		out << "ASM51_INS_ADD__A_R5";		break;
		case ASM51_INS_ADD__A_R6:		out << "ASM51_INS_ADD__A_R6";		break;
		case ASM51_INS_ADD__A_R7:		out << "ASM51_INS_ADD__A_R7";		break;
		case ASM51_INS_ADDC__A_IMM:		out << "ASM51_INS_ADDC__A_IMM";		break;
		case ASM51_INS_ADDC__A_DIR:		out << "ASM51_INS_ADDC__A_DIR";		break;
		case ASM51_INS_ADDC__A_IR0:		out << "ASM51_INS_ADDC__A_IR0";		break;
		case ASM51_INS_ADDC__A_IR1:		out << "ASM51_INS_ADDC__A_IR1";		break;
		case ASM51_INS_ADDC__A_R0:		out << "ASM51_INS_ADDC__A_R0";		break;
		case ASM51_INS_ADDC__A_R1:		out << "ASM51_INS_ADDC__A_R1";		break;
		case ASM51_INS_ADDC__A_R2:		out << "ASM51_INS_ADDC__A_R2";		break;
		case ASM51_INS_ADDC__A_R3:		out << "ASM51_INS_ADDC__A_R3";		break;
		case ASM51_INS_ADDC__A_R4:		out << "ASM51_INS_ADDC__A_R4";		break;
		case ASM51_INS_ADDC__A_R5:		out << "ASM51_INS_ADDC__A_R5";		break;
		case ASM51_INS_ADDC__A_R6:		out << "ASM51_INS_ADDC__A_R6";		break;
		case ASM51_INS_ADDC__A_R7:		out << "ASM51_INS_ADDC__A_R7";		break;
		case ASM51_INS_AJMP__DIR:		out << "ASM51_INS_AJMP__DIR";		break;
		case ASM51_INS_ANL__DIR_A:		out << "ASM51_INS_ANL__DIR_A";		break;
		case ASM51_INS_ANL__DIR_IMM:		out << "ASM51_INS_ANL__DIR_IMM";	break;
		case ASM51_INS_ANL__A_IMM:		out << "ASM51_INS_ANL__A_IMM";		break;
		case ASM51_INS_ANL__A_DIR:		out << "ASM51_INS_ANL__A_DIR";		break;
		case ASM51_INS_ANL__A_IR0:		out << "ASM51_INS_ANL__A_IR0";		break;
		case ASM51_INS_ANL__A_IR1:		out << "ASM51_INS_ANL__A_IR1";		break;
		case ASM51_INS_ANL__A_R0:		out << "ASM51_INS_ANL__A_R0";		break;
		case ASM51_INS_ANL__A_R1:		out << "ASM51_INS_ANL__A_R1";		break;
		case ASM51_INS_ANL__A_R2:		out << "ASM51_INS_ANL__A_R2";		break;
		case ASM51_INS_ANL__A_R3:		out << "ASM51_INS_ANL__A_R3";		break;
		case ASM51_INS_ANL__A_R4:		out << "ASM51_INS_ANL__A_R4";		break;
		case ASM51_INS_ANL__A_R5:		out << "ASM51_INS_ANL__A_R5";		break;
		case ASM51_INS_ANL__A_R6:		out << "ASM51_INS_ANL__A_R6";		break;
		case ASM51_INS_ANL__A_R7:		out << "ASM51_INS_ANL__A_R7";		break;
		case ASM51_INS_ANL__C_DIR:		out << "ASM51_INS_ANL__C_DIR";		break;
		case ASM51_INS_ANL__C_SL_DIR:		out << "ASM51_INS_ANL__C_SL_DIR";	break;
		case ASM51_INS_CJNE__A_IMM_DIR:		out << "ASM51_INS_CJNE__A_IMM_DIR";	break;
		case ASM51_INS_CJNE__A_DIR_DIR:		out << "ASM51_INS_CJNE__A_DIR_DIR";	break;
		case ASM51_INS_CJNE__IR0_IMM_DIR:	out << "ASM51_INS_CJNE__IR0_IMM_DIR";	break;
		case ASM51_INS_CJNE__IR1_IMM_DIR:	out << "ASM51_INS_CJNE__IR1_IMM_DIR";	break;
		case ASM51_INS_CJNE__R0_IMM_DIR:	out << "ASM51_INS_CJNE__R0_IMM_DIR";	break;
		case ASM51_INS_CJNE__R1_IMM_DIR:	out << "ASM51_INS_CJNE__R1_IMM_DIR";	break;
		case ASM51_INS_CJNE__R2_IMM_DIR:	out << "ASM51_INS_CJNE__R2_IMM_DIR";	break;
		case ASM51_INS_CJNE__R3_IMM_DIR:	out << "ASM51_INS_CJNE__R3_IMM_DIR";	break;
		case ASM51_INS_CJNE__R4_IMM_DIR:	out << "ASM51_INS_CJNE__R4_IMM_DIR";	break;
		case ASM51_INS_CJNE__R5_IMM_DIR:	out << "ASM51_INS_CJNE__R5_IMM_DIR";	break;
		case ASM51_INS_CJNE__R6_IMM_DIR:	out << "ASM51_INS_CJNE__R6_IMM_DIR";	break;
		case ASM51_INS_CJNE__R7_IMM_DIR:	out << "ASM51_INS_CJNE__R7_IMM_DIR";	break;
		case ASM51_INS_CLR__DIR:		out << "ASM51_INS_CLR__DIR";		break;
		case ASM51_INS_CLR__C:			out << "ASM51_INS_CLR__C";		break;
		case ASM51_INS_CLR__A:			out << "ASM51_INS_CLR__A";		break;
		case ASM51_INS_CPL__DIR:		out << "ASM51_INS_CPL__DIR";		break;
		case ASM51_INS_CPL__C:			out << "ASM51_INS_CPL__C";		break;
		case ASM51_INS_CPL__A:			out << "ASM51_INS_CPL__A";		break;
		case ASM51_INS_DA__A:			out << "ASM51_INS_DA__A";		break;
		case ASM51_INS_DEC__DIR:		out << "ASM51_INS_DEC__DIR";		break;
		case ASM51_INS_DEC__A:			out << "ASM51_INS_DEC__A";		break;
		case ASM51_INS_DEC__IR0:		out << "ASM51_INS_DEC__IR0";		break;
		case ASM51_INS_DEC__IR1:		out << "ASM51_INS_DEC__IR1";		break;
		case ASM51_INS_DEC__R0:			out << "ASM51_INS_DEC__R0";		break;
		case ASM51_INS_DEC__R1:			out << "ASM51_INS_DEC__R1";		break;
		case ASM51_INS_DEC__R2:			out << "ASM51_INS_DEC__R2";		break;
		case ASM51_INS_DEC__R3:			out << "ASM51_INS_DEC__R3";		break;
		case ASM51_INS_DEC__R4:			out << "ASM51_INS_DEC__R4";		break;
		case ASM51_INS_DEC__R5:			out << "ASM51_INS_DEC__R5";		break;
		case ASM51_INS_DEC__R6:			out << "ASM51_INS_DEC__R6";		break;
		case ASM51_INS_DEC__R7:			out << "ASM51_INS_DEC__R7";		break;
		case ASM51_INS_DIV__AB:			out << "ASM51_INS_DIV__AB";		break;
		case ASM51_INS_DJNZ__DIR_DIR:		out << "ASM51_INS_DJNZ__DIR_DIR";	break;
		case ASM51_INS_DJNZ__R0_DIR:		out << "ASM51_INS_DJNZ__R0_DIR";	break;
		case ASM51_INS_DJNZ__R1_DIR:		out << "ASM51_INS_DJNZ__R1_DIR";	break;
		case ASM51_INS_DJNZ__R2_DIR:		out << "ASM51_INS_DJNZ__R2_DIR";	break;
		case ASM51_INS_DJNZ__R3_DIR:		out << "ASM51_INS_DJNZ__R3_DIR";	break;
		case ASM51_INS_DJNZ__R4_DIR:		out << "ASM51_INS_DJNZ__R4_DIR";	break;
		case ASM51_INS_DJNZ__R5_DIR:		out << "ASM51_INS_DJNZ__R5_DIR";	break;
		case ASM51_INS_DJNZ__R6_DIR:		out << "ASM51_INS_DJNZ__R6_DIR";	break;
		case ASM51_INS_DJNZ__R7_DIR:		out << "ASM51_INS_DJNZ__R7_DIR";	break;
		case ASM51_INS_INC__A:			out << "ASM51_INS_INC__A";		break;
		case ASM51_INS_INC__DIR:		out << "ASM51_INS_INC__DIR";		break;
		case ASM51_INS_INC__IR0:		out << "ASM51_INS_INC__IR0";		break;
		case ASM51_INS_INC__IR1:		out << "ASM51_INS_INC__IR1";		break;
		case ASM51_INS_INC__R0:			out << "ASM51_INS_INC__R0";		break;
		case ASM51_INS_INC__R1:			out << "ASM51_INS_INC__R1";		break;
		case ASM51_INS_INC__R2:			out << "ASM51_INS_INC__R2";		break;
		case ASM51_INS_INC__R3:			out << "ASM51_INS_INC__R3";		break;
		case ASM51_INS_INC__R4:			out << "ASM51_INS_INC__R4";		break;
		case ASM51_INS_INC__R5:			out << "ASM51_INS_INC__R5";		break;
		case ASM51_INS_INC__R6:			out << "ASM51_INS_INC__R6";		break;
		case ASM51_INS_INC__R7:			out << "ASM51_INS_INC__R7";		break;
		case ASM51_INS_INC__DPTR:		out << "ASM51_INS_INC__DPTR";		break;
		case ASM51_INS_JB__DIR_DIR:		out << "ASM51_INS_JB__DIR_DIR";		break;
		case ASM51_INS_JBC__DIR_DIR:		out << "ASM51_INS_JBC__DIR_DIR";	break;
		case ASM51_INS_JC__DIR:			out << "ASM51_INS_JC__DIR";		break;
		case ASM51_INS_JMP__IA_DPTR:		out << "ASM51_INS_JMP__IA_DPTR";	break;
		case ASM51_INS_JMP__DIR:		out << "ASM51_INS_JMP__DIR";		break;
		case ASM51_INS_JNB__DIR:		out << "ASM51_INS_JNB__DIR";		break;
		case ASM51_INS_JNC__DIR:		out << "ASM51_INS_JNC__DIR";		break;
		case ASM51_INS_JNZ__DIR:		out << "ASM51_INS_JNZ__DIR";		break;
		case ASM51_INS_JZ__DIR:			out << "ASM51_INS_JZ__DIR";		break;
		case ASM51_INS_LCALL__DIR:		out << "ASM51_INS_LCALL__DIR";		break;
		case ASM51_INS_LJMP__DIR:		out << "ASM51_INS_LJMP__DIR";		break;
		case ASM51_INS_MOV__DIR_DIR:		out << "ASM51_INS_MOV__DIR_DIR";	break;
		case ASM51_INS_MOV__DIR_IMM:		out << "ASM51_INS_MOV__DIR_IMM";	break;
		case ASM51_INS_MOV__DIR_IR0:		out << "ASM51_INS_MOV__DIR_IR0";	break;
		case ASM51_INS_MOV__DIR_IR1:		out << "ASM51_INS_MOV__DIR_IR1";	break;
		case ASM51_INS_MOV__DIR_R0:		out << "ASM51_INS_MOV__DIR_R0";		break;
		case ASM51_INS_MOV__DIR_R1:		out << "ASM51_INS_MOV__DIR_R1";		break;
		case ASM51_INS_MOV__DIR_R2:		out << "ASM51_INS_MOV__DIR_R2";		break;
		case ASM51_INS_MOV__DIR_R3:		out << "ASM51_INS_MOV__DIR_R3";		break;
		case ASM51_INS_MOV__DIR_R4:		out << "ASM51_INS_MOV__DIR_R4";		break;
		case ASM51_INS_MOV__DIR_R5:		out << "ASM51_INS_MOV__DIR_R5";		break;
		case ASM51_INS_MOV__DIR_R6:		out << "ASM51_INS_MOV__DIR_R6";		break;
		case ASM51_INS_MOV__DIR_R7:		out << "ASM51_INS_MOV__DIR_R7";		break;
		case ASM51_INS_MOV__DIR_C:		out << "ASM51_INS_MOV__DIR_C";		break;
		case ASM51_INS_MOV__DIR_A:		out << "ASM51_INS_MOV__DIR_A";		break;
		case ASM51_INS_MOV__IR0_IMM:		out << "ASM51_INS_MOV__IR0_IMM";	break;
		case ASM51_INS_MOV__IR1_IMM:		out << "ASM51_INS_MOV__IR1_IMM";	break;
		case ASM51_INS_MOV__IR0_DIR:		out << "ASM51_INS_MOV__IR0_DIR";	break;
		case ASM51_INS_MOV__IR1_DIR:		out << "ASM51_INS_MOV__IR1_DIR";	break;
		case ASM51_INS_MOV__IR0_A:		out << "ASM51_INS_MOV__IR0_A";		break;
		case ASM51_INS_MOV__IR1_A:		out << "ASM51_INS_MOV__IR1_A";		break;
		case ASM51_INS_MOV__DPTR_IMM:		out << "ASM51_INS_MOV__DPTR_IMM";	break;
		case ASM51_INS_MOV__R0_IMM:		out << "ASM51_INS_MOV__R0_IMM";		break;
		case ASM51_INS_MOV__R1_IMM:		out << "ASM51_INS_MOV__R1_IMM";		break;
		case ASM51_INS_MOV__R2_IMM:		out << "ASM51_INS_MOV__R2_IMM";		break;
		case ASM51_INS_MOV__R3_IMM:		out << "ASM51_INS_MOV__R3_IMM";		break;
		case ASM51_INS_MOV__R4_IMM:		out << "ASM51_INS_MOV__R4_IMM";		break;
		case ASM51_INS_MOV__R5_IMM:		out << "ASM51_INS_MOV__R5_IMM";		break;
		case ASM51_INS_MOV__R6_IMM:		out << "ASM51_INS_MOV__R6_IMM";		break;
		case ASM51_INS_MOV__R7_IMM:		out << "ASM51_INS_MOV__R7_IMM";		break;
		case ASM51_INS_MOV__R0_DIR:		out << "ASM51_INS_MOV__R0_DIR";		break;
		case ASM51_INS_MOV__R1_DIR:		out << "ASM51_INS_MOV__R1_DIR";		break;
		case ASM51_INS_MOV__R2_DIR:		out << "ASM51_INS_MOV__R2_DIR";		break;
		case ASM51_INS_MOV__R3_DIR:		out << "ASM51_INS_MOV__R3_DIR";		break;
		case ASM51_INS_MOV__R4_DIR:		out << "ASM51_INS_MOV__R4_DIR";		break;
		case ASM51_INS_MOV__R5_DIR:		out << "ASM51_INS_MOV__R5_DIR";		break;
		case ASM51_INS_MOV__R6_DIR:		out << "ASM51_INS_MOV__R6_DIR";		break;
		case ASM51_INS_MOV__R7_DIR:		out << "ASM51_INS_MOV__R7_DIR";		break;
		case ASM51_INS_MOV__R0_A:		out << "ASM51_INS_MOV__R0_A";		break;
		case ASM51_INS_MOV__R1_A:		out << "ASM51_INS_MOV__R1_A";		break;
		case ASM51_INS_MOV__R2_A:		out << "ASM51_INS_MOV__R2_A";		break;
		case ASM51_INS_MOV__R3_A:		out << "ASM51_INS_MOV__R3_A";		break;
		case ASM51_INS_MOV__R4_A:		out << "ASM51_INS_MOV__R4_A";		break;
		case ASM51_INS_MOV__R5_A:		out << "ASM51_INS_MOV__R5_A";		break;
		case ASM51_INS_MOV__R6_A:		out << "ASM51_INS_MOV__R6_A";		break;
		case ASM51_INS_MOV__R7_A:		out << "ASM51_INS_MOV__R7_A";		break;
		case ASM51_INS_MOV__A_IMM:		out << "ASM51_INS_MOV__A_IMM";		break;
		case ASM51_INS_MOV__A_IR0:		out << "ASM51_INS_MOV__A_IR0";		break;
		case ASM51_INS_MOV__A_IR1:		out << "ASM51_INS_MOV__A_IR1";		break;
		case ASM51_INS_MOV__A_R0:		out << "ASM51_INS_MOV__A_R0";		break;
		case ASM51_INS_MOV__A_R1:		out << "ASM51_INS_MOV__A_R1";		break;
		case ASM51_INS_MOV__A_R2:		out << "ASM51_INS_MOV__A_R2";		break;
		case ASM51_INS_MOV__A_R3:		out << "ASM51_INS_MOV__A_R3";		break;
		case ASM51_INS_MOV__A_R4:		out << "ASM51_INS_MOV__A_R4";		break;
		case ASM51_INS_MOV__A_R5:		out << "ASM51_INS_MOV__A_R5";		break;
		case ASM51_INS_MOV__A_R6:		out << "ASM51_INS_MOV__A_R6";		break;
		case ASM51_INS_MOV__A_R7:		out << "ASM51_INS_MOV__A_R7";		break;
		case ASM51_INS_MOV__A_DIR:		out << "ASM51_INS_MOV__A_DIR";		break;
		case ASM51_INS_MOV__C_DIR:		out << "ASM51_INS_MOV__C_DIR";		break;
		case ASM51_INS_MOVC__A_IA_DPTR:		out << "ASM51_INS_MOVC__A_IA_DPTR";	break;
		case ASM51_INS_MOVC__A_IA_PC:		out << "ASM51_INS_MOVC__A_IA_PC";	break;
		case ASM51_INS_MOVX__IDPTR_A:		out << "ASM51_INS_MOVX__IDPTR_A";	break;
		case ASM51_INS_MOVX__IR0_A:		out << "ASM51_INS_MOVX__IR0_A";		break;
		case ASM51_INS_MOVX__IR1_A:		out << "ASM51_INS_MOVX__IR1_A";		break;
		case ASM51_INS_MOVX__A_IDPTR:		out << "ASM51_INS_MOVX__A_IDPTR";	break;
		case ASM51_INS_MOVX__A_IR0:		out << "ASM51_INS_MOVX__A_IR0";		break;
		case ASM51_INS_MOVX__A_IR1:		out << "ASM51_INS_MOVX__A_IR1";		break;
		case ASM51_INS_MUL__AB:			out << "ASM51_INS_MUL__AB";		break;
		case ASM51_INS_NOP:			out << "ASM51_INS_NOP";			break;
		case ASM51_INS_ORL__DIR_A:		out << "ASM51_INS_ORL__DIR_A";		break;
		case ASM51_INS_ORL__DIR_IMM:		out << "ASM51_INS_ORL__DIR_IMM";	break;
		case ASM51_INS_ORL__A_IMM:		out << "ASM51_INS_ORL__A_IMM";		break;
		case ASM51_INS_ORL__A_DIR:		out << "ASM51_INS_ORL__A_DIR";		break;
		case ASM51_INS_ORL__A_IR0:		out << "ASM51_INS_ORL__A_IR0";		break;
		case ASM51_INS_ORL__A_IR1:		out << "ASM51_INS_ORL__A_IR1";		break;
		case ASM51_INS_ORL__A_R0:		out << "ASM51_INS_ORL__A_R0";		break;
		case ASM51_INS_ORL__A_R1:		out << "ASM51_INS_ORL__A_R1";		break;
		case ASM51_INS_ORL__A_R2:		out << "ASM51_INS_ORL__A_R2";		break;
		case ASM51_INS_ORL__A_R3:		out << "ASM51_INS_ORL__A_R3";		break;
		case ASM51_INS_ORL__A_R4:		out << "ASM51_INS_ORL__A_R4";		break;
		case ASM51_INS_ORL__A_R5:		out << "ASM51_INS_ORL__A_R5";		break;
		case ASM51_INS_ORL__A_R6:		out << "ASM51_INS_ORL__A_R6";		break;
		case ASM51_INS_ORL__A_R7:		out << "ASM51_INS_ORL__A_R7";		break;
		case ASM51_INS_ORL__C_DIR:		out << "ASM51_INS_ORL__C_DIR";		break;
		case ASM51_INS_ORL__C_SL_DIR:		out << "ASM51_INS_ORL__C_SL_DIR";	break;
		case ASM51_INS_POP__DIR:		out << "ASM51_INS_POP__DIR";		break;
		case ASM51_INS_PUSH__DIR:		out << "ASM51_INS_PUSH__DIR";		break;
		case ASM51_INS_RET:			out << "ASM51_INS_RET";			break;
		case ASM51_INS_RETI:			out << "ASM51_INS_RETI";		break;
		case ASM51_INS_RL__A:			out << "ASM51_INS_RL__A";		break;
		case ASM51_INS_RLC__A:			out << "ASM51_INS_RLC__A";		break;
		case ASM51_INS_RR__A:			out << "ASM51_INS_RR__A";		break;
		case ASM51_INS_RRC__A:			out << "ASM51_INS_RRC__A";		break;
		case ASM51_INS_SETB__C:			out << "ASM51_INS_SETB__C";		break;
		case ASM51_INS_SETB__DIR:		out << "ASM51_INS_SETB__DIR";		break;
		case ASM51_INS_SJMP__DIR:		out << "ASM51_INS_SJMP__DIR";		break;
		case ASM51_INS_SUBB__A_IMM:		out << "ASM51_INS_SUBB__A_IMM";		break;
		case ASM51_INS_SUBB__A_DIR:		out << "ASM51_INS_SUBB__A_DIR";		break;
		case ASM51_INS_SUBB__A_IR0:		out << "ASM51_INS_SUBB__A_IR0";		break;
		case ASM51_INS_SUBB__A_IR1:		out << "ASM51_INS_SUBB__A_IR1";		break;
		case ASM51_INS_SUBB__A_R0:		out << "ASM51_INS_SUBB__A_R0";		break;
		case ASM51_INS_SUBB__A_R1:		out << "ASM51_INS_SUBB__A_R1";		break;
		case ASM51_INS_SUBB__A_R2:		out << "ASM51_INS_SUBB__A_R2";		break;
		case ASM51_INS_SUBB__A_R3:		out << "ASM51_INS_SUBB__A_R3";		break;
		case ASM51_INS_SUBB__A_R4:		out << "ASM51_INS_SUBB__A_R4";		break;
		case ASM51_INS_SUBB__A_R5:		out << "ASM51_INS_SUBB__A_R5";		break;
		case ASM51_INS_SUBB__A_R6:		out << "ASM51_INS_SUBB__A_R6";		break;
		case ASM51_INS_SUBB__A_R7:		out << "ASM51_INS_SUBB__A_R7";		break;
		case ASM51_INS_SWAP__A:			out << "ASM51_INS_SWAP__A";		break;
		case ASM51_INS_XCH__A_IR0:		out << "ASM51_INS_XCH__A_IR0";		break;
		case ASM51_INS_XCH__A_IR1:		out << "ASM51_INS_XCH__A_IR1";		break;
		case ASM51_INS_XCH__A_R0:		out << "ASM51_INS_XCH__A_R0";		break;
		case ASM51_INS_XCH__A_R1:		out << "ASM51_INS_XCH__A_R1";		break;
		case ASM51_INS_XCH__A_R2:		out << "ASM51_INS_XCH__A_R2";		break;
		case ASM51_INS_XCH__A_R3:		out << "ASM51_INS_XCH__A_R3";		break;
		case ASM51_INS_XCH__A_R4:		out << "ASM51_INS_XCH__A_R4";		break;
		case ASM51_INS_XCH__A_R5:		out << "ASM51_INS_XCH__A_R5";		break;
		case ASM51_INS_XCH__A_R6:		out << "ASM51_INS_XCH__A_R6";		break;
		case ASM51_INS_XCH__A_R7:		out << "ASM51_INS_XCH__A_R7";		break;
		case ASM51_INS_XCH__A_DIR:		out << "ASM51_INS_XCH__A_DIR";		break;
		case ASM51_INS_XCHD__A_IR0:		out << "ASM51_INS_XCHD__A_IR0";		break;
		case ASM51_INS_XCHD__A_IR1:		out << "ASM51_INS_XCHD__A_IR1";		break;
		case ASM51_INS_XRL__DIR_A:		out << "ASM51_INS_XRL__DIR_A";		break;
		case ASM51_INS_XRL__DIR_IMM:		out << "ASM51_INS_XRL__DIR_IMM";	break;
		case ASM51_INS_XRL__A_IMM:		out << "ASM51_INS_XRL__A_IMM";		break;
		case ASM51_INS_XRL__A_DIR:		out << "ASM51_INS_XRL__A_DIR";		break;
		case ASM51_INS_XRL__A_IR0:		out << "ASM51_INS_XRL__A_IR0";		break;
		case ASM51_INS_XRL__A_IR1:		out << "ASM51_INS_XRL__A_IR1";		break;
		case ASM51_INS_XRL__A_R0:		out << "ASM51_INS_XRL__A_R0";		break;
		case ASM51_INS_XRL__A_R1:		out << "ASM51_INS_XRL__A_R1";		break;
		case ASM51_INS_XRL__A_R2:		out << "ASM51_INS_XRL__A_R2";		break;
		case ASM51_INS_XRL__A_R3:		out << "ASM51_INS_XRL__A_R3";		break;
		case ASM51_INS_XRL__A_R4:		out << "ASM51_INS_XRL__A_R4";		break;
		case ASM51_INS_XRL__A_R5:		out << "ASM51_INS_XRL__A_R5";		break;
		case ASM51_INS_XRL__A_R6:		out << "ASM51_INS_XRL__A_R6";		break;
		case ASM51_INS_XRL__A_R7:		out << "ASM51_INS_XRL__A_R7";		break;
		case ASM51__MAX__:			out << "ASM51__MAX__";			break;
	}
	return out;
}
