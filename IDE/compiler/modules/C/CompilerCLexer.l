/* ========================================================================== */
/**
 * @brief
 *
 * ...
 *
 * (C) copyright 2013, 2014 Moravia Microsystems, s.r.o.
 */
/* ========================================================================== */


/* -------------------------------------------------------------------------- */
/* PROLOGUE - FLEX DECLARATIONS                                               */
/* -------------------------------------------------------------------------- */

%{
    // Standard header files.
    #include <cmath>
    #include <cctype>
    #include <cstdio>
    #include <cstdint>
    #include <cstdlib>
    #include <iostream>

    // Compiler core interface to the syntax analyzer (parser) and the lexical analyzer (lexer/scaner).
    #include "CompilerParserInterface.h"

    // Functions for handling escape sequences in strings, etc.
    #include "CompilerLexerUtils.h"
    using namespace CompilerLexerUtils;


    // Header file for the parser generated by Bison.
    #include "CompilerCParser.h"

    // Each time lexer matches a string, move the end cursor to its end.
    #define YY_USER_ACTION \
        yylloc->last_column += yyleng;

    /**
     * @brief
     * @param[in,out] yylval
     */
    inline void enlargeStringBuffer ( YYSTYPE * yylval,
                                      CompilerParserInterface * compiler,
                                      int byMin = 1 );
%}

/* data type of the user-specific data to be stored in compiler */
%option extra-type="CompilerParserInterface *"
/* instructs flex to write a C header to FILE */
%option header-file="CompilerCLexer.h"
/* changes the default `yy' prefix used by flex for all globally-visible variable and function names */
%option prefix="CompilerCLexer_"
/* instruct flex that GNU bison %locations are being used */
%option bison-locations
/* instructs flex to generate a C scanner that is meant to be called by a GNU bison parser */
%option bison-bridge
/* instructs flex to generate a case-sensitive scanner */
%option case-sensitive
/* instructs flex to generate a scanner which never considers its input interactive */
%option never-interactive
/* instructs flex to generate a reentrant C scanner */
%option reentrant
/* instructs flex to generate an 8-bit scanner, i.e., one which can recognize 8-bit characters */
%option 8bit
/* in general, you use `-B' when you are certain that your scanner will never be used interactively */
%option batch
/* suppresses inclusion of the non-ANSI header file unistd.h. */
%option nounistd
/* directs flex to generate a scanner that maintains the number of the current line read from its input */
%option yylineno
/* makes the scanner not call yywrap() upon an end-of-file */
%option noyywrap
/* generate warning messages */
%option warn
/* enable use of start condition stacks */
%option stack
/* get rid of the warning message: 'int yy_top_state(yyscan_t)â€™ defined but not used */
%option noyy_top_state
/* To suppress the warning message "yyunput defined but not used". */
%option nounput


/*
 * Named regular expressions used in the lexer
 */
/* White space. */
WSPACE  ([ \t]|\u00A0)+
/* New line */
NLINE   (\r?\n)|(\n?\r)
/* C like escape sequence, such as `\x4A', `\uABCD', `\U1234abcd', and `\177'. */
 //EDIT THIS! Include \t \n and so
XESC    (\\[0-7]{1,3})|(\\x[0-9A-F]{1,2})|(\\[uU][0-9A-F]{1,8})
/* Floating point number. */
FLOAT   [0-9]+\.[0-9]+(e[+-][0-9]+)?
/* An identifier in the language. */
ID      [_a-zA-Z][_a-zA-Z0-9]*



/* -------------------------------------------------------------------------- */
/* LEXICAL RULES                                                              */
/* -------------------------------------------------------------------------- */

%%

%{
    // At each yylex invocation, mark the current position as the start of the next token.
    yylloc_param->first_line   = yylloc_param->last_line;
    yylloc_param->first_column = yylloc_param->last_column;
%}

 // -----------------------------------------------------------------------------------------
 // >>>>>>>>>>>>>>>>>>>>>>>>>> TODO: write lexical rules here! <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
 // -----------------------------------------------------------------------------------------


 /* White space: */
{WSPACE}        { /* eat up white space */ }
{NLINE}         {
                    yylloc->last_line++;
                    yylloc->last_column = 1;
                }

 /* Special tokens */
";"             { return EOS;               }

 /* Keywords */
"break"         { return KW_BREAK;          }
"case"          { return KW_CASE;           }
"continue"      { return KW_CONTINUE;       }
"default"       { return KW_DEFAULT;        }
"do"            { return KW_DO;             }
"else"          { return KW_ELSE;           }
"for"           { return KW_FOR;            }
"goto"          { return KW_GOTO;           }
"if"            { return KW_IF;             }
"inline"        { return KW_INLINE;         }
"return"        { return KW_RETURN;         }
"restrict"      { return KW_RESTRICT;       }
"sizeof"        { return KW_SIZEOF;         }
"switch"        { return KW_SWITCH;         }
"while"         { return KW_WHILE;          }


"auto"          { return DATA_AUTO;         }
"char"          { return DATA_CHAR;         }
"const"         { return DATA_CONST;        }
"double"        { return DATA_DOUBLE;       }
"extern"        { return DATA_EXTERN;       }
"float"         { return DATA_FLOAT;        }
"enum"          { return DATA_ENUM;         }
"int"           { return DATA_INT;          }
"long"          { return DATA_LONG;         }
"register"      { return DATA_REGISTER;     }
"short"         { return DATA_SHORT;        }
"signed"        { return DATA_SIGNED;       }
"static"        { return DATA_STATIC;       }
"struct"        { return DATA_STRUCT;       }
"typedef"       { return DATA_TYPEDEF;      }
"union"         { return DATA_UNION;        }
"unsigned"      { return DATA_UNSIGNED;     }
"void"          { return DATA_VOID;         }
"volatile"      { return DATA_VOLATILE;     }

 /* Brackets */
"("             { return B_RND_LEFT;        }
")"             { return B_RND_RIGHT;       }
"["             { return B_SQR_LEFT;        }
"]"             { return B_SQR_RIGHT;       }
"{"             { return B_CRL_LEFT;        }
"}"             { return B_CRL_RIGHT;       }


 /* Expression operators */
":"             { return O_COLON;           }
"?"             { return O_QUESTION_MARK;   }
","             { return O_COMMA;           }
"."             { return O_DOT;             }
"->"            { return O_ARROW;           }
"/"             { return O_SLASH;           }
"+"             { return O_PLUS;            }
"-"             { return O_MINUS;           }
"*"             { return O_ASTERISK;        }
"!"             { return O_NOT;             }
"%"             { return O_MOD;             }
"<<"            { return O_SHL;             }
">>"            { return O_SHR;             }
"&&"            { return O_AND;             }
"||"            { return O_OR;              }
"&"             { return O_BITAND;          }
"|"             { return O_BITOR;           }
"^"             { return O_BITXOR;          }
"=="            { return O_EQ;              }
"!="            { return O_NE;             }
"<"             { return O_LT;              }
"<="            { return O_LE;              }
">"             { return O_GT;              }
">="            { return O_GE;              }
"="             { return O_ASSIGN;          }
"~"             { return O_BITNOT;          }
"+="            { return O_ADD_ASSIGN;      }
"-="            { return O_SUB_ASSIGN;      }
"*="            { return O_MUL_ASSIGN;      }
"/="            { return O_DIV_ASSIGN;      }
"%="            { return O_MOD_ASSIGN;      }
"<<="           { return O_SHL_ASSIGN;      }
">>="           { return O_SHR_ASSIGN;      }
"&="            { return O_BAND_ASSIGN;     }
"|="            { return O_BOR_ASSIGN;      }
"^="            { return O_XOR_ASSIGN;      }
"--"            { return O_DECREMENT;       }
"++"            { return O_INCREMENT;       }

 /*
    Numbers
 */

 /* Integral */
0b[01]+         {
                    // Binary number.
                    yylval->integer = convertStrToNumber(yyextra, yylloc, (yytext + 2), 64, 2);
                    return INTEGER;
                }
0x[0-9A-F]+     {
                    // Hexadecimal number.
                    yylval->integer = convertStrToNumber(yyextra, yylloc, (yytext + 2), 16, 16);
                    return INTEGER;
                }
0[0-7]+         {
                    // Octal integer.
                    yylval->integer = convertStrToNumber(yyextra, yylloc, (yytext + 1), 22, 8);
                    return INTEGER;
                }
[0-9]+          {
                    // Decimal integer.
                    yylval->integer = convertStrToNumber(yyextra, yylloc, yytext, 20, 10);
                    return INTEGER;
                }

 /* Real numbers */
{FLOAT}         {
                    // Floating point number.
                    yylval->real = str2float ( yyextra, yylloc, yytext );
                    return REAL;
                }


 /* Character literals */
'{XESC}'        {
                    // Handle C like escape sequence, such as `\x4A', `\uABCD', `\U1234abcd', and `\177'

                    int size; // Size of the binary value in bytes
                    yylval->integer = (long long) escapeSequence(yyextra, yylloc, yytext, &size);

                    // Check whether the conversion was successful
                    if ( 0 == size )
                    {
                        yyextra->lexerMessage ( yylloc,
                                                CompilerBase::MT_ERROR,
                                                QObject::tr ( "unrecognized escape sequence: " ).toStdString()
                                                            + "`" + yytext + "'" );
                        yyterminate();
                    }

                    return INTEGER;
                }


 /* Identifiers */
{ID}            {
                    // Arbitrary identifier, e.g. `MYREG_U1'.

                    // Convert the string to upper case characters.
                    for ( int i = 0; i < yyleng; i++ )
                    {
                        yytext[i] = yytext[i];
                    }

                    // Return as general identifier.
                    yylval->symbol = yytext;
                    return IDENTIFIER;
                }



%%

/* --------------------------------------------------------------------------- */
/* EPILOGUE - USER CODE - FUNCTION DEFINITIONS                                 */
/* --------------------------------------------------------------------------- */

inline void enlargeStringBuffer ( YYSTYPE * semval,
                                  CompilerParserInterface * compiler,
                                  int byMin )
{
    if ( ( byMin + semval->string.size ) >= compiler->m_strMaxSize )
    {
        compiler->m_strMaxSize = 2 * semval->string.size;
        semval->string.data = (char*) realloc(semval->string.data, compiler->m_strMaxSize);
    }
}