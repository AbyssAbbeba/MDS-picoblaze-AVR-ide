%{
	// Standard header files
	#include <iostream>
	// Assembler interface to the syntax analyzer (parser) and the lexical analyzer (lexer/scaner)
	#include "CompilerParserInterface.h"
	// Header file for the parser generated by Bison
	#include "avr8parser.h"
%}

/* data type of the user-specific data to be stored in yyextra */
%option extra-type="CompilerParserInterface *"
/* instructs flex to write a C header to FILE */
%option header-file="avr8lexer.h"
/* changes the default `yy' prefix used by flex for all globally-visible variable and function names */
%option prefix="avr8lexer_"
/* instruct flex that GNU bison %locations are being used */
%option bison-locations
/* instructs flex to generate a C scanner that is meant to be called by a GNU bison parser */
%option bison-bridge
/* instructs flex to generate a case-insensitive scanner */
%option case-insensitive
/* instructs flex to generate a scanner which never considers its input interactive */
%option never-interactive
/* instructs flex to generate a reentrant C scanner */
%option reentrant
/* instructs flex to generate an 8-bit scanner, i.e., one which can recognize 8-bit characters */
%option 8bit
/* in general, you use `-B' when you are certain that your scanner will never be used interactively */
%option batch
/* suppresses inclusion of the non-ANSI header file unistd.h. */
%option nounistd
/* directs flex to generate a scanner that maintains the number of the current line read from its input */
%option yylineno
/* makes the scanner call yywrap() upon an end-of-file */
%option yywrap
/* generate warning messages */
%option warn

%%

[0-9]+   { yylval->val = atoi(yytext); return NUM; }
[\+|\-]  { yylval->sym = yytext[0]; return OPA; }
[\*|/]   { yylval->sym = yytext[0]; return OPM; }
"("      { return LP; }
")"      { return RP; }
";"      { return STOP; }
<<EOF>>  { return 0; }
[ \t\n]+ { }
.        { yyextra->lexerMessage(yyextra->toSourceLocation(yylloc), CompilerBase::MT_ERROR, "Unrecognized token!"); }

%%

int avr8lexer_wrap (yyscan_t /*yyscanner*/ ) {
	return 0;
}
