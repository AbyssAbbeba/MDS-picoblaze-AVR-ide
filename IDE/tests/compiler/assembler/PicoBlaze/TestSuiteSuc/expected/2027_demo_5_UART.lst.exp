                   1     ; MDS PicoBlaze IDE - Demonstration code
                   2
                   3     ; Macro instructions
                   4     ; See manual for more info
                   5
                   6     ; You may find some useful advices how to use this
                   7     ; IDE more efficiently
                   8     ; [Main menu] -> [Help] -> [Tip of the day]
                   9
                  10     ; Web page: www.moravia-microsystems.com
                  11     ; --------------------
                  12     ; Simple program for comunication with UART.
                  13     ; You can easily modify this example and use it in your aplication.
                  14     ; VHDL code of UART is included
                  15     ;
                  16     ; Press Start simulation and Animate to run the program
                  17     ;
                  18     ; Tell compiler type of procesor (KCPSM2, KCPSM3, KCPSM6 available)
                  19     device kcpsm2
                  20
                  21     ; Asign names to registers
  00000           22             NAMEREG         s0,temp1              ; temporary EQU register
  00001           23             NAMEREG         s1,temp2              ; temporary EQU register
  00002           24             NAMEREG         s2,temp3              ; temporary EQU register
                  25             ; OR
  00003           26             RX_EQU        AUTOREG   AT 3          ; RX EQU
  00004           27             TXEQU        AUTOREG               ; TX EQU
  00005           28             LED_reg       AUTOREG           ; Leds EQU register
                  29
                  30     ; PORT_IDs
  00001           31             TX_id       PORT        0x01          ;  EQU register port ID
  00002           32             RX_id       PORT        0x02          ;  EQU register port ID
  00004           33             UART_stat   PORT        0x04          ; status register port ID
  00008           34             LED_id      PORT        0x08          ; Led register
                  35     ; UART Status register:
                  36     ;  [2] Tx ready
                  37     ;  [3] new Rx EQU
                  38     ;  [4] Rx buffer overflow
                  39
                  40     ;  Macro definition
                  41     ;==============================================================================;
                  42     ; UART status checking MACRO (IF TX can be done)
                  43     UART_ready_wait     MACRO
                  44                         INPUT       Temp1, UART_stat    ; checking UART status
                  45                         load        Temp1, 4            ; load bit 2 (is Tx ready?)
                  46                         JUMP        Z, ($ - 2)
                  47                         ENDM
                  48     ; UART status checking MACRO (NEW RX EQU?)
                  49     UART_new_EQU_wait  MACRO
                  50                         INPUT       Temp1, UART_stat    ; checking UART status
                  51                         load        Temp1, 8            ; load bit 2 (is Tx ready?)
                  52                         JUMP        Z, ($ - 2)
                  53                         ENDM
                  54     ;==============================================================================;
                  55     ; Macro for sending character via UART
                  56     ; Parameters: 1
                  57     ;==============================================================================;
                  58     Sendchar            MACRO       char                 ; One parameter
                  59                         UART_ready_wait                  ; Expand UART_ready_wait MACRO here
                  60                         LOAD        TXEQU, char
                  61                         OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                  62                         ENDM
                  63     ;==============================================================================;
                  64     ; Reads a single character from UART (waits on receive when none is prepared)
                  65     ; Registers used: Temp1, chreg
                  66     ;==============================================================================;
                  67     GetChar             MACRO
                  68                         UART_new_EQU_wait              ; Wait for new EQU
                  69                         INPUT       RX_EQU, RX_id       ; TX PORT_ID, sending char parameter
                  70                         ENDM
                  71     ;==============================================================================;
                  72     ; Send 0D and 0A character pair via UART
                  73     ; Macros used: SendChar
                  74     ;==============================================================================;
                  75     SendCRLF            MACRO
                  76                         SendChar  0x0D          ; CR character
                  77                         SendChar  0x0A          ; CR character
                  78                         ENDM                           ; Return from procedure
                  79     ;==============================================================================;
                  80
                  81     ;==============================================================================;
                  82     ; Procedures for waiting for specified time
                  83     ; Duration is set in registers Temp1, Temp2 and Temp3
                  84     ;
                  85     ;   clock           instruction execution time
                  86     ;   10.00 MHz              200.00 ns
                  87     ;   19.44 MHz              102.88 ns
                  88     ;   38.88 MHz               51.44 ns
                  89     ;   50.00 MHz               40.00 ns
                  90     ;  100.00 MHz               20.00 ns
                  91     ;
                  92     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                  93     ;   1s # (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                  94     ;
                  95     ; Waiting loops
                  96     ;==============================================================================;
                  97     wait_for_1s         MACRO
                  98
                  99                         LOCAL     wait_1s
                 100                         LOCAL     wait_1s_i
                 101
                 102     wait_1s:            LOAD      Temp1, #250          ; Load Temp1 register
                 103                         LOAD      Temp2, #249          ; Load Temp2 register
                 104                         LOAD      Temp3, #200          ; Load Temp3 register
                 105     wait_1s_i:          SUB       Temp1, #1
                 106                         JUMP      NZ, wait_1s_i
                 107                         SUB       Temp2, #1
                 108                         JUMP      NZ, wait_1s_i
                 109                         SUB       Temp3, #1
                 110                         JUMP      NZ, wait_1s_i
                 111                         ENDM
                 112     ;--------------------------------------------------------------------------
                 113     wait_for_100ms      MACRO
                 114
                 115                         LOCAL     wait_100ms
                 116                         LOCAL     wait_100ms_i
                 117
                 118     wait_100ms:         LOAD      Temp1, #250          ; Load Temp1 register
                 119                         LOAD      Temp2, #249          ; Load Temp2 register
                 120                         LOAD      Temp3, #20           ; Load Temp3 register
                 121     wait_100ms_i:       SUB       Temp1, #1
                 122                         JUMP      NZ, wait_100ms_i
                 123                         SUB       Temp2, #1
                 124                         JUMP      NZ, wait_100ms_i
                 125                         SUB       Temp3, #1
                 126                         JUMP      NZ, wait_100ms_i
                 127                         ENDM
                 128     ;==============================================================================;
                 129     ; UART RX register:
                 130     ;  [1] Rotate leds 8x
                 131     ;  [2] Send "Hello world" via UART
                 132     ;-------------------------------------------------------------------------------------
                 133
                 134
                 135
                 136     ;=======================================================================
                 137     ; END OF MACRO DEFINITIONS ;;
                 138     ;=======================================================================
                 139     ; Main program >>>
                 140
                 141     ; Vectors
                 142
                 143
                 144     ;-------------------------------------------------------------------------
                 145     ; Interrupt routine
  00000          146     INTERRUPT:          SendChar  'I'
W: value out of range: 0x49, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x9.
W: ==> ==> value out of range: 0x49, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x9.
                 147 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
000 20004        148 +2                      INPUT       Temp1, UART_stat    ; checking UART status
001 10020        149 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
002 35000        150 +2                      JUMP        Z, ($ - 2)
003 10448        151 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x49, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x9.
004 22401        152 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 153                         SendChar  'N'
W: value out of range: 0x4e, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0xe.
W: ==> ==> value out of range: 0x4e, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0xe.
                 154 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
005 20004        155 +2                      INPUT       Temp1, UART_stat    ; checking UART status
006 10020        156 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
007 35005        157 +2                      JUMP        Z, ($ - 2)
008 10470        158 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x4e, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0xe.
009 22401        159 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 160                         SendChar  'T'
W: value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
W: ==> ==> value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
                 161 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
00A 20004        162 +2                      INPUT       Temp1, UART_stat    ; checking UART status
00B 10020        163 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
00C 3500A        164 +2                      JUMP        Z, ($ - 2)
00D 104A0        165 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
00E 22401        166 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 167                         SendChar  'E'
W: value out of range: 0x45, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x5.
W: ==> ==> value out of range: 0x45, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x5.
                 168 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
00F 20004        169 +2                      INPUT       Temp1, UART_stat    ; checking UART status
010 10020        170 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
011 3500F        171 +2                      JUMP        Z, ($ - 2)
012 10428        172 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x45, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x5.
013 22401        173 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 174                         SendChar  'R'
W: value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
W: ==> ==> value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
                 175 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
014 20004        176 +2                      INPUT       Temp1, UART_stat    ; checking UART status
015 10020        177 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
016 35014        178 +2                      JUMP        Z, ($ - 2)
017 10490        179 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
018 22401        180 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 181                         SendChar  'R'
W: value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
W: ==> ==> value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
                 182 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
019 20004        183 +2                      INPUT       Temp1, UART_stat    ; checking UART status
01A 10020        184 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
01B 35019        185 +2                      JUMP        Z, ($ - 2)
01C 10490        186 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
01D 22401        187 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 188                         SendChar  'U'
W: value out of range: 0x55, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x15.
W: ==> ==> value out of range: 0x55, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x15.
                 189 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
01E 20004        190 +2                      INPUT       Temp1, UART_stat    ; checking UART status
01F 10020        191 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
020 3501E        192 +2                      JUMP        Z, ($ - 2)
021 104A8        193 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x55, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x15.
022 22401        194 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 195                         SendChar  'P'
W: value out of range: 0x50, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x10.
W: ==> ==> value out of range: 0x50, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x10.
                 196 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
023 20004        197 +2                      INPUT       Temp1, UART_stat    ; checking UART status
024 10020        198 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
025 35023        199 +2                      JUMP        Z, ($ - 2)
026 10480        200 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x50, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x10.
027 22401        201 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 202                         SendChar  'T'
W: value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
W: ==> ==> value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
                 203 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
028 20004        204 +2                      INPUT       Temp1, UART_stat    ; checking UART status
029 10020        205 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
02A 35028        206 +2                      JUMP        Z, ($ - 2)
02B 104A0        207 +1                      LOAD        TXEQU, char
W: ==> value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
02C 22401        208 +1                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 209                         SendCRLF
                 210 +1                      SendChar  0x0D          ; CR character
                 211 +2                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
02D 20004        212 +3                      INPUT       Temp1, UART_stat    ; checking UART status
02E 10020        213 +3                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
02F 3502D        214 +3                      JUMP        Z, ($ - 2)
030 10468        215 +2                      LOAD        TXEQU, char
031 22401        216 +2                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
                 217 +1                      SendChar  0x0A          ; CR character
                 218 +2                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
032 20004        219 +3                      INPUT       Temp1, UART_stat    ; checking UART status
033 10020        220 +3                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
034 35032        221 +3                      JUMP        Z, ($ - 2)
035 10450        222 +2                      LOAD        TXEQU, char
036 22401        223 +2                      OUTPUT      TXEQU, TX_id       ; TX PORT_ID, sending char parameter
037 2C001        224                         RETURNI ENABLE
                 225     ; Start of main program
  00038          226     Start:
                 227                         wait_for_1s             ; wait for initialization of FPGA circuits
                 228 +1                      LOCAL     wait_1s
                 229 +1                      LOCAL     wait_1s_i
                 230 +1
038 000FA        231 +1  wait_1s:            LOAD      Temp1, #250          ; Load Temp1 register
039 001F9        232 +1                      LOAD      Temp2, #249          ; Load Temp2 register
03A 002C8        233 +1                      LOAD      Temp3, #200          ; Load Temp3 register
03B 0C001        234 +1  wait_1s_i:          SUB       Temp1, #1
03C 3543B        235 +1                      JUMP      NZ, wait_1s_i
03D 0C101        236 +1                      SUB       Temp2, #1
03E 3543B        237 +1                      JUMP      NZ, wait_1s_i
03F 0C201        238 +1                      SUB       Temp3, #1
040 3543B        239 +1                      JUMP      NZ, wait_1s_i
041 3C001        240                         ENABLE INTERRUPT
                 241     ; ---------------------------------------- Main loop
                 242
  00042          243     main_loop:          GetChar                       ; Receive via UART, get status of switches for example
                 244 +1                      UART_new_EQU_wait              ; Wait for new EQU
042 20004        245 +2                      INPUT       Temp1, UART_stat    ; checking UART status
043 10040        246 +2                      load        Temp1, 8            ; load bit 2 (is Tx ready?)
044 35042        247 +2                      JUMP        Z, ($ - 2)
045 20302        248 +1                      INPUT       RX_EQU, RX_id       ; TX PORT_ID, sending char parameter
046 34042        249                         JUMP        main_loop
                 250
                 251
                 252     ; AND NOW YOU ARE READY !
                 253     ; We hope this example can help you use this IDE at his maximum potential
                 254     ; Click on [Main menu] -> [Project] -> [New] and create your own PicoBlaze project ...
