                   1     ; MDS PicoBlaze IDE - Demonstration code
                   2
                   3     ; Macro instructions
                   4     ; See manual for more info
                   5
                   6     ; You may find some useful advices how to use this
                   7     ; IDE more efficiently
                   8     ; [Main menu] -> [Help] -> [Tip of the day]
                   9
                  10     ; Web page: www.moravia-microsystems.com
                  11     ; --------------------
                  12     ; Simple program for comunication with UART.
                  13     ; You can easily modify this example and use it in your aplication.
                  14     ; VHDL code of UART is included
                  15     ;
                  16     ; Press Start simulation and Animate to run the program
                  17     ;
                  18     ; Tell compiler type of procesor (KCPSM2, KCPSM3, KCPSM6 available)
                  19     device kcpsm2
                  20
                  21     ; Asign names to registers
  00000           22             NAMEREG         s0,temp1              ; temporary data register
  00001           23             NAMEREG         s1,temp2              ; temporary data register
  00002           24             NAMEREG         s2,temp3              ; temporary data register
                  25             ; OR
  00003           26             RX_data        AUTOREG   AT 3          ; RX data
  00004           27             TXdata        AUTOREG               ; TX data
  00005           28             LED_reg       AUTOREG           ; Leds data register
                  29
                  30     ; PORT_IDs
  00001           31             TX_id       PORT        0x01          ;  data register port ID
  00002           32             RX_id       PORT        0x02          ;  data register port ID
  00004           33             UART_stat   PORT        0x04          ; status register port ID
  00008           34             LED_id      PORT        0x08          ; Led register
                  35     ; UART Status register:
                  36     ;  [2] Tx ready
                  37     ;  [3] new Rx data
                  38     ;  [4] Rx buffer overflow
                  39
                  40     ;  Macro definition
                  41     ;==============================================================================;
                  42     ; UART status checking MACRO (IF TX can be done)
                  43     UART_ready_wait     MACRO
                  44                         INPUT       Temp1, UART_stat    ; checking UART status
                  45                         load        Temp1, 4            ; load bit 2 (is Tx ready?)
                  46                         JUMP        Z, ($ - 2)
                  47                         ENDM
                  48     ; UART status checking MACRO (NEW RX data?)
                  49     UART_new_data_wait  MACRO
                  50                         INPUT       Temp1, UART_stat    ; checking UART status
                  51                         load        Temp1, 8            ; load bit 2 (is Tx ready?)
                  52                         JUMP        Z, ($ - 2)
                  53                         ENDM
                  54     ;==============================================================================;
                  55     ; Macro for sending character via UART
                  56     ; Parameters: 1
                  57     ;==============================================================================;
                  58     Sendchar            MACRO       char                 ; One parameter
                  59                         UART_ready_wait                  ; Expand UART_ready_wait MACRO here
                  60                         LOAD        TXdata, char
                  61                         OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                  62                         ENDM
                  63     ;==============================================================================;
                  64     ; Reads a single character from UART (waits on receive when none is prepared)
                  65     ; Registers used: Temp1, chreg
                  66     ;==============================================================================;
                  67     GetChar             MACRO
                  68                         UART_new_data_wait              ; Wait for new data
                  69                         INPUT       RX_data, RX_id       ; TX PORT_ID, sending char parameter
                  70                         ENDM
                  71     ;==============================================================================;
                  72     ; Send 0D and 0A character pair via UART
                  73     ; Macros used: SendChar
                  74     ;==============================================================================;
                  75     SendCRLF            MACRO
                  76                         SendChar  0x0D          ; CR character
                  77                         SendChar  0x0A          ; CR character
                  78                         ENDM                           ; Return from procedure
                  79     ;==============================================================================;
                  80
                  81     ;==============================================================================;
                  82     ; Procedures for waiting for specified time
                  83     ; Duration is set in registers Temp1, Temp2 and Temp3
                  84     ;
                  85     ;   clock           instruction execution time
                  86     ;   10.00 MHz              200.00 ns
                  87     ;   19.44 MHz              102.88 ns
                  88     ;   38.88 MHz               51.44 ns
                  89     ;   50.00 MHz               40.00 ns
                  90     ;  100.00 MHz               20.00 ns
                  91     ;
                  92     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                  93     ;   1s # (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                  94     ;
                  95     ; Waiting loops
                  96     ;==============================================================================;
                  97     wait_for_1s         MACRO
                  98
                  99                         LOCAL     wait_1s
                 100                         LOCAL     wait_1s_i
                 101
                 102     wait_1s:            LOAD      Temp1, #250          ; Load Temp1 register
                 103                         LOAD      Temp2, #249          ; Load Temp2 register
                 104                         LOAD      Temp3, #200          ; Load Temp3 register
                 105     wait_1s_i:          SUB       Temp1, #1
                 106                         JUMP      NZ, wait_1s_i
                 107                         SUB       Temp2, #1
                 108                         JUMP      NZ, wait_1s_i
                 109                         SUB       Temp3, #1
                 110                         JUMP      NZ, wait_1s_i
                 111                         ENDM
                 112     ;--------------------------------------------------------------------------
                 113     wait_for_100ms      MACRO
                 114
                 115                         LOCAL     wait_100ms
                 116                         LOCAL     wait_100ms_i
                 117
                 118     wait_100ms:         LOAD      Temp1, #250          ; Load Temp1 register
                 119                         LOAD      Temp2, #249          ; Load Temp2 register
                 120                         LOAD      Temp3, #20           ; Load Temp3 register
                 121     wait_100ms_i:       SUB       Temp1, #1
                 122                         JUMP      NZ, wait_100ms_i
                 123                         SUB       Temp2, #1
                 124                         JUMP      NZ, wait_100ms_i
                 125                         SUB       Temp3, #1
                 126                         JUMP      NZ, wait_100ms_i
                 127                         ENDM
                 128     ;==============================================================================;
                 129     ; UART RX register:
                 130     ;  [1] Rotate leds 8x
                 131     ;  [2] Send "Hello world" via UART
                 132     ;-------------------------------------------------------------------------------------
                 133
                 134
                 135
                 136     ;=======================================================================
                 137     ; END OF MACRO DEFINITIONS ;;
                 138     ;=======================================================================
                 139     ; Main program >>>
                 140
                 141     ; Vectors
  003FF          142             ADDRESS 0x3FF                             ; interrupt vector
3FF 34001        143             JUMP    INTERRUPT
  00000          144             ADDRESS 0x000                             ; RESET vector
000 34039        145             JUMP    Start
                 146
                 147     ;-------------------------------------------------------------------------
                 148     ; Interrupt routine
  00001          149     INTERRUPT:          SendChar  'I'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x49, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x9.
                 150 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
001 20004        151 +2                      INPUT       Temp1, UART_stat    ; checking UART status
002 10020        152 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
003 35001        153 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
004 10448        154 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x49, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x9.
005 22401        155 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 156                         SendChar  'N'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x4e, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0xe.
                 157 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
006 20004        158 +2                      INPUT       Temp1, UART_stat    ; checking UART status
007 10020        159 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
008 35006        160 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
009 10470        161 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x4e, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0xe.
00A 22401        162 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 163                         SendChar  'T'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
                 164 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
00B 20004        165 +2                      INPUT       Temp1, UART_stat    ; checking UART status
00C 10020        166 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00D 3500B        167 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
00E 104A0        168 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
00F 22401        169 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 170                         SendChar  'E'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x45, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x5.
                 171 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
010 20004        172 +2                      INPUT       Temp1, UART_stat    ; checking UART status
011 10020        173 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
012 35010        174 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
013 10428        175 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x45, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x5.
014 22401        176 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 177                         SendChar  'R'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
                 178 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
015 20004        179 +2                      INPUT       Temp1, UART_stat    ; checking UART status
016 10020        180 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
017 35015        181 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
018 10490        182 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
019 22401        183 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 184                         SendChar  'R'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
                 185 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
01A 20004        186 +2                      INPUT       Temp1, UART_stat    ; checking UART status
01B 10020        187 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
01C 3501A        188 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
01D 10490        189 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x52, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x12.
01E 22401        190 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 191                         SendChar  'U'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x55, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x15.
                 192 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
01F 20004        193 +2                      INPUT       Temp1, UART_stat    ; checking UART status
020 10020        194 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
021 3501F        195 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
022 104A8        196 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x55, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x15.
023 22401        197 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 198                         SendChar  'P'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x50, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x10.
                 199 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
024 20004        200 +2                      INPUT       Temp1, UART_stat    ; checking UART status
025 10020        201 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
026 35024        202 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
027 10480        203 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x50, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x10.
028 22401        204 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 205                         SendChar  'T'
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
                 206 +1                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
029 20004        207 +2                      INPUT       Temp1, UART_stat    ; checking UART status
02A 10020        208 +2                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
02B 35029        209 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
02C 104A0        210 +1                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: ==> value out of range: 0x54, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x14.
02D 22401        211 +1                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 212                         SendCRLF
                 213 +1                      SendChar  0x0D          ; CR character
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 214 +2                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
02E 20004        215 +3                      INPUT       Temp1, UART_stat    ; checking UART status
02F 10020        216 +3                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
030 3502E        217 +3                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
031 10468        218 +2                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
032 22401        219 +2                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
                 220 +1                      SendChar  0x0A          ; CR character
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 221 +2                      UART_ready_wait                  ; Expand UART_ready_wait MACRO here
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
033 20004        222 +3                      INPUT       Temp1, UART_stat    ; checking UART status
034 10020        223 +3                      load        Temp1, 4            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
035 35033        224 +3                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
036 10450        225 +2                      LOAD        TXdata, char
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
037 22401        226 +2                      OUTPUT      TXdata, TX_id       ; TX PORT_ID, sending char parameter
038 2C001        227                         RETURNI ENABLE
                 228     ; Start of main program
  00039          229     Start:
                 230                         wait_for_1s             ; wait for initialization of FPGA circuits
                 231 +1                      LOCAL     wait_1s
                 232 +1                      LOCAL     wait_1s_i
                 233 +1
039 000FA        234 +1  wait_1s:            LOAD      Temp1, #250          ; Load Temp1 register
03A 001F9        235 +1  wait_1s:            LOAD      Temp1, #250          ; Load Temp1 register
03B 002C8        236 +1                      LOAD      Temp2, #249          ; Load Temp2 register
03C 0C001        237 +1                      LOAD      Temp3, #200          ; Load Temp3 register
03D 3543C        238 +1  wait_1s_i:          SUB       Temp1, #1
W: instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
03E 0C101        239 +1  wait_1s_i:          SUB       Temp1, #1
03F 3543C        240 +1                      JUMP      NZ, wait_1s_i
W: instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
040 0C201        241 +1                      SUB       Temp2, #1
041 3543C        242 +1                      JUMP      NZ, wait_1s_i
W: instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
                 243 +1                      SUB       Temp3, #1
                 244 +1                      JUMP      NZ, wait_1s_i
042 3C001        245                         ENABLE INTERRUPT
                 246     ; ---------------------------------------- Main loop
                 247
  00043          248     main_loop:          GetChar                       ; Receive via UART, get status of switches for example
                 249 +1                      UART_new_data_wait              ; Wait for new data
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
043 20004        250 +2                      INPUT       Temp1, UART_stat    ; checking UART status
044 10040        251 +2                      load        Temp1, 8            ; load bit 2 (is Tx ready?)
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
045 35043        252 +2                      JUMP        Z, ($ - 2)
W: ==> instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
046 20302        253 +1                      INPUT       RX_data, RX_id       ; TX PORT_ID, sending char parameter
047 34043        254                         JUMP        main_loop
                 255
                 256
                 257     ; AND NOW YOU ARE READY !
                 258     ; We hope this example can help you use this IDE at his maximum potential
                 259     ; Click on [Main menu] -> [Project] -> [New] and create your own PicoBlaze project ...
