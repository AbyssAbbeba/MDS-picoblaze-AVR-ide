                   1     ; Compiler load case for Assembler
                   2     ; instruction opcodes
                   3     device kcpsm2
                   4
  00001            5     loadsymb1    SET        1h
  00011            6     loadsymb2    SET        0x11
  00001            7     loadsymb3    SET        1
  00003            8     loadsymb4    SET        3d
  00004            9     loadsymb5    EQU        4h
  00005           10     loadsymb6    EQU        0x05
  00006           11     loadsymb7    EQU        6
  00007           12     loadsymb8    EQU        7
  00008           13     loadsymb9    REG        8h
  00009           14     loadsymb10    REG        9h
  0000A           15     loadsymb11    REG        Ah
  0000B           16     loadsymb12    REG        Bh
  0000C           17     loadsymb13    DATA        Ch
  00005           18     loadsymb14    DATA        0x05
  00002           19     loadsymb15    DATA        2
  00003           20     loadsymb16    DATA        3d
  00002           21     loadsymb17    CODE        0h + 2h
  00002           22     loadsymb18    CODE        2h
  00002           23     loadsymb19    CODE        2h
  00002           24     loadsymb20    CODE        2h
                  25     loadsymb21    DEFINE        3h
                  26     loadsymb22    DEFINE        4h
                  27     loadsymb23    DEFINE        5h
                  28     loadsymb24    DEFINE        loadsymb1 + loadsymb11
                  29
                  30
  00000           31               ORG        0x000
000 34002         32               JUMP        Start
001 34000         33               JUMP        0x000
W: instruction `JUMP aaa' requires operand #1 to be of type(s): label; while the given operand is of type: number.
  00002           34     Start:
002 35000         35             JUMP        Z, 0x000
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
003 35400         36             JUMP        NZ,0x000
W: instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
004 35800         37             JUMP        C, 0x000
W: instruction `JUMP C, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
005 35C00         38             JUMP        NC,0x000
W: instruction `JUMP NC, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
                  39
                  40          ; Arithmetics
006 0880C         41             ADD         loadsymb9,#12
007 0A814         42             ADDCY       loadsymb9,#20
008 0C8FF         43             SUB         loadsymb9,#ffh
009 0E8FF         44             SUBCY       loadsymb9,#0xff
00A 00800         45             load     loadsymb9,#0
                  46
00B 18840         47             ADD         loadsymb9,loadsymb9
00C 1A840         48             ADDCY       loadsymb9,loadsymb9
00D 1C840         49             SUB         loadsymb9,loadsymb9
00E 1E848         50             SUBCY       loadsymb9,loadsymb10
00F 10850         51             load     loadsymb9,loadsymb11
                  52
                  53     ; Logical
010 00801         54             LOAD      loadsymb9,#01h
011 02800         55             AND       loadsymb9,#0
012 04801         56             OR        loadsymb9,#1
013 06802         57             XOR       loadsymb9,#2
014 00803         58             load      loadsymb9,#3
                  59
015 10840         60             LOAD      loadsymb9,loadsymb9
016 12840         61             AND       loadsymb9,loadsymb9
017 14840         62             OR        loadsymb9,loadsymb9
018 16840         63             XOR       loadsymb9,loadsymb9
019 10840         64             load      loadsymb9,loadsymb9
                  65     ; Shift and rotate
01A 2890E         66             SR0       loadsymb10
01B 2890F         67             SR1       loadsymb10
01C 2890A         68             SRX        loadsymb10
01D 28908         69             SRA        loadsymb10
01E 2890C         70             RR         loadsymb10
                  71
01F 28906         72             SL0       loadsymb10
020 28907         73             SL1       loadsymb10
021 28904         74             SLX       loadsymb10
022 28900         75             SLA       loadsymb10
023 28902         76             RL        loadsymb10
                  77         ; Others
024 3602D         78             CALl      Podprog
025 3702D         79             CALL      Z,Podprog
026 3742D         80             CALL      NZ,Podprog
027 3782D         81             CALL      C,Podprog
028 37C2D         82             CALL      NC,Podprog
                  83
029 10860         84             load     loadsymb9,loadsymb13
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: data.
02A 10950         85             load     loadsymb10,10
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
02B 10A60         86             load     loadsymb11,loadsymb13
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: data.
02C 10B28         87             load     loadsymb12,5
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
                  88
  0002D           89     Podprog:
02D 24000         90             RETURN
02E 25000         91             RETURN    Z
02F 25400         92             RETURN    NZ
030 25800         93             RETURN    C
031 25C00         94             RETURN    NC
                  95
                  96
                  97       ;  JUMP aaa ADD sX,kk LOAD sX,kk SR0 sX
                  98     ;JUMP Z,aaa ADDCY sX,kk AND sX,kk SR1 sX
                  99     ;JUMP NZ,aaa SUB sX,kk OR sX,kk SRX sX
                 100     ;JUMP C,aaa SUBCY sX,kk XOR sX,kk SRA sX
                 101     ;JUMP NC,aaa load sX,kk load sX,kk RR sX
                 102     ;CALL aaa ADD sX,sY LOAD sX,sY SL0 sX
                 103     ;CALL Z,aaa ADDCY sX,sY AND sX,sY SL1 sX
                 104     ;CALL NZ,aaa SUB sX,sY OR sX,sY SLX sX
                 105     ;CALL C,aaa SUBCY sX,sY XOR sX,sY SLA sX
                 106     ;CALL NC,aaa load sX,sY load sX,sY RL sX
