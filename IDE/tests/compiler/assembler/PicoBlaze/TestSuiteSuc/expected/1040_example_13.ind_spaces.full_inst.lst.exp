                   1     device kcpsm1
                   2
  00080            3     led_port                EQU             0x80                    ;8 simple LEDs
  00001            4     led0                    EQU             0x01                    ;     LED 0 - bit0
  00002            5     led1                    EQU             0x02                    ;         1 - bit1
  00004            6     led2                    EQU             0x04                    ;         2 - bit2
  00008            7     led3                    EQU             0x08                    ;         3 - bit3
  00010            8     led4                    EQU             0x10                    ;         4 - bit4
  00020            9     led5                    EQU             0x20                    ;         5 - bit5
  00040           10     led6                    EQU             0x40                    ;         6 - bit6
  00080           11     led7                    EQU             0x80                    ;         7 - bit7
                  12     ;
  00000           13     switch_port             EQU             0x00                    ;Read switches and press buttons
  00001           14     switch0                 EQU             0x01                    ;  Switches      SW0 - bit0
  00002           15     switch1                 EQU             0x02                    ;                SW1 - bit1
  00004           16     switch2                 EQU             0x04                    ;                SW2 - bit2
  00008           17     switch3                 EQU             0x08                    ;                SW3 - bit3
  00010           18     btn_east                EQU             0x10                    ;  Buttons      East - bit4
  00020           19     btn_south               EQU             0x20                    ;              South - bit5
  00040           20     btn_north               EQU             0x40                    ;              North - bit6
  00080           21     btn_west                EQU             0x80                    ;               West - bit7
                  22     ;
  00001           23     rotary_port             EQU             0x01                    ;Read status of rotary encoder
  00001           24     rotary_leload             EQU             0x01                    ; Direction of last move Leload=1 Right=0  - bit0
  00002           25     rotary_press            EQU             0x02                    ;     Centre press contact (active High) - bit1
                  26     ;
                  27     ;LCD interface ports
                  28     ;
                  29     ;The master enable signal is not used by the LCD display itself
                  30     ;but may be required to confirm that LCD communication is active.
                  31     ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  32     ;is used because it shares the same EQU pins and conflicts must be avoided.
                  33     ;
  00040           34     lcd_output_port         EQU             0x40                    ;LCD character module output EQU and control
  00001           35     lcd_e                   EQU             0x01                    ;   active High Enable        E - bit0
  00002           36     lcd_rw                  EQU             0x02                    ;   Read=1 Write=0           RW - bit1
  00004           37     lcd_rs                  EQU             0x04                    ;   Instruction=0 EQU=1     RS - bit2
  00008           38     lcd_drive               EQU             0x08                    ;   Master enable (active High) - bit3
  00010           39     lcd_db4                 EQU             0x10                    ;   4-bit              EQU DB4 - bit4
  00020           40     lcd_db5                 EQU             0x20                    ;   interface          EQU DB5 - bit5
  00040           41     lcd_db6                 EQU             0x40                    ;                      EQU DB6 - bit6
  00080           42     lcd_db7                 EQU             0x80                    ;                      EQU DB7 - bit7
                  43     ;
  00002           44     lcd_input_port          EQU             0x02                    ;LCD character module input EQU
  00001           45     lcd_read_spare0         EQU             0x01                    ;    Spare bits               - bit0
  00002           46     lcd_read_spare1         EQU             0x02                    ;    are zero                 - bit1
  00004           47     lcd_read_spare2         EQU             0x04                    ;                             - bit2
  00008           48     lcd_read_spare3         EQU             0x08                    ;                             - bit3
  00010           49     lcd_read_db4            EQU             0x10                    ;    4-bit           EQU DB4 - bit4
  00020           50     lcd_read_db5            EQU             0x20                    ;    interface       EQU DB5 - bit5
  00040           51     lcd_read_db6            EQU             0x40                    ;                    EQU DB6 - bit6
  00080           52     lcd_read_db7            EQU             0x80                    ;                    EQU DB7 - bit7
  00080           53     bit7                    EQU             0x80                    ;
  00040           54     bit6                    EQU             0x40                    ;
  00020           55     bit5                    EQU             0x20                    ;
  00010           56     bit4                    EQU             0x10                    ;
  00008           57     bit3                    EQU             0x08                    ;
  00004           58     bit2                    EQU             0x04                    ;
  00002           59     bit1                    EQU             0x02                    ;
  00001           60     bit0                    EQU             0x01                    ;
                  61     ;
                  62     ;**************************************************************************************
                  63     ;Scratch Pad Memory Locations
                  64     ;**************************************************************************************
                  65     ;
  00000           66     rotary_status           EQU             0x00                    ;Status of rotary encoder
  00001           67     isr_s0                  EQU             0x01                    ;Preserve s0 contents during ISR
  00002           68     led_pattern             EQU             0x02                    ;LED pattern used in rotation mode
                  69     ;
  00003           70     mode                    EQU             0x03                    ;control mode 00=switch and button FF=rotary
  00004           71     ms1                     EQU             0x04
  00005           72     secl                    EQU             0x05
  00006           73     sech                    EQU             0x06
  00007           74     minl                    EQU             0x07
  00008           75     minh                    EQU             0x08
  00009           76     hourl                   EQU             0x09
  0000A           77     hourh                   EQU             0x0a
  0000B           78     week                    EQU             0x0b
  0000C           79     year1                   EQU             0x0c
  0000D           80     year2                   EQU             0x0d
  0000E           81     year3                   EQU             0x0e
  0000F           82     year4                   EQU             0x0f
  00010           83     ms2                     EQU             0x10
  00011           84     ms500                   EQU             0x11
  00012           85     isr_s1                  EQU             0x12
  00013           86     ms100                   EQU             0x13
  00014           87     rota_cnt                EQU             0x14
  00015           88     isr_s2                  EQU             0x15
  00016           89     temp                    EQU             0x16
  00017           90     pressed                 EQU             0x17
  00018           91     disp_flag               EQU             0x18
  00019           92     blink_flag              EQU             0x19
  0001A           93     disp_flag2              EQU             0x1a                    ;;;;;no use
  0001B           94     monh                    EQU             0x1b
  0001C           95     monl                    EQU             0x1c
  0001D           96     dayh                    EQU             0x1d
  0001E           97     dayl                    EQU             0x1e
  0001F           98     day_up                  EQU             0x1f
  00020           99     year100                 EQU             0x20
  00021          100     hourb                   EQU             0x21
  00022          101     minb                    EQU             0x22
  00023          102     secb                    EQU             0x23
  00024          103     yearb                   EQU             0x24
  00025          104     monb                    EQU             0x25
  00026          105     dayb                    EQU             0x26
  00027          106     dmax                    EQU             0x27                    ;
  00028          107     jan                     EQU             0x28                    ;
  00029          108     feb                     EQU             0x29                    ;
  0002A          109     mar                     EQU             0x2a                    ;
  0002B          110     apr                     EQU             0x2b                    ;
  0002C          111     may                     EQU             0x2c                    ;
  0002D          112     jun                     EQU             0x2d                    ;
  0002E          113     jul                     EQU             0x2e                    ;
  0002F          114     aug                     EQU             0x2f                    ;
  00030          115     sep                     EQU             0x30                    ;
  00031          116     oct                     EQU             0x31                    ;
  00032          117     nov                     EQU             0x32                    ;
  00033          118     dec                     EQU             0x33                    ;
  00034          119     jan2                    EQU             0x34                    ;
  00035          120     feb2                    EQU             0x35                    ;
  00036          121     mar2                    EQU             0x36                    ;
  00037          122     apr2                    EQU             0x37                    ;
  00038          123     may2                    EQU             0x38                    ;
  00039          124     jun2                    EQU             0x39                    ;
  0003A          125     jul2                    EQU             0x3a                    ;
  0003B          126     aug2                    EQU             0x3b                    ;
  0003C          127     sep2                    EQU             0x3c                    ;
  0003D          128     oct2                    EQU             0x3d                    ;
  0003E          129     nov2                    EQU             0x3e                    ;
  0003F          130     dec2                    EQU             0x3f                    ;
                 131     ;The main operation of the program uses 1ms delays to set the shiload rate
                 132     ;of the LCD display. A 16-bit value determines how many milliseconds
                 133     ;there are between shiloads
                 134     ;
                 135     ;loads indicate that the fasload shiload rate that the LCD display supports is
                 136     ;500ms. Faster than this and the display becomes less clear to read.
                 137     ;
  00001          138     shiload_delay_msb         EQU             0x01                    ;delay is 500ms (01F4 hex)
  000F4          139     shiload_delay_lsb         EQU             0xf4
                 140     ;
                 141     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 142     ;
                 143     ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 144     ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 145     ;become lower than intended.
                 146     ;
  0000B          147     delay_1us_constant      EQU             0x0b
                 148     ;ASCII table
                 149     ;
  00061          150     character_a             EQU             0x61
  00062          151     character_b             EQU             0x62
  00063          152     character_c             EQU             0x63
  00064          153     character_d             EQU             0x64
  00065          154     character_e             EQU             0x65
  00066          155     character_f             EQU             0x66
  00067          156     character_g             EQU             0x67
  00068          157     character_h             EQU             0x68
  00069          158     character_i             EQU             0x69
  0006A          159     character_j             EQU             0x6a
  0006B          160     character_k             EQU             0x6b
  0006C          161     character_l             EQU             0x6c
  0006D          162     character_m             EQU             0x6d
  0006E          163     character_n             EQU             0x6e
  0006F          164     character_o             EQU             0x6f
  00070          165     character_p             EQU             0x70
  00071          166     character_q             EQU             0x71
  00072          167     character_r             EQU             0x72
  00073          168     character_s             EQU             0x73
  00074          169     character_t             EQU             0x74
  00075          170     character_u             EQU             0x75
  00076          171     character_v             EQU             0x76
  00077          172     character_w             EQU             0x77
  00078          173     character_x             EQU             0x78
  00079          174     character_y             EQU             0x79
  0007A          175     character_z             EQU             0x7a
  00041          176     _character_a            EQU             0x41
  00042          177     _character_b            EQU             0x42
  00043          178     _character_c            EQU             0x43
  00044          179     _character_d            EQU             0x44
  00045          180     _character_e            EQU             0x45
  00046          181     _character_f            EQU             0x46
  00047          182     _character_g            EQU             0x47
  00048          183     _character_h            EQU             0x48
  00049          184     _character_i            EQU             0x49
  0004A          185     _character_j            EQU             0x4a
  0004B          186     _character_k            EQU             0x4b
  0004C          187     _character_l            EQU             0x4c
  0004D          188     _character_m            EQU             0x4d
  0004E          189     _character_n            EQU             0x4e
  0004F          190     _character_o            EQU             0x4f
  00050          191     _character_p            EQU             0x50
  00051          192     _character_q            EQU             0x51
  00052          193     _character_r            EQU             0x52
  00053          194     _character_s            EQU             0x53
  00054          195     _character_t            EQU             0x54
  00055          196     _character_u            EQU             0x55
  00056          197     _character_v            EQU             0x56
  00057          198     _character_w            EQU             0x57
  00058          199     _character_x            EQU             0x58
  00059          200     _character_y            EQU             0x59
  0005A          201     _character_z            EQU             0x5a
  00030          202     character_0             EQU             0x30
  00031          203     character_1             EQU             0x31
  00032          204     character_2             EQU             0x32
  00033          205     character_3             EQU             0x33
  00034          206     character_4             EQU             0x34
  00035          207     character_5             EQU             0x35
  00036          208     character_6             EQU             0x36
  00037          209     character_7             EQU             0x37
  00038          210     character_8             EQU             0x38
  00039          211     character_9             EQU             0x39
  0003A          212     character_colon         EQU             0x3a
  0002E          213     character_stop          EQU             0x2e
  0003B          214     character_semi_colon    EQU             0x3b
  0002D          215     character_minus         EQU             0x2d
  0002F          216     character_divide        EQU             0x2f                    ;'/'
  0002B          217     character_plus          EQU             0x2b
  0002C          218     character_comma         EQU             0x2c
  0003C          219     character_less_than     EQU             0x3c
  0003E          220     character_greater_than  EQU             0x3e
  0003D          221     character_equals        EQU             0x3d
  00020          222     character_space         EQU             0x20
  0000D          223     character_cr            EQU             0x0d                    ;carriage return
  0003F          224     character_question      EQU             0x3f                    ;'?'
  00024          225     character_dollar        EQU             0x24
  00021          226     character_exclaim       EQU             0x21                    ;'!'
  00008          227     character_bs            EQU             0x08                    ;Back Space command character
                 228     ;
000 083E5        229     reset:                  CALL            lcd_reset
W: value out of range: 0x2e5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xe5.
001 08030        230                             ENABLE          interrupt
002 00DFF        231                             LOAD            sd, #0xff
003 00000        232                             LOAD            s0, #0x00               ;
004 0C0A0        233                             load           s0, hourh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
005 0C070        234                             load           s0, minl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
006 0C080        235                             load           s0, minh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
007 0C060        236                             load           s0, sech
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
008 0C050        237                             load           s0, secl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
009 0C0D0        238                             load           s0, year2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00A 0C0E0        239                             load           s0, year3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00B 0C0B0        240                             load           s0, monh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1b, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
00C 0C020        241                             load           s0, minb                ;;;;;;;;;;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x22, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
00D 0C030        242                             load           s0, secb                ;;;;;;;;;;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x23, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
00E 00009        243                             LOAD            s0, #0x09               ;
00F 0C090        244                             load           s0, hourl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
010 0C010        245                             load           s0, hourb               ;;;;;;;;;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x21, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
011 00002        246                             LOAD            s0, #0x02               ;
012 0C0C0        247                             load           s0, year1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
013 0C0D0        248                             load           s0, dayh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
014 00006        249                             LOAD            s0, #0x06               ;
015 0C0E0        250                             load           s0, dayl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
016 0C0F0        251                             load           s0, year4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
017 0C040        252                             load           s0, yearb               ;;;;;;;;;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
018 00005        253                             LOAD            s0, #0x05               ;
019 0C0C0        254                             load           s0, monl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
01A 0C0B0        255                             load           s0, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
01B 0C050        256                             load           s0, monb                ;;;;;;;;;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
01C 0001A        257                             LOAD            s0, #0x1a
01D 0C060        258                             load           s0, dayb                ;;;;;;;;;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
01E 0001F        259                             LOAD            s0, #0x1f
01F 0C080        260                             load           s0, jan                 ;1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x28, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
020 0C0A0        261                             load           s0, mar                 ;3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x2a, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
021 0C0C0        262                             load           s0, may                 ;5
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x2c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
022 0C0E0        263                             load           s0, jul                 ;7
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x2e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
023 0C0F0        264                             load           s0, aug                 ;8
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x2f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
024 0C010        265                             load           s0, oct                 ;10
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x31, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
025 0C0C0        266                             load           s0, 0xdec               ;12
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xdec, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
026 0001E        267                             LOAD            s0, #0x1e
027 0C0B0        268                             load           s0, apr                 ;4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x2b, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
028 0C0D0        269                             load           s0, jun                 ;6
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x2d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
029 0C000        270                             load           s0, sep                 ;9
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x30, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
02A 0C020        271                             load           s0, nov                 ;11
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x32, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
02B 0001C        272                             LOAD            s0, #0x1c
02C 0C0B0        273                             load           s0, 0xfeb               ;2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xfeb, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
02D 00003        274                             LOAD            s0, #0x03
02E 0C040        275                             load           s0, jan2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x34, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
02F 0C0D0        276                             load           s0, oct2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x3d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
030 00006        277                             LOAD            s0, #0x06
031 0C020        278                             load           s0, 0xfeb2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xfeb2, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
032 0C060        279                             load           s0, mar2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x36, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
033 0C0E0        280                             load           s0, nov2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x3e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
034 00002        281                             LOAD            s0, #0x02
035 0C070        282                             load           s0, apr2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x37, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x7.
036 0C0A0        283                             load           s0, jul2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x3a, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
037 00004        284                             LOAD            s0, #0x04
038 0C080        285                             load           s0, may2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x38, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
039 00000        286                             LOAD            s0, #0x00
03A 0C090        287                             load           s0, jun2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x39, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
03B 00005        288                             LOAD            s0, #0x05
03C 0C0B0        289                             load           s0, aug2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x3b, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
03D 00001        290                             LOAD            s0, #0x01
03E 0C0C0        291                             load           s0, sep2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x3c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
03F 0C020        292                             load           s0, 0xdec2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xdec2, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
040 00F00        293                             LOAD            sf, #0x00               ;
  00041          294     restart:
041 00510        295                             LOAD            s5, #0x10
042 08313        296                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
043 083D9        297                             CALL            disp_msg1
W: value out of range: 0x1d9, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd9.
044 00520        298                             LOAD            s5, #0x20
045 08313        299                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
046 083F4        300                             CALL            disp_msg2
W: value out of range: 0x1f4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xf4.
047 00335        301                             LOAD            s3, #0x35
048 0C360        302                             load           s3, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
049 00300        303     blink10:                LOAD            s3, #0x00
04A 0C330        304                             load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
04B 0C330        305     blink1:                 load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
04C 00305        306                             load         s3, #0x05
04D 0994B        307                             JUMP            c, blink1
04E 0052F        308                             LOAD            s5, #0x2f
04F 08313        309                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
050 0C560        310                             load           s5, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
051 083D4        311                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
052 00300        312                             LOAD            s3, #0x00
053 0C330        313                             load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
054 0C330        314     wait1:                  load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
055 00305        315                             load         s3, #0x05
056 09954        316                             JUMP            c, wait1
057 0052F        317                             LOAD            s5, #0x2f
058 08313        318                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
059 00520        319                             LOAD            s5, #0x20
05A 083D4        320                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
05B 0C560        321                             load           s5, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
05C 045FF        322                             ADD             s5, #0xff
05D 0C560        323                             load           s5, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
05E 0052F        324                             load         s5, #0x2f
05F 09549        325                             JUMP            nz, blink10
060 00510        326     rrestart:               LOAD            s5, #0x10
061 08313        327                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
062 08313        328                             CALL            disp_msg3
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
063 00520        329                             LOAD            s5, #0x20
064 08313        330                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
065 0832A        331                             CALL            disp_msg4
W: value out of range: 0x22a, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2a.
066 00335        332                             LOAD            s3, #0x35
067 0C360        333                             load           s3, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
068 00300        334     blink20:                LOAD            s3, #0x00
069 0C330        335                             load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
06A 0C330        336     blink2:                 load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
06B 00305        337                             load         s3, #0x05
06C 0996A        338                             JUMP            c, blink2
06D 0052F        339                             LOAD            s5, #0x2f
06E 08313        340                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
06F 0C560        341                             load           s5, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
070 083D4        342                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
071 00300        343                             LOAD            s3, #0x00
072 0C330        344                             load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
073 0C330        345     wait2:                  load           s3, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
074 00305        346                             load         s3, #0x05
075 09973        347                             JUMP            c, wait2
076 0052F        348                             LOAD            s5, #0x2f
077 08313        349                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
078 00520        350                             LOAD            s5, #0x20
079 083D4        351                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
07A 0C560        352                             load           s5, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
07B 045FF        353                             ADD             s5, #0xff
07C 0C560        354                             load           s5, temp
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
07D 0052F        355                             load         s5, #0x2f
07E 09568        356                             JUMP            nz, blink20
07F 00000        357                             LOAD            s0, #0x00
080 0C020        358                             load           s0, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
081 0C030        359                             load           s0, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
082 0C090        360                             load           s0, blink_flag
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x19, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
083 0C030        361                             load           s0, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
084 00510        362                             LOAD            s5, #0x10
085 08313        363                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
086 08347        364                             CALL            disp_msg5
W: value out of range: 0x247, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x47.
087 00520        365                             LOAD            s5, #0x20
088 08313        366                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
089 08365        367                             CALL            disp_msg6
W: value out of range: 0x265, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x65.
08A 0C030        368     pause:                  load           s0, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
08B 00032        369                             load         s0, #0x32
08C 0998A        370                             JUMP            c, pause
08D 083F6        371                             CALL            lcd_clear
W: value out of range: 0x2f6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xf6.
08E 0A000        372                             INPUT           s0, 0x00
08F 0C0A0        373                             load           s0, disp_flag2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1a, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
090 0C030        374                             load           s0, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
  00091          375     loop:
091 0C010        376                             load           s0, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x21, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
092 083D2        377                             CALL            b2bcd
W: value out of range: 0x1d2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd2.
093 0C090        378                             load           s0, hourl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
094 0C1A0        379                             load           s1, hourh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
095 0C020        380                             load           s0, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x22, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
096 083D2        381                             CALL            b2bcd
W: value out of range: 0x1d2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd2.
097 0C070        382                             load           s0, minl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
098 0C180        383                             load           s1, minh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
099 0C030        384                             load           s0, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x23, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
09A 083D2        385                             CALL            b2bcd
W: value out of range: 0x1d2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd2.
09B 0C050        386                             load           s0, secl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
09C 0C160        387                             load           s1, sech
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
09D 0C060        388                             load           s0, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
09E 083D2        389                             CALL            b2bcd
W: value out of range: 0x1d2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd2.
09F 0C0E0        390                             load           s0, dayl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
0A0 0C1D0        391                             load           s1, dayh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
0A1 0C050        392                             load           s0, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
0A2 083D2        393                             CALL            b2bcd
W: value out of range: 0x1d2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd2.
0A3 0C0C0        394                             load           s0, monl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
0A4 0C1B0        395                             load           s1, monh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1b, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
0A5 0C040        396                             load           s0, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0A6 083D2        397                             CALL            b2bcd
W: value out of range: 0x1d2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd2.
0A7 0C0F0        398                             load           s0, year4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0A8 0C1E0        399                             load           s1, year3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0A9 01FFF        400                             AND             sf, #0xff
0AA 09523        401                             JUMP            nz, skip1
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
                 402     ;;;DISP HH
0AB 00511        403                             LOAD            s5, #0x11
0AC 08313        404                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
0AD 0C330        405                             load           s3, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0AE 00301        406                             load         s3, #0x01
0AF 095B3        407                             JUMP            nz, dsp_hh
0B0 0C310        408                             load           s3, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
0B1 00301        409                             load            s3, #0x01
0B2 095BA        410                             JUMP            nz, space7
0B3 0C5A0        411     dsp_hh:                 load           s5, hourh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0B4 04530        412                             ADD             s5, #0x30
0B5 083D4        413                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0B6 0C590        414                             load           s5, hourl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0B7 04530        415                             ADD             s5, #0x30
0B8 083D4        416                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0B9 081BC        417                             JUMP            mode_2
0BA 083A0        418     space7:                 CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
0BB 083A0        419                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
  000BC          420     mode_2:
                 421     ;;;DISP MM
0BC 00514        422                             LOAD            s5, #0x14
0BD 08313        423                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
0BE 0C330        424                             load           s3, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0BF 00302        425                             load         s3, #0x02
0C0 095C4        426                             JUMP            nz, dsp_mm
0C1 0C310        427                             load           s3, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
0C2 00301        428                             load            s3, #0x01
0C3 095CB        429                             JUMP            nz, space6
0C4 0C580        430     dsp_mm:                 load           s5, minh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0C5 04530        431                             ADD             s5, #0x30
0C6 083D4        432                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0C7 0C570        433                             load           s5, minl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0C8 04530        434                             ADD             s5, #0x30
0C9 083D4        435                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0CA 081CD        436                             JUMP            mode_3
0CB 083A0        437     space6:                 CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
0CC 083A0        438                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
  000CD          439     mode_3:
                 440     ;;;DISP SS
0CD 00517        441                             LOAD            s5, #0x17
0CE 08313        442                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
0CF 0C330        443                             load           s3, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0D0 00303        444                             load         s3, #0x03
0D1 095D5        445                             JUMP            nz, dsp_ss
0D2 0C310        446                             load           s3, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
0D3 00301        447                             load            s3, #0x01
0D4 095DC        448                             JUMP            nz, space5
0D5 0C560        449     dsp_ss:                 load           s5, sech
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0D6 04530        450                             ADD             s5, #0x30
0D7 083D4        451                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0D8 0C550        452                             load           s5, secl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0D9 04530        453                             ADD             s5, #0x30
0DA 083D4        454                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0DB 081DE        455                             JUMP            mode_4
0DC 083A0        456     space5:                 CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
0DD 083A0        457                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
  000DE          458     mode_4:
                 459     ;;;DISP week
0DE 0051C        460                             LOAD            s5, #0x1c
0DF 08313        461                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
0E0 0C3B0        462                             load           s3, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0E1 00300        463                             load         s3, #0x00
0E2 095EA        464                             JUMP            nz, mon
0E3 00553        465                             LOAD            s5, #_character_s
0E4 083D4        466                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0E5 00575        467                             LOAD            s5, #character_u
0E6 083D4        468                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0E7 0056E        469                             LOAD            s5, #character_n
0E8 083D4        470                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0E9 08123        471                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
0EA 0C3B0        472     mon:                    load           s3, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0EB 00301        473                             load         s3, #0x01
0EC 095F4        474                             JUMP            nz, tue
0ED 0054D        475                             LOAD            s5, #_character_m
0EE 083D4        476                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0EF 0056F        477                             LOAD            s5, #character_o
0F0 083D4        478                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0F1 0056E        479                             LOAD            s5, #character_n
0F2 083D4        480                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0F3 08123        481                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
0F4 0C3B0        482     tue:                    load           s3, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0F5 00302        483                             load         s3, #0x02
0F6 095FE        484                             JUMP            nz, wed
0F7 00554        485                             LOAD            s5, #_character_t
0F8 083D4        486                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0F9 00575        487                             LOAD            s5, #character_u
0FA 083D4        488                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0FB 00565        489                             LOAD            s5, #character_e
0FC 083D4        490                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
0FD 08123        491                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
0FE 0C3B0        492     wed:                    load           s3, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0FF 00303        493                             load         s3, #0x03
100 09508        494                             JUMP            nz, thu
W: value out of range: 0x108, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8.
E: attempting to use unavailable space in program memory at address: 0x100.
101 00557        495                             LOAD            s5, #_character_w
E: attempting to use unavailable space in program memory at address: 0x101.
102 083D4        496                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x102.
103 00565        497                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x103.
104 083D4        498                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x104.
105 00564        499                             LOAD            s5, #character_d
E: attempting to use unavailable space in program memory at address: 0x105.
106 083D4        500                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x106.
107 08123        501                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
E: attempting to use unavailable space in program memory at address: 0x107.
108 0C3B0        502     thu:                    load           s3, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x108.
109 00304        503                             load         s3, #0x04
E: attempting to use unavailable space in program memory at address: 0x109.
10A 09512        504                             JUMP            nz, fri
W: value out of range: 0x112, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x12.
E: attempting to use unavailable space in program memory at address: 0x10a.
10B 00554        505                             LOAD            s5, #_character_t
E: attempting to use unavailable space in program memory at address: 0x10b.
10C 083D4        506                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x10c.
10D 00568        507                             LOAD            s5, #character_h
E: attempting to use unavailable space in program memory at address: 0x10d.
10E 083D4        508                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x10e.
10F 00575        509                             LOAD            s5, #character_u
E: attempting to use unavailable space in program memory at address: 0x10f.
110 083D4        510                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x110.
111 08123        511                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
E: attempting to use unavailable space in program memory at address: 0x111.
112 0C3B0        512     fri:                    load           s3, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x112.
113 00305        513                             load         s3, #0x05
E: attempting to use unavailable space in program memory at address: 0x113.
114 0951C        514                             JUMP            nz, sat
W: value out of range: 0x11c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1c.
E: attempting to use unavailable space in program memory at address: 0x114.
115 00546        515                             LOAD            s5, #_character_f
E: attempting to use unavailable space in program memory at address: 0x115.
116 083D4        516                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x116.
117 00572        517                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x117.
118 083D4        518                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x118.
119 00569        519                             LOAD            s5, #character_i
E: attempting to use unavailable space in program memory at address: 0x119.
11A 083D4        520                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x11a.
11B 08123        521                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
E: attempting to use unavailable space in program memory at address: 0x11b.
11C 00553        522     sat:                    LOAD            s5, #_character_s
E: attempting to use unavailable space in program memory at address: 0x11c.
11D 083D4        523                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x11d.
11E 00561        524                             LOAD            s5, #character_a
E: attempting to use unavailable space in program memory at address: 0x11e.
11F 083D4        525                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x11f.
120 00574        526                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x120.
121 083D4        527                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x121.
122 08123        528                             JUMP            load_bit0
W: value out of range: 0x123, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x23.
E: attempting to use unavailable space in program memory at address: 0x122.
  00123          529     load_bit0:
  00123          530     rotary_press1:
  00123          531     rotary_press2:
  00123          532     skip1:
                 533     ;;;DISP month
123 00526        534                             LOAD            s5, #0x26
E: attempting to use unavailable space in program memory at address: 0x123.
124 08313        535                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
E: attempting to use unavailable space in program memory at address: 0x124.
125 0C330        536                             load           s3, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x125.
126 00304        537                             load         s3, #0x04
E: attempting to use unavailable space in program memory at address: 0x126.
127 0952B        538                             JUMP            nz, dsp_mon
W: value out of range: 0x12b, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2b.
E: attempting to use unavailable space in program memory at address: 0x127.
128 0C310        539                             load           s3, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
E: attempting to use unavailable space in program memory at address: 0x128.
129 00301        540                             load            s3, #0x01
E: attempting to use unavailable space in program memory at address: 0x129.
12A 09532        541                             JUMP            nz, space4
W: value out of range: 0x132, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x32.
E: attempting to use unavailable space in program memory at address: 0x12a.
12B 0C5B0        542     dsp_mon:                load           s5, monh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1b, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
E: attempting to use unavailable space in program memory at address: 0x12b.
12C 04530        543                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x12c.
12D 083D4        544                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x12d.
12E 0C5C0        545                             load           s5, monl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
E: attempting to use unavailable space in program memory at address: 0x12e.
12F 04530        546                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x12f.
130 083D4        547                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x130.
131 08134        548                             JUMP            mode_5
W: value out of range: 0x134, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x34.
E: attempting to use unavailable space in program memory at address: 0x131.
132 083A0        549     space4:                 CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x132.
133 083A0        550                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x133.
  00134          551     mode_5:
                 552     ;;;DISP day
134 00529        553                             LOAD            s5, #0x29
E: attempting to use unavailable space in program memory at address: 0x134.
135 08313        554                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
E: attempting to use unavailable space in program memory at address: 0x135.
136 0C330        555                             load           s3, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x136.
137 00305        556                             load         s3, #0x05
E: attempting to use unavailable space in program memory at address: 0x137.
138 0953C        557                             JUMP            nz, dsp_dd
W: value out of range: 0x13c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x3c.
E: attempting to use unavailable space in program memory at address: 0x138.
139 0C310        558                             load           s3, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
E: attempting to use unavailable space in program memory at address: 0x139.
13A 00301        559                             load            s3, #0x01
E: attempting to use unavailable space in program memory at address: 0x13a.
13B 09543        560                             JUMP            nz, space3
W: value out of range: 0x143, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x43.
E: attempting to use unavailable space in program memory at address: 0x13b.
13C 0C5D0        561     dsp_dd:                 load           s5, dayh
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
E: attempting to use unavailable space in program memory at address: 0x13c.
13D 04530        562                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x13d.
13E 083D4        563                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x13e.
13F 0C5E0        564                             load           s5, dayl
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
E: attempting to use unavailable space in program memory at address: 0x13f.
140 04530        565                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x140.
141 083D4        566                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x141.
142 08145        567                             JUMP            mode_6
W: value out of range: 0x145, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x45.
E: attempting to use unavailable space in program memory at address: 0x142.
143 083A0        568     space3:                 CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x143.
144 083A0        569                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x144.
  00145          570     mode_6:
                 571     ;;;DISP year
145 0052C        572                             LOAD            s5, #0x2c
E: attempting to use unavailable space in program memory at address: 0x145.
146 08313        573                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
E: attempting to use unavailable space in program memory at address: 0x146.
147 0C330        574                             load           s3, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x147.
148 00306        575                             load         s3, #0x06
E: attempting to use unavailable space in program memory at address: 0x148.
149 0954D        576                             JUMP            nz, dsp_yy
W: value out of range: 0x14d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x4d.
E: attempting to use unavailable space in program memory at address: 0x149.
14A 0C310        577                             load           s3, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
E: attempting to use unavailable space in program memory at address: 0x14a.
14B 00301        578                             load            s3, #0x01
E: attempting to use unavailable space in program memory at address: 0x14b.
14C 0955A        579                             JUMP            nz, space2
W: value out of range: 0x15a, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x5a.
E: attempting to use unavailable space in program memory at address: 0x14c.
14D 0C5C0        580     dsp_yy:                 load           s5, year1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x14d.
14E 04530        581                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x14e.
14F 083D4        582                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x14f.
150 0C5D0        583                             load           s5, year2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x150.
151 04530        584                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x151.
152 083D4        585                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x152.
153 0C5E0        586                             load           s5, year3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x153.
154 04530        587                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x154.
155 083D4        588                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x155.
156 0C5F0        589                             load           s5, year4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x156.
157 04530        590                             ADD             s5, #0x30
E: attempting to use unavailable space in program memory at address: 0x157.
158 083D4        591                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x158.
159 0815E        592                             JUMP            mode_end
W: value out of range: 0x15e, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x5e.
E: attempting to use unavailable space in program memory at address: 0x159.
15A 083A0        593     space2:                 CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x15a.
15B 083A0        594                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x15b.
15C 083A0        595                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x15c.
15D 083A0        596                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x15d.
  0015E          597     mode_end:
15E 0C050        598                             load           s0, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
E: attempting to use unavailable space in program memory at address: 0x15e.
15F 00127        599                             LOAD            s1, #dmax
E: attempting to use unavailable space in program memory at address: 0x15f.
160 0C104        600                             ADD             s1, s0
E: attempting to use unavailable space in program memory at address: 0x160.
161 0C210        601                             load           s2, s1                 ;;28
E: attempting to use unavailable space in program memory at address: 0x161.
162 00002        602                             load         s0, #0x02               ;;Y
E: attempting to use unavailable space in program memory at address: 0x162.
163 09568        603                             JUMP            nz, no_feb
W: value out of range: 0x168, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x68.
E: attempting to use unavailable space in program memory at address: 0x163.
164 0C140        604                             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
E: attempting to use unavailable space in program memory at address: 0x164.
165 01103        605                             AND             s1, #0x03
E: attempting to use unavailable space in program memory at address: 0x165.
166 09568        606                             JUMP            nz, no_feb
W: value out of range: 0x168, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x68.
E: attempting to use unavailable space in program memory at address: 0x166.
167 04201        607                             ADD             s2, #0x01
E: attempting to use unavailable space in program memory at address: 0x167.
  00168          608     no_runnian:
168 0C270        609     no_feb:                 load           s2, dmax
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x27, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x7.
E: attempting to use unavailable space in program memory at address: 0x168.
169 0C160        610                             load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x169.
16A 0C210        611                             load         s2, s1
E: attempting to use unavailable space in program memory at address: 0x16a.
16B 09D6D        612                             JUMP            nc, under
W: value out of range: 0x16d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x6d.
E: attempting to use unavailable space in program memory at address: 0x16b.
16C 0C260        613                             load           s2, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x16c.
  0016D          614     under:
16D 0C1F0        615                             load           s1, day_up
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
E: attempting to use unavailable space in program memory at address: 0x16d.
16E 0C111        616                             AND             s1, s1
E: attempting to use unavailable space in program memory at address: 0x16e.
16F 09188        617                             JUMP            z, no_day_up
W: value out of range: 0x188, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x88.
E: attempting to use unavailable space in program memory at address: 0x16f.
170 0C160        618                             load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x170.
171 04101        619                             ADD             s1, #0x01
E: attempting to use unavailable space in program memory at address: 0x171.
172 0C160        620                             load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x172.
173 0C270        621                             load           s2, dmax
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x27, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x7.
E: attempting to use unavailable space in program memory at address: 0x173.
174 04201        622                             ADD             s2, #0x01
E: attempting to use unavailable space in program memory at address: 0x174.
175 0C120        623                             load         s1, s2
E: attempting to use unavailable space in program memory at address: 0x175.
176 09588        624                             JUMP            nz, no_mon_up
W: value out of range: 0x188, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x88.
E: attempting to use unavailable space in program memory at address: 0x176.
177 00101        625                             LOAD            s1, #0x01
E: attempting to use unavailable space in program memory at address: 0x177.
178 0C160        626                             load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x178.
179 0C150        627                             load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
E: attempting to use unavailable space in program memory at address: 0x179.
17A 04101        628                             ADD             s1, #0x01
E: attempting to use unavailable space in program memory at address: 0x17a.
17B 0C150        629                             load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
E: attempting to use unavailable space in program memory at address: 0x17b.
17C 0010D        630                             load         s1, #0x0d
E: attempting to use unavailable space in program memory at address: 0x17c.
17D 09588        631                             JUMP            nz, no_year_up
W: value out of range: 0x188, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x88.
E: attempting to use unavailable space in program memory at address: 0x17d.
17E 00101        632                             LOAD            s1, #0x01
E: attempting to use unavailable space in program memory at address: 0x17e.
17F 0C150        633                             load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
E: attempting to use unavailable space in program memory at address: 0x17f.
180 0C140        634                             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
E: attempting to use unavailable space in program memory at address: 0x180.
181 04101        635                             ADD             s1, #0x01
E: attempting to use unavailable space in program memory at address: 0x181.
182 0C140        636                             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
E: attempting to use unavailable space in program memory at address: 0x182.
183 00164        637                             load         s1, #0x64
E: attempting to use unavailable space in program memory at address: 0x183.
184 09588        638                             JUMP            nz, no_year_up
W: value out of range: 0x188, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x88.
E: attempting to use unavailable space in program memory at address: 0x184.
185 00100        639                             LOAD            s1, #0x00
E: attempting to use unavailable space in program memory at address: 0x185.
186 0C140        640                             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
E: attempting to use unavailable space in program memory at address: 0x186.
187 08188        641                             JUMP            no_year_up
W: value out of range: 0x188, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x88.
E: attempting to use unavailable space in program memory at address: 0x187.
  00188          642     no_mon_up:
  00188          643     no_day_up:
  00188          644     no_year_up:
188 00000        645                             LOAD            s0, #0x00
E: attempting to use unavailable space in program memory at address: 0x188.
189 0C0F0        646                             load           s0, day_up
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
E: attempting to use unavailable space in program memory at address: 0x189.
18A 000EC        647                             LOAD            s0, #0xdec
W: value out of range: 0xdec, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xec.
E: attempting to use unavailable space in program memory at address: 0x18a.
18B 0C250        648                             load           s2, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
E: attempting to use unavailable space in program memory at address: 0x18b.
18C 0C024        649                             ADD             s0, s2
E: attempting to use unavailable space in program memory at address: 0x18c.
18D 0C100        650                             load           s1, s0                 ;;;K
E: attempting to use unavailable space in program memory at address: 0x18d.
18E 0C040        651                             load           s0, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x24, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
E: attempting to use unavailable space in program memory at address: 0x18e.
18F 0C104        652                             ADD             s1, s0                  ;;;;;;;K+Y
E: attempting to use unavailable space in program memory at address: 0x18f.
190 00203        653                             load         s2, #0x03
E: attempting to use unavailable space in program memory at address: 0x190.
191 09993        654                             JUMP            c, rn
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
E: attempting to use unavailable space in program memory at address: 0x191.
192 04001        655                             ADD             s0, #0x01               ;;;;100+Y  >2(3..12)
E: attempting to use unavailable space in program memory at address: 0x192.
193 04063        656     rn:                     ADD             s0, #0x63               ;;;;;99+Y   1,2
E: attempting to use unavailable space in program memory at address: 0x193.
194 0D00E        657                             SR0             s0
E: attempting to use unavailable space in program memory at address: 0x194.
195 0D00E        658                             SR0             s0                      ;;;/4
E: attempting to use unavailable space in program memory at address: 0x195.
196 0C014        659                             ADD             s0, s1
E: attempting to use unavailable space in program memory at address: 0x196.
197 04006        660                             ADD             s0, #0x06
E: attempting to use unavailable space in program memory at address: 0x197.
198 0C260        661                             load           s2, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x198.
199 0C024        662                             ADD             s0, s2
E: attempting to use unavailable space in program memory at address: 0x199.
19A 040F9        663     mod7:                   ADD             s0, #0xf9
E: attempting to use unavailable space in program memory at address: 0x19a.
19B 09D9D        664                             JUMP            nc, m7_end
W: value out of range: 0x19d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x9d.
E: attempting to use unavailable space in program memory at address: 0x19b.
19C 0819A        665                             JUMP            mod7
W: value out of range: 0x19a, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x9a.
E: attempting to use unavailable space in program memory at address: 0x19c.
19D 04007        666     m7_end:                 ADD             s0, #0x07
E: attempting to use unavailable space in program memory at address: 0x19d.
19E 0C0B0        667                             load           s0, week
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x19e.
19F 0C030        668                             load           s0, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x19f.
1A0 010FF        669                             AND             s0, #0xff
E: attempting to use unavailable space in program memory at address: 0x1a0.
1A1 095A9        670                             JUMP            nz, setup
W: value out of range: 0x1a9, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa9.
E: attempting to use unavailable space in program memory at address: 0x1a1.
                 671     ;;;RUN
1A2 00520        672                             LOAD            s5, #0x20
E: attempting to use unavailable space in program memory at address: 0x1a2.
1A3 08313        673                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
E: attempting to use unavailable space in program memory at address: 0x1a3.
1A4 0C580        674                             load           s5, disp_flag
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x18, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
E: attempting to use unavailable space in program memory at address: 0x1a4.
1A5 083D4        675                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1a5.
1A6 083D4        676                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1a6.
1A7 083D4        677                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1a7.
1A8 081B1        678                             JUMP            modeupdate
W: value out of range: 0x1b1, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb1.
E: attempting to use unavailable space in program memory at address: 0x1a8.
  001A9          679     setup:
                 680     ;;;SET
1A9 00520        681                             LOAD            s5, #0x20
E: attempting to use unavailable space in program memory at address: 0x1a9.
1AA 08313        682                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
E: attempting to use unavailable space in program memory at address: 0x1aa.
1AB 00553        683                             LOAD            s5, #0x53               ;;;;;;;;;;;;;;;;;;;;;;;    S
E: attempting to use unavailable space in program memory at address: 0x1ab.
1AC 083D4        684                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1ac.
1AD 00545        685                             LOAD            s5, #0x45               ;;;;;;;;;;;;;;;;;;;;;;;    E
E: attempting to use unavailable space in program memory at address: 0x1ad.
1AE 083D4        686                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1ae.
1AF 00554        687                             LOAD            s5, #0x54               ;;;;;;;;;;;;;;;;;;;;;;;    T
E: attempting to use unavailable space in program memory at address: 0x1af.
1B0 083D4        688                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1b0.
1B1 0C030        689     modeupdate:             load           s0, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
E: attempting to use unavailable space in program memory at address: 0x1b1.
1B2 0C090        690                             load           s0, blink_flag
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x19, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
E: attempting to use unavailable space in program memory at address: 0x1b2.
  001B3          691     nochange:
1B3 0A000        692                             INPUT           s0, 0x00
E: attempting to use unavailable space in program memory at address: 0x1b3.
1B4 0C1A0        693                             load           s1, disp_flag2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1a, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
E: attempting to use unavailable space in program memory at address: 0x1b4.
1B5 0C103        694                             XOR             s1, s0
E: attempting to use unavailable space in program memory at address: 0x1b5.
1B6 09541        695                             JUMP            nz, restart
E: attempting to use unavailable space in program memory at address: 0x1b6.
1B7 0C0A0        696                             load           s0, disp_flag2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x1a, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
E: attempting to use unavailable space in program memory at address: 0x1b7.
1B8 0C050        697                             load           s0, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x25, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
E: attempting to use unavailable space in program memory at address: 0x1b8.
1B9 00005        698                             load         s0, #0x05
E: attempting to use unavailable space in program memory at address: 0x1b9.
1BA 095C1        699                             JUMP            nz, chk_sf
W: value out of range: 0x1c1, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc1.
E: attempting to use unavailable space in program memory at address: 0x1ba.
1BB 0C060        700                             load           s0, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
E: attempting to use unavailable space in program memory at address: 0x1bb.
1BC 00011        701                             load         s0, #0x11
E: attempting to use unavailable space in program memory at address: 0x1bc.
1BD 095C1        702                             JUMP            nz, chk_sf
W: value out of range: 0x1c1, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc1.
E: attempting to use unavailable space in program memory at address: 0x1bd.
1BE 0C020        703                             load           s0, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x22, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
E: attempting to use unavailable space in program memory at address: 0x1be.
1BF 00000        704                             load         s0, #0x00
E: attempting to use unavailable space in program memory at address: 0x1bf.
1C0 091C5        705                             JUMP            z, msg7
W: value out of range: 0x1c5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc5.
E: attempting to use unavailable space in program memory at address: 0x1c0.
1C1 00FFF        706     chk_sf:                 load         sf, #0xff
E: attempting to use unavailable space in program memory at address: 0x1c1.
1C2 095CF        707                             JUMP            nz, no_bd
W: value out of range: 0x1cf, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xcf.
E: attempting to use unavailable space in program memory at address: 0x1c2.
1C3 083E5        708                             CALL            lcd_reset
W: value out of range: 0x2e5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xe5.
E: attempting to use unavailable space in program memory at address: 0x1c3.
1C4 081CF        709                             JUMP            no_bd
W: value out of range: 0x1cf, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xcf.
E: attempting to use unavailable space in program memory at address: 0x1c4.
1C5 00510        710     msg7:                   LOAD            s5, #0x10
E: attempting to use unavailable space in program memory at address: 0x1c5.
1C6 08313        711                             CALL            lcd_cursor
W: value out of range: 0x313, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
E: attempting to use unavailable space in program memory at address: 0x1c6.
1C7 08382        712                             CALL            disp_msg7               ;
W: value out of range: 0x282, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x82.
E: attempting to use unavailable space in program memory at address: 0x1c7.
1C8 0C030        713                             load           s0, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
E: attempting to use unavailable space in program memory at address: 0x1c8.
1C9 00032        714                             load         s0, #0x32
E: attempting to use unavailable space in program memory at address: 0x1c9.
1CA 099CD        715                             JUMP            c, wait
W: value out of range: 0x1cd, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xcd.
E: attempting to use unavailable space in program memory at address: 0x1ca.
1CB 00F00        716                             LOAD            sf, #0x00
E: attempting to use unavailable space in program memory at address: 0x1cb.
1CC 08141        717                             JUMP            restart
E: attempting to use unavailable space in program memory at address: 0x1cc.
1CD 00FFF        718     wait:                   LOAD            sf, #0xff
E: attempting to use unavailable space in program memory at address: 0x1cd.
1CE 08191        719                             JUMP            loop
E: attempting to use unavailable space in program memory at address: 0x1ce.
1CF 00F00        720     no_bd:                  LOAD            sf, #0x00
E: attempting to use unavailable space in program memory at address: 0x1cf.
1D0 0CF30        721                             load           sf, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
E: attempting to use unavailable space in program memory at address: 0x1d0.
1D1 08191        722                             JUMP            loop
E: attempting to use unavailable space in program memory at address: 0x1d1.
                 723     ;;;;;;;;;s0---BINARY, s1---BCD_H, s0---BCD_L
1D2 00100        724     b2bcd:                  LOAD            s1, #0x00               ;
E: attempting to use unavailable space in program memory at address: 0x1d2.
1D3 040F6        725     bcd_lp:                 ADD             s0, #0xf6
E: attempting to use unavailable space in program memory at address: 0x1d3.
1D4 09DD7        726                             JUMP            nc, h_end
W: value out of range: 0x1d7, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd7.
E: attempting to use unavailable space in program memory at address: 0x1d4.
1D5 04101        727                             ADD             s1, #0x01               ;
E: attempting to use unavailable space in program memory at address: 0x1d5.
1D6 081D3        728                             JUMP            bcd_lp
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
E: attempting to use unavailable space in program memory at address: 0x1d6.
1D7 0400A        729     h_end:                  ADD             s0, #0x0a
E: attempting to use unavailable space in program memory at address: 0x1d7.
1D8 08080        730                             RETURN
E: attempting to use unavailable space in program memory at address: 0x1d8.
                 731     ;
                 732     ;     normal_mode: INPUT s0, switch_port               ;Read switches and buttons and directly drive LEDs
                 733     ;                  OUTPUT s0, LED_port
                 734     ;                  RETURN
                 735     ;
                 736     ;
                 737     ;
                 738     ;This procedure will poll the status of the rotary encoder.
                 739     ;If rotation occurs, then the LED pattern will adjust appropriately.
                 740     ;
                 741     ;    rotate_mode: load sA, LED_pattern               ;last known position
                 742     ;                 load s0, rotary_status             ;check status of rotation
                 743     ;                 load s0, 80                         ;load flag
                 744     ;                 JUMP Z, update_pattern
                 745     ;                 AND s0, 7F                          ;clear flag
                 746     ;                 load s0, rotary_status
                 747     ;                 load s0, rotary_leload                ;event occurred so update pattern
                 748     ;                 JUMP Z, move_right
                 749     ;                 RL sA
                 750     ;                 JUMP update_pattern
                 751     ;     move_right: RR sA
                 752     ; update_pattern: load sA, LED_pattern
                 753     ;                 OUTPUT sA, LED_port                 ;drive LEDs with current pattern
                 754     ;                 RETURN
                 755     ;                 ;
                 756     ;
                 757     ;
                 758     ;
                 759     ;**************************************************************************************
                 760     ;LCD text messages
                 761     ;**************************************************************************************
                 762     ;
                 763     ;
                 764     ;Display 'SPARTAN-3E STARTER KIT' on LCD at current cursor position
                 765     ;
                 766     ;
  001D9          767     disp_msg1:
1D9 083A0        768                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x1d9.
1DA 00541        769                             LOAD            s5, #_character_a
E: attempting to use unavailable space in program memory at address: 0x1da.
1DB 083D4        770                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1db.
1DC 083A0        771                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x1dc.
1DD 00543        772                             LOAD            s5, #_character_c
E: attempting to use unavailable space in program memory at address: 0x1dd.
1DE 083D4        773                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1de.
1DF 0056C        774                             LOAD            s5, #character_l
E: attempting to use unavailable space in program memory at address: 0x1df.
1E0 083D4        775                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1e0.
1E1 0056F        776                             LOAD            s5, #character_o
E: attempting to use unavailable space in program memory at address: 0x1e1.
1E2 083D4        777                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1e2.
1E3 00563        778                             LOAD            s5, #character_c
E: attempting to use unavailable space in program memory at address: 0x1e3.
1E4 083D4        779                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1e4.
1E5 0056B        780                             LOAD            s5, #character_k
E: attempting to use unavailable space in program memory at address: 0x1e5.
1E6 083D4        781                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1e6.
1E7 083A0        782                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x1e7.
1E8 00542        783                             LOAD            s5, #_character_b
E: attempting to use unavailable space in program memory at address: 0x1e8.
1E9 083D4        784                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1e9.
1EA 00561        785                             LOAD            s5, #character_a
E: attempting to use unavailable space in program memory at address: 0x1ea.
1EB 083D4        786                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1eb.
1EC 00573        787                             LOAD            s5, #character_s
E: attempting to use unavailable space in program memory at address: 0x1ec.
1ED 083D4        788                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1ed.
1EE 00565        789                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x1ee.
1EF 083D4        790                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1ef.
1F0 00564        791                             LOAD            s5, #character_d
E: attempting to use unavailable space in program memory at address: 0x1f0.
1F1 083D4        792                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1f1.
1F2 083A0        793                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x1f2.
1F3 08080        794                             RETURN
E: attempting to use unavailable space in program memory at address: 0x1f3.
                 795     ;
                 796     ;
                 797     ;
1F4 00553        798     disp_msg2:              LOAD            s5, #_character_s
E: attempting to use unavailable space in program memory at address: 0x1f4.
1F5 083D4        799                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1f5.
1F6 00533        800                             LOAD            s5, #character_3
E: attempting to use unavailable space in program memory at address: 0x1f6.
1F7 083D4        801                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1f7.
1F8 00545        802                             LOAD            s5, #_character_e
E: attempting to use unavailable space in program memory at address: 0x1f8.
1F9 083D4        803                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1f9.
1FA 083A0        804                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x1fa.
1FB 00553        805                             LOAD            s5, #_character_s
E: attempting to use unavailable space in program memory at address: 0x1fb.
1FC 083D4        806                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1fc.
1FD 00574        807                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x1fd.
1FE 083D4        808                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x1fe.
1FF 00561        809                             LOAD            s5, #character_a
E: attempting to use unavailable space in program memory at address: 0x1ff.
200 083D4        810                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x200.
201 00572        811                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x201.
202 083D4        812                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x202.
203 00574        813                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x203.
204 083D4        814                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x204.
205 00565        815                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x205.
206 083D4        816                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x206.
207 00572        817                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x207.
208 083D4        818                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x208.
209 083A0        819                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x209.
20A 0054B        820                             LOAD            s5, #_character_k
E: attempting to use unavailable space in program memory at address: 0x20a.
20B 083D4        821                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x20b.
20C 00569        822                             LOAD            s5, #character_i
E: attempting to use unavailable space in program memory at address: 0x20c.
20D 083D4        823                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x20d.
20E 00574        824                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x20e.
20F 083D4        825                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x20f.
210 00533        826                             LOAD            s5, #character_3
E: attempting to use unavailable space in program memory at address: 0x210.
211 083D4        827                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x211.
212 08080        828                             RETURN
E: attempting to use unavailable space in program memory at address: 0x212.
213 083A0        829     disp_msg3:              CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x213.
214 083A0        830                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x214.
215 083A0        831                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x215.
216 083A0        832                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x216.
217 083A0        833                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x217.
218 00558        834                             LOAD            s5, #_character_x
E: attempting to use unavailable space in program memory at address: 0x218.
219 083D4        835                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x219.
21A 00569        836                             LOAD            s5, #character_i
E: attempting to use unavailable space in program memory at address: 0x21a.
21B 083D4        837                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x21b.
21C 0056C        838                             LOAD            s5, #character_l
E: attempting to use unavailable space in program memory at address: 0x21c.
21D 083D4        839                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x21d.
21E 00569        840                             LOAD            s5, #character_i
E: attempting to use unavailable space in program memory at address: 0x21e.
21F 083D4        841                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x21f.
220 0056E        842                             LOAD            s5, #character_n
E: attempting to use unavailable space in program memory at address: 0x220.
221 083D4        843                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x221.
222 00578        844                             LOAD            s5, #character_x
E: attempting to use unavailable space in program memory at address: 0x222.
223 083D4        845                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x223.
224 083A0        846                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x224.
225 083A0        847                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x225.
226 083A0        848                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x226.
227 083A0        849                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x227.
228 083A0        850                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x228.
229 08080        851                             RETURN
E: attempting to use unavailable space in program memory at address: 0x229.
22A 00550        852     disp_msg4:              LOAD            s5, #_character_p
E: attempting to use unavailable space in program memory at address: 0x22a.
22B 083D4        853                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x22b.
22C 00569        854                             LOAD            s5, #character_i
E: attempting to use unavailable space in program memory at address: 0x22c.
22D 083D4        855                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x22d.
22E 00563        856                             LOAD            s5, #character_c
E: attempting to use unavailable space in program memory at address: 0x22e.
22F 083D4        857                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x22f.
230 0056F        858                             LOAD            s5, #character_o
E: attempting to use unavailable space in program memory at address: 0x230.
231 083D4        859                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x231.
232 00542        860                             LOAD            s5, #_character_b
E: attempting to use unavailable space in program memory at address: 0x232.
233 083D4        861                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x233.
234 0056C        862                             LOAD            s5, #character_l
E: attempting to use unavailable space in program memory at address: 0x234.
235 083D4        863                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x235.
236 00561        864                             LOAD            s5, #character_a
E: attempting to use unavailable space in program memory at address: 0x236.
237 083D4        865                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x237.
238 0057A        866                             LOAD            s5, #character_z
E: attempting to use unavailable space in program memory at address: 0x238.
239 083D4        867                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x239.
23A 00565        868                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x23a.
23B 083D4        869                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x23b.
23C 083A0        870                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x23c.
23D 00554        871                             LOAD            s5, #_character_t
E: attempting to use unavailable space in program memory at address: 0x23d.
23E 083D4        872                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x23e.
23F 00565        873                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x23f.
240 083D4        874                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x240.
241 00573        875                             LOAD            s5, #character_s
E: attempting to use unavailable space in program memory at address: 0x241.
242 083D4        876                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x242.
243 00574        877                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x243.
244 083D4        878                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x244.
245 083A0        879                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x245.
246 08080        880                             RETURN
E: attempting to use unavailable space in program memory at address: 0x246.
247 00550        881     disp_msg5:              LOAD            s5, #_character_p
E: attempting to use unavailable space in program memory at address: 0x247.
248 083D4        882                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x248.
249 00572        883                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x249.
24A 083D4        884                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x24a.
24B 00565        885                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x24b.
24C 083D4        886                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x24c.
24D 00573        887                             LOAD            s5, #character_s
E: attempting to use unavailable space in program memory at address: 0x24d.
24E 083D4        888                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x24e.
24F 00573        889                             LOAD            s5, #character_s
E: attempting to use unavailable space in program memory at address: 0x24f.
250 083D4        890                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x250.
251 083A0        891                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x251.
252 00526        892                             LOAD            s5, #0x26
E: attempting to use unavailable space in program memory at address: 0x252.
253 083D4        893                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x253.
254 083A0        894                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x254.
255 00554        895                             LOAD            s5, #_character_t
E: attempting to use unavailable space in program memory at address: 0x255.
256 083D4        896                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x256.
257 00575        897                             LOAD            s5, #character_u
E: attempting to use unavailable space in program memory at address: 0x257.
258 083D4        898                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x258.
259 00572        899                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x259.
25A 083D4        900                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x25a.
25B 0056E        901                             LOAD            s5, #character_n
E: attempting to use unavailable space in program memory at address: 0x25b.
25C 083D4        902                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x25c.
25D 083A0        903                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x25d.
25E 00574        904                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x25e.
25F 083D4        905                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x25f.
260 00568        906                             LOAD            s5, #character_h
E: attempting to use unavailable space in program memory at address: 0x260.
261 083D4        907                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x261.
262 00565        908                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x262.
263 083D4        909                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x263.
264 08080        910                             RETURN
E: attempting to use unavailable space in program memory at address: 0x264.
265 083A0        911     disp_msg6:              CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x265.
266 00545        912                             LOAD            s5, #_character_e
E: attempting to use unavailable space in program memory at address: 0x266.
267 083D4        913                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x267.
268 0056E        914                             LOAD            s5, #character_n
E: attempting to use unavailable space in program memory at address: 0x268.
269 083D4        915                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x269.
26A 00563        916                             LOAD            s5, #character_c
E: attempting to use unavailable space in program memory at address: 0x26a.
26B 083D4        917                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x26b.
26C 0056F        918                             LOAD            s5, #character_o
E: attempting to use unavailable space in program memory at address: 0x26c.
26D 083D4        919                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x26d.
26E 00564        920                             LOAD            s5, #character_d
E: attempting to use unavailable space in program memory at address: 0x26e.
26F 083D4        921                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x26f.
270 00565        922                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x270.
271 083D4        923                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x271.
272 00572        924                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x272.
273 083D4        925                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x273.
274 083A0        926                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x274.
275 00574        927                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x275.
276 083D4        928                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x276.
277 0056F        929                             LOAD            s5, #character_o
E: attempting to use unavailable space in program memory at address: 0x277.
278 083D4        930                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x278.
279 083A0        931                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x279.
27A 00553        932                             LOAD            s5, #_character_s
E: attempting to use unavailable space in program memory at address: 0x27a.
27B 083D4        933                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x27b.
27C 00565        934                             LOAD            s5, #character_e
E: attempting to use unavailable space in program memory at address: 0x27c.
27D 083D4        935                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x27d.
27E 00574        936                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x27e.
27F 083D4        937                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x27f.
280 083A0        938                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x280.
281 08080        939                             RETURN
E: attempting to use unavailable space in program memory at address: 0x281.
282 00548        940     disp_msg7:              LOAD            s5, #_character_h
E: attempting to use unavailable space in program memory at address: 0x282.
283 083D4        941                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x283.
284 00561        942                             LOAD            s5, #character_a
E: attempting to use unavailable space in program memory at address: 0x284.
285 083D4        943                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x285.
286 00570        944                             LOAD            s5, #character_p
E: attempting to use unavailable space in program memory at address: 0x286.
287 083D4        945                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x287.
288 00570        946                             LOAD            s5, #character_p
E: attempting to use unavailable space in program memory at address: 0x288.
289 083D4        947                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x289.
28A 00579        948                             LOAD            s5, #character_y
E: attempting to use unavailable space in program memory at address: 0x28a.
28B 083D4        949                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x28b.
28C 083A0        950                             CALL            disp_space
W: value out of range: 0x2a0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa0.
E: attempting to use unavailable space in program memory at address: 0x28c.
28D 00542        951                             LOAD            s5, #_character_b
E: attempting to use unavailable space in program memory at address: 0x28d.
28E 083D4        952                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x28e.
28F 00569        953                             LOAD            s5, #character_i
E: attempting to use unavailable space in program memory at address: 0x28f.
290 083D4        954                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x290.
291 00572        955                             LOAD            s5, #character_r
E: attempting to use unavailable space in program memory at address: 0x291.
292 083D4        956                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x292.
293 00574        957                             LOAD            s5, #character_t
E: attempting to use unavailable space in program memory at address: 0x293.
294 083D4        958                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x294.
295 00568        959                             LOAD            s5, #character_h
E: attempting to use unavailable space in program memory at address: 0x295.
296 083D4        960                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x296.
297 00564        961                             LOAD            s5, #character_d
E: attempting to use unavailable space in program memory at address: 0x297.
298 083D4        962                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x298.
299 00561        963                             LOAD            s5, #character_a
E: attempting to use unavailable space in program memory at address: 0x299.
29A 083D4        964                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x29a.
29B 00579        965                             LOAD            s5, #character_y
E: attempting to use unavailable space in program memory at address: 0x29b.
29C 083D4        966                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x29c.
29D 00521        967                             LOAD            s5, #0x21
E: attempting to use unavailable space in program memory at address: 0x29d.
29E 083D4        968                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x29e.
29F 08080        969                             RETURN
E: attempting to use unavailable space in program memory at address: 0x29f.
                 970     ;
                 971     ;Display a space on LCD at current cursor position
                 972     ;
                 973     ;
2A0 00520        974     disp_space:             LOAD            s5, #character_space
E: attempting to use unavailable space in program memory at address: 0x2a0.
2A1 083D4        975                             CALL            lcd_write_EQU
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
E: attempting to use unavailable space in program memory at address: 0x2a1.
2A2 08080        976                             RETURN
E: attempting to use unavailable space in program memory at address: 0x2a2.
                 977     ;
                 978     ;
                 979     ;
                 980     ;
                 981     ;**************************************************************************************
                 982     ;Soloadware delay routines
                 983     ;**************************************************************************************
                 984     ;
                 985     ;
                 986     ;
                 987     ;Delay of 1us.
                 988     ;
                 989     ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 990     ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 991     ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 992     ;
                 993     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 994     ;
                 995     ;Registers used s0
                 996     ;
2A3 0000B        997     delay_1us:              LOAD            s0, #delay_1us_constant
E: attempting to use unavailable space in program memory at address: 0x2a3.
2A4 06001        998     wait_1us:               SUB             s0, #0x01
E: attempting to use unavailable space in program memory at address: 0x2a4.
2A5 095A4        999                             JUMP            nz, wait_1us
W: value out of range: 0x2a4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa4.
E: attempting to use unavailable space in program memory at address: 0x2a5.
2A6 08080       1000                             RETURN
E: attempting to use unavailable space in program memory at address: 0x2a6.
                1001     ;
                1002     ;Delay of 40us.
                1003     ;
                1004     ;Registers used s0, s1
                1005     ;
2A7 00128       1006     delay_40us:             LOAD            s1, #0x28               ;40 x 1us = 40us
E: attempting to use unavailable space in program memory at address: 0x2a7.
2A8 083A3       1007     wait_40us:              CALL            delay_1us
W: value out of range: 0x2a3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa3.
E: attempting to use unavailable space in program memory at address: 0x2a8.
2A9 06101       1008                             SUB             s1, #0x01
E: attempting to use unavailable space in program memory at address: 0x2a9.
2AA 095A8       1009                             JUMP            nz, wait_40us
W: value out of range: 0x2a8, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa8.
E: attempting to use unavailable space in program memory at address: 0x2aa.
2AB 08080       1010                             RETURN
E: attempting to use unavailable space in program memory at address: 0x2ab.
                1011     ;
                1012     ;
                1013     ;Delay of 1ms.
                1014     ;
                1015     ;Registers used s0, s1, s2
                1016     ;
2AC 00219       1017     delay_1ms:              LOAD            s2, #0x19               ;25 x 40us = 1ms
E: attempting to use unavailable space in program memory at address: 0x2ac.
2AD 083A7       1018     wait_1ms:               CALL            delay_40us
W: value out of range: 0x2a7, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa7.
E: attempting to use unavailable space in program memory at address: 0x2ad.
2AE 06201       1019                             SUB             s2, #0x01
E: attempting to use unavailable space in program memory at address: 0x2ae.
2AF 095AD       1020                             JUMP            nz, wait_1ms
W: value out of range: 0x2ad, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xad.
E: attempting to use unavailable space in program memory at address: 0x2af.
2B0 08080       1021                             RETURN
E: attempting to use unavailable space in program memory at address: 0x2b0.
                1022     ;
                1023     ;Delay of 20ms.
                1024     ;
                1025     ;Delay of 20ms used during initialisation.
                1026     ;
                1027     ;Registers used s0, s1, s2, s3
                1028     ;
2B1 00314       1029     delay_20ms:             LOAD            s3, #0x14               ;20 x 1ms = 20ms
E: attempting to use unavailable space in program memory at address: 0x2b1.
2B2 083AC       1030     wait_20ms:              CALL            delay_1ms
W: value out of range: 0x2ac, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xac.
E: attempting to use unavailable space in program memory at address: 0x2b2.
2B3 06301       1031                             SUB             s3, #0x01
E: attempting to use unavailable space in program memory at address: 0x2b3.
2B4 095B2       1032                             JUMP            nz, wait_20ms
W: value out of range: 0x2b2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb2.
E: attempting to use unavailable space in program memory at address: 0x2b4.
2B5 08080       1033                             RETURN
E: attempting to use unavailable space in program memory at address: 0x2b5.
                1034     ;
                1035     ;Delay of approximately 1 second.
                1036     ;
                1037     ;Registers used s0, s1, s2, s3, s4
                1038     ;
2B6 00432       1039     delay_1s:               LOAD            s4, #0x32               ;50 x 20ms = 1000ms
E: attempting to use unavailable space in program memory at address: 0x2b6.
2B7 083B1       1040     wait_1s:                CALL            delay_20ms
W: value out of range: 0x2b1, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb1.
E: attempting to use unavailable space in program memory at address: 0x2b7.
2B8 06401       1041                             SUB             s4, #0x01
E: attempting to use unavailable space in program memory at address: 0x2b8.
2B9 095B7       1042                             JUMP            nz, wait_1s
W: value out of range: 0x2b7, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb7.
E: attempting to use unavailable space in program memory at address: 0x2b9.
2BA 08080       1043                             RETURN
E: attempting to use unavailable space in program memory at address: 0x2ba.
                1044     ;
                1045     ;
                1046     ;
                1047     ;**************************************************************************************
                1048     ;LCD Character Module Routines
                1049     ;**************************************************************************************
                1050     ;
                1051     ;LCD module is a 16 character by 2 line display but all displays are very similar
                1052     ;The 4-wire EQU interface will be used (DB4 to DB7).
                1053     ;
                1054     ;The LCD modules are relatively slow and soloadware delay loops are used to slow down
                1055     ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                1056     ;a different section (see above in this case).
                1057     ;
                1058     ;
                1059     ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                1060     ;
                1061     ;Register s4 should define the current state of the LCD output port.
                1062     ;
                1063     ;Registers used s0, s4
                1064     ;
2BB 03401       1065     lcd_pulse_e:            XOR             s4, #lcd_e              ;E=1
E: attempting to use unavailable space in program memory at address: 0x2bb.
2BC 0E440       1066                             OUTPUT          s4, lcd_output_port
E: attempting to use unavailable space in program memory at address: 0x2bc.
2BD 083A3       1067                             CALL            delay_1us
W: maximum number of messages reached, suppressing compiler message generation.
2BE 03401       1068                             XOR             s4, #lcd_e              ;E=0
2BF 0E440       1069                             OUTPUT          s4, lcd_output_port
2C0 08080       1070                             RETURN
                1071     ;
                1072     ;Write 4-bit instruction to LCD display.
                1073     ;
                1074     ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                1075     ;Note that this routine does not release the master enable but as it is only
                1076     ;used during initialisation and as part of the 8-bit instruction write it
                1077     ;should be acceptable.
                1078     ;
                1079     ;Registers used s4
                1080     ;
2C1 014F8       1081     lcd_write_inst4:        AND             s4, #0xf8               ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
2C2 0E440       1082                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
2C3 083BB       1083                             CALL            lcd_pulse_e
2C4 08080       1084                             RETURN
                1085     ;
                1086     ;
                1087     ;Write 8-bit instruction to LCD display.
                1088     ;
                1089     ;The 8-bit instruction should be provided in register s5.
                1090     ;Instructions are written using the following sequence
                1091     ; Upper nibble
                1092     ; wait >1us
                1093     ; Lower nibble
                1094     ; wait >40us
                1095     ;
                1096     ;Registers used s0, s1, s4, s5
                1097     ;
2C5 0C450       1098     lcd_write_inst8:        LOAD            s4, s5
2C6 014F0       1099                             AND             s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2C7 02408       1100                             OR              s4, #lcd_drive          ;Enable=1
2C8 083C1       1101                             CALL            lcd_write_inst4         ;write upper nibble
2C9 083A3       1102                             CALL            delay_1us               ;wait >1us
2CA 0C450       1103                             LOAD            s4, s5                  ;select lower nibble with
2CB 0D407       1104                             SL1             s4                      ;Enable=1
2CC 0D406       1105                             SL0             s4                      ;RS=0 Instruction
2CD 0D406       1106                             SL0             s4                      ;RW=0 Write
2CE 0D406       1107                             SL0             s4                      ;E=0
2CF 083C1       1108                             CALL            lcd_write_inst4         ;write lower nibble
2D0 083A7       1109                             CALL            delay_40us              ;wait >40us
2D1 004F0       1110                             LOAD            s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2D2 0E440       1111                             OUTPUT          s4, lcd_output_port     ;Release master enable
2D3 08080       1112                             RETURN
                1113     ;
                1114     ;
                1115     ;
                1116     ;Write 8-bit EQU to LCD display.
                1117     ;
                1118     ;The 8-bit EQU should be provided in register s5.
                1119     ;EQU bytes are written using the following sequence
                1120     ; Upper nibble
                1121     ; wait >1us
                1122     ; Lower nibble
                1123     ; wait >40us
                1124     ;
                1125     ;Registers used s0, s1, s4, s5
                1126     ;
2D4 0C450       1127     lcd_write_EQU:         LOAD            s4, s5
2D5 014F0       1128                             AND             s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2D6 0240C       1129                             OR              s4, #0x0c               ;Enable=1 RS=1 EQU, RW=0 Write, E=0
2D7 0E440       1130                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
2D8 083BB       1131                             CALL            lcd_pulse_e             ;write upper nibble
2D9 083A3       1132                             CALL            delay_1us               ;wait >1us
2DA 0C450       1133                             LOAD            s4, s5                  ;select lower nibble with
2DB 0D407       1134                             SL1             s4                      ;Enable=1
2DC 0D407       1135                             SL1             s4                      ;RS=1 EQU
2DD 0D406       1136                             SL0             s4                      ;RW=0 Write
2DE 0D406       1137                             SL0             s4                      ;E=0
2DF 0E440       1138                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
2E0 083BB       1139                             CALL            lcd_pulse_e             ;write lower nibble
2E1 083A7       1140                             CALL            delay_40us              ;wait >40us
2E2 004F0       1141                             LOAD            s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2E3 0E440       1142                             OUTPUT          s4, lcd_output_port     ;Release master enable
2E4 08080       1143                             RETURN
                1144     ;
                1145     ;
                1146     ;
                1147     ;
                1148     ;Read 8-bit EQU from LCD display.
                1149     ;
                1150     ;The 8-bit EQU will be read from the current LCD memory address
                1151     ;and will be returned in register s5.
                1152     ;It is advisable to set the LCD address (cursor position) before
                1153     ;using the EQU read for the first time otherwise the display may
                1154     ;generate invalid EQU on the first read.
                1155     ;
                1156     ;EQU bytes are read using the following sequence
                1157     ; Upper nibble
                1158     ; wait >1us
                1159     ; Lower nibble
                1160     ; wait >40us
                1161     ;
                1162     ;Registers used s0, s1, s4, s5
                1163     ;
                1164     ;LCD_read_EQU8: LOAD s4, 0E                         ;Enable=1 RS=1 EQU, RW=1 Read, E=0
                1165     ;                OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
                1166     ;                XOR s4, LCD_E                       ;E=1
                1167     ;                OUTPUT s4, LCD_output_port
                1168     ;                CALL delay_1us                      ;wait >260ns to access EQU
                1169     ;                INPUT s5, LCD_input_port            ;read upper nibble
                1170     ;                XOR s4, LCD_E                       ;E=0
                1171     ;                OUTPUT s4, LCD_output_port
                1172     ;                CALL delay_1us                      ;wait >1us
                1173     ;                XOR s4, LCD_E                       ;E=1
                1174     ;                OUTPUT s4, LCD_output_port
                1175     ;                CALL delay_1us                      ;wait >260ns to access EQU
                1176     ;                INPUT s0, LCD_input_port            ;read lower nibble
                1177     ;                XOR s4, LCD_E                       ;E=0
                1178     ;                OUTPUT s4, LCD_output_port
                1179     ;                AND s5, F0                          ;merge upper and lower nibbles
                1180     ;                SR0 s0
                1181     ;                SR0 s0
                1182     ;                SR0 s0
                1183     ;                SR0 s0
                1184     ;                OR s5, s0
                1185     ;                LOAD s4, 04                         ;Enable=0 RS=1 EQU, RW=0 Write, E=0
                1186     ;                OUTPUT s4, LCD_output_port          ;Stop reading 5V device and release master enable
                1187     ;                CALL delay_40us                     ;wait >40us
                1188     ;                RETURN
                1189     ;
                1190     ;
                1191     ;Reset and initialise display to communicate using 4-bit EQU mode
                1192     ;Includes routine to clear the display.
                1193     ;
                1194     ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                1195     ;following by the 8-bit instructions to set up the display.
                1196     ;
                1197     ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                1198     ;  06 = '000001' Entry mode, '1' increment, '0' no display shiload
                1199     ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                1200     ;  01 = '00000001' Display clear
                1201     ;
                1202     ;Registers used s0, s1, s2, s3, s4
                1203     ;
2E5 083B1       1204     lcd_reset:              CALL            delay_20ms              ;wait more that 15ms for display to be ready
2E6 00430       1205                             LOAD            s4, #0x30
2E7 083C1       1206                             CALL            lcd_write_inst4         ;send '3'
2E8 083B1       1207                             CALL            delay_20ms              ;wait >4.1ms
2E9 083C1       1208                             CALL            lcd_write_inst4         ;send '3'
2EA 083AC       1209                             CALL            delay_1ms               ;wait >100us
2EB 083C1       1210                             CALL            lcd_write_inst4         ;send '3'
2EC 083A7       1211                             CALL            delay_40us              ;wait >40us
2ED 00420       1212                             LOAD            s4, #0x20
2EE 083C1       1213                             CALL            lcd_write_inst4         ;send '2'
2EF 083A7       1214                             CALL            delay_40us              ;wait >40us
2F0 00528       1215                             LOAD            s5, #0x28               ;Function set
2F1 083C5       1216                             CALL            lcd_write_inst8
2F2 00506       1217                             LOAD            s5, #0x06               ;Entry mode
2F3 083C5       1218                             CALL            lcd_write_inst8
2F4 0050C       1219                             LOAD            s5, #0x0c               ;Display control
2F5 083C5       1220                             CALL            lcd_write_inst8
2F6 00501       1221     lcd_clear:              LOAD            s5, #0x01               ;Display clear
2F7 083C5       1222                             CALL            lcd_write_inst8
2F8 083AC       1223                             CALL            delay_1ms               ;wait >1.64ms for display to clear
2F9 083AC       1224                             CALL            delay_1ms
2FA 00513       1225                             LOAD            s5, #0x13
2FB 08313       1226                             CALL            lcd_cursor
2FC 0053A       1227                             LOAD            s5, #0x3a               ;;;;;;;;;;;;;;;;;;;;;;;    :
2FD 083D4       1228                             CALL            lcd_write_EQU
2FE 00516       1229                             LOAD            s5, #0x16
2FF 08313       1230                             CALL            lcd_cursor
300 0052D       1231                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
301 083D4       1232                             CALL            lcd_write_EQU
302 00520       1233                             LOAD            s5, #0x20
303 08313       1234                             CALL            lcd_cursor
304 0052D       1235                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
305 083D4       1236                             CALL            lcd_write_EQU
306 0052D       1237                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
307 083D4       1238                             CALL            lcd_write_EQU
308 0052D       1239                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
309 083D4       1240                             CALL            lcd_write_EQU
30A 00528       1241                             LOAD            s5, #0x28
30B 08313       1242                             CALL            lcd_cursor
30C 0052F       1243                             LOAD            s5, #0x2f               ;;;;;;;;;;;;;;;;;;;;;;     /
30D 083D4       1244                             CALL            lcd_write_EQU
30E 0052B       1245                             LOAD            s5, #0x2b
30F 08313       1246                             CALL            lcd_cursor
310 0052F       1247                             LOAD            s5, #0x2f               ;;;;;;;;;;;;;;;;;;;;;;     -
311 083D4       1248                             CALL            lcd_write_EQU
312 08080       1249                             RETURN
                1250     ;
                1251     ;Position the cursor ready for characters to be written.
                1252     ;The display is formed of 2 lines of 16 characters and each
                1253     ;position has a corresponding address as indicated below.
                1254     ;
                1255     ;                   Character position
                1256     ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                1257     ;
                1258     ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                1259     ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                1260     ;
                1261     ;This routine will set the cursor position using the value provided
                1262     ;in register s5. The upper nibble will define the line and the lower
                1263     ;nibble the character position on the line.
                1264     ; Example s5 = 2B will position the cursor on line 2 position 11
                1265     ;
                1266     ;Registers used s0, s1, s2, s3, s4
                1267     ;
313 00510       1268     lcd_cursor:             load            s5, #0x10               ;load for line 1
314 09119       1269                             JUMP            z, set_line2
315 0150F       1270                             AND             s5, #0x0f               ;make address in range 80 to 8F for line 1
316 02580       1271                             OR              s5, #0x80
317 083C5       1272                             CALL            lcd_write_inst8         ;instruction write to set cursor
318 08080       1273                             RETURN
319 0150F       1274     set_line2:              AND             s5, #0x0f               ;make address in range C0 to CF for line 2
31A 025C0       1275                             OR              s5, #0xc0
31B 083C5       1276                             CALL            lcd_write_inst8         ;instruction write to set cursor
31C 08080       1277                             RETURN
                1278     ;
                1279     ;This routine will shiload the complete display one position to the leload.
                1280     ;The cursor position and LCD memory contents will not change.
                1281     ;
                1282     ;
                1283     ;Registers used s0, s1, s2, s3, s4, s5
                1284     ;
                1285     ;LCD_shiload_leload: LOAD s5, 18                         ;shiload display leload
                1286     ;                CALL LCD_write_inst8
                1287     ;                RETURN
                1288     ;
                1289     ;**************************************************************************************
                1290     ;Interrupt Service Routine (ISR)
                1291     ;**************************************************************************************
31D 0C010       1292     isr:                    load           s0, isr_s0              ;preserve s0
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
31E 0C120       1293                             load           s1, isr_s1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
31F 0C250       1294                             load           s2, isr_s2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
320 0A101       1295                             INPUT           s1, rotary_port
321 00000       1296                             LOAD            s0, #0x00
322 00102       1297                             load            s1, #rotary_press
323 09131       1298                             JUMP            z, no_press
324 0C070       1299                             load           s0, pressed
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
325 00000       1300                             load         s0, #0x00
326 09531       1301                             JUMP            nz, no_press
327 0C220       1302                             load           s2, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
328 04201       1303                             ADD             s2, #0x01
329 0C220       1304                             load           s2, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
32A 0C230       1305                             load           s2, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
32B 04201       1306                             ADD             s2, #0x01
32C 00207       1307                             load         s2, #0x07
32D 0952F       1308                             JUMP            nz, mode_save
32E 01200       1309                             AND             s2, #0x00
32F 0C230       1310     mode_save:              load           s2, mode                ;;;;;0-normal;1-hour;2-min;3-sec;4-day,5-mon,6-year
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
330 000FF       1311                             LOAD            s0, #0xff
331 0C070       1312     no_press:               load           s0, pressed
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
332 00140       1313                             load            s1, #0x40               ;;;rotary INT ?
333 091B3       1314                             JUMP            z, t2_5m_int            ;;NOT rotary INT,JUMP away
334 00040       1315     clr_int2:               LOAD            s0, #0x40               ;;;;;CLR_INT1
335 0E020       1316                             OUTPUT          s0, 0x20
336 0C020       1317                             load           s0, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
337 00101       1318                             load            s1, #rotary_leload
338 09174       1319                             JUMP            z, its_right
339 040FF       1320                             ADD             s0, #0xff
33A 0C020       1321                             load           s0, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
                1322     ;;;turn leload,--
33B 0C030       1323                             load           s0, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
33C 00000       1324                             load         s0, #0x00
33D 091B1       1325                             JUMP            z, clr_int1             ;
33E 00001       1326                             load         s0, #0x01
33F 09547       1327                             JUMP            nz, mode2n
340 0C110       1328                             load           s1, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
341 041FF       1329                             ADD             s1, #0xff
342 001FF       1330                             load         s1, #0xff               ;;;24
343 09545       1331                             JUMP            nz, save_hhn
344 00117       1332                             LOAD            s1, #0x17
345 0C110       1333     save_hhn:               load           s1, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
346 081EE       1334                             JUMP            real_time_end
347 00002       1335     mode2n:                 load         s0, #0x02
348 09550       1336                             JUMP            nz, mode3n
349 0C120       1337                             load           s1, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
34A 041FF       1338                             ADD             s1, #0xff
34B 001FF       1339                             load         s1, #0xff               ;;;3C;;60
34C 0954E       1340                             JUMP            nz, save_mmn
34D 0013B       1341                             LOAD            s1, #0x3b
34E 0C120       1342     save_mmn:               load           s1, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
34F 081EE       1343                             JUMP            real_time_end
350 00003       1344     mode3n:                 load         s0, #0x03
351 09559       1345                             JUMP            nz, mode4n
352 0C130       1346                             load           s1, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
353 041FF       1347                             ADD             s1, #0xff
354 001FF       1348                             load         s1, #0xff               ;;;60
355 09557       1349                             JUMP            nz, save_ssn
356 0013B       1350                             LOAD            s1, #0x3b
357 0C130       1351     save_ssn:               load           s1, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
358 081EE       1352                             JUMP            real_time_end
359 00004       1353     mode4n:                 load         s0, #0x04
35A 09562       1354                             JUMP            nz, mode5n
35B 0C150       1355                             load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
35C 041FF       1356                             ADD             s1, #0xff
35D 00100       1357                             load         s1, #0x00               ;;;12
35E 09560       1358                             JUMP            nz, save_monn
35F 0010C       1359                             LOAD            s1, #0x0c
360 0C150       1360     save_monn:              load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
361 081EE       1361                             JUMP            real_time_end
362 00005       1362     mode5n:                 load         s0, #0x05
363 0956B       1363                             JUMP            nz, mode6n
364 0C160       1364                             load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
365 041FF       1365                             ADD             s1, #0xff
366 00100       1366                             load         s1, #0x00               ;;;12
367 09569       1367                             JUMP            nz, save_dayn
368 0C170       1368                             load           s1, dmax
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
369 0C160       1369     save_dayn:              load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
36A 081EE       1370                             JUMP            real_time_end
36B 00006       1371     mode6n:                 load         s0, #0x06
36C 09573       1372                             JUMP            nz, mode7n
36D 0C140       1373                             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
36E 041FF       1374                             ADD             s1, #0xff
36F 001FF       1375                             load         s1, #0xff               ;;;12
370 09572       1376                             JUMP            nz, save_yearn
371 00163       1377                             LOAD            s1, #0x63
372 0C140       1378     save_yearn:             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
  00373         1379     mode7n:
373 081EE       1380                             JUMP            real_time_end
374 04001       1381     its_right:              ADD             s0, #0x01
375 0C020       1382                             load           s0, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
                1383     ;;;turn right++
376 0C030       1384                             load           s0, mode
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
377 00000       1385                             load         s0, #0x00
378 091B1       1386                             JUMP            z, clr_int1             ;
379 00001       1387                             load         s0, #0x01
37A 09582       1388                             JUMP            nz, mode2p
37B 0C110       1389                             load           s1, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
37C 04101       1390                             ADD             s1, #0x01
37D 00118       1391                             load         s1, #0x18               ;;;24
37E 09580       1392                             JUMP            nz, save_hhp
37F 00100       1393                             LOAD            s1, #0x00
380 0C110       1394     save_hhp:               load           s1, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
381 081EE       1395                             JUMP            real_time_end
382 00002       1396     mode2p:                 load         s0, #0x02
383 0958B       1397                             JUMP            nz, mode3p
384 0C120       1398                             load           s1, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
385 04101       1399                             ADD             s1, #0x01
386 0013C       1400                             load         s1, #0x3c               ;;;3C;;60
387 09589       1401                             JUMP            nz, save_mmp
388 00100       1402                             LOAD            s1, #0x00
389 0C120       1403     save_mmp:               load           s1, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
38A 081EE       1404                             JUMP            real_time_end
38B 00003       1405     mode3p:                 load         s0, #0x03
38C 09594       1406                             JUMP            nz, mode4p
38D 0C130       1407                             load           s1, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
38E 04101       1408                             ADD             s1, #0x01
38F 0013C       1409                             load         s1, #0x3c               ;;;60
390 09592       1410                             JUMP            nz, save_ssp
391 00100       1411                             LOAD            s1, #0x00
392 0C130       1412     save_ssp:               load           s1, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
393 081EE       1413                             JUMP            real_time_end
394 00004       1414     mode4p:                 load         s0, #0x04
395 0959D       1415                             JUMP            nz, mode5p
396 0C150       1416                             load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
397 04101       1417                             ADD             s1, #0x01
398 0010D       1418                             load         s1, #0x0d               ;;;12
399 0959B       1419                             JUMP            nz, save_monp
39A 00101       1420                             LOAD            s1, #0x01
39B 0C150       1421     save_monp:              load           s1, monb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
39C 081EE       1422                             JUMP            real_time_end
39D 00005       1423     mode5p:                 load         s0, #0x05
39E 095A8       1424                             JUMP            nz, mode6p
39F 0C160       1425                             load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3A0 04101       1426                             ADD             s1, #0x01
3A1 0C270       1427                             load           s2, dmax
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3A2 04201       1428                             ADD             s2, #0x01
3A3 0C120       1429                             load         s1, s2
3A4 095A6       1430                             JUMP            nz, save_dayp
3A5 00101       1431                             LOAD            s1, #0x01
3A6 0C160       1432     save_dayp:              load           s1, dayb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3A7 081EE       1433                             JUMP            real_time_end
3A8 00006       1434     mode6p:                 load         s0, #0x06
3A9 095B0       1435                             JUMP            nz, mode7p
3AA 0C140       1436                             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3AB 04101       1437                             ADD             s1, #0x01
3AC 00164       1438                             load         s1, #0x64               ;;;12
3AD 095AF       1439                             JUMP            nz, save_yearp
3AE 00100       1440                             LOAD            s1, #0x00
3AF 0C140       1441     save_yearp:             load           s1, yearb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3B0 081EE       1442     mode7p:                 JUMP            real_time_end
3B1 00040       1443     clr_int1:               LOAD            s0, #0x40               ;;;;;CLR_INT1
3B2 0E020       1444                             OUTPUT          s0, 0x20
                1445     ;;;TIMER interrupt process;;;;mode:::0-normal;1-hour;2-min;3-sec;4-day,5-mon,6-year
3B3 00180       1446     t2_5m_int:              load            s1, #0x80
3B4 091F9       1447                             JUMP            z, end_isr
3B5 00080       1448                             LOAD            s0, #0x80               ;;;;;;;;;;clr_int2
3B6 0E020       1449                             OUTPUT          s0, 0x20
3B7 0C040       1450                             load           s0, ms1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3B8 04001       1451                             ADD             s0, #0x01
3B9 0C040       1452                             load           s0, ms1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3BA 00064       1453                             load         s0, #0x64
3BB 095EE       1454                             JUMP            nz, real_time_end
3BC 01000       1455                             AND             s0, #0x00               ;;;;;;;;;;;;;CLR ms1
3BD 0C040       1456                             load           s0, ms1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3BE 0C020       1457                             load           s0, led_pattern         ;
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3BF 04010       1458                             ADD             s0, #0x10
3C0 0C020       1459                             load           s0, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3C1 0C110       1460                             load           s1, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3C2 04101       1461                             ADD             s1, #0x01
3C3 0C110       1462                             load           s1, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3C4 00101       1463                             load         s1, #0x01               ;
3C5 095C8       1464                             JUMP            nz, load_2
3C6 0002D       1465                             LOAD            s0, #0x2d               ;;;------
3C7 081CF       1466                             JUMP            load_4
3C8 00102       1467     load_2:                  load         s1, #0x02               ;
3C9 095CC       1468                             JUMP            nz, load_3
3CA 00060       1469                             LOAD            s0, #0x60               ;;;\\\\\\
3CB 081CF       1470                             JUMP            load_4
3CC 00103       1471     load_3:                  load         s1, #0x03               ;
3CD 095CF       1472                             JUMP            nz, load_4
3CE 0007C       1473                             LOAD            s0, #0x7c               ;;;||||
3CF 0C080       1474     load_4:                  load           s0, disp_flag
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3D0 00104       1475                             load         s1, #0x04
3D1 095EE       1476                             JUMP            nz, real_time_end
3D2 0002F       1477                             LOAD            s0, #0x2f               ;;;////
                1478     ;;load s0,disp_flag
                1479     ;;ADD s0,01
3D3 0C080       1480                             load           s0, disp_flag
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3D4 01100       1481                             AND             s1, #0x00               ;;;;;;;;;;;;;CLR ms500
3D5 0C110       1482                             load           s1, ms500
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3D6 0C030       1483                             load           s0, secb                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CLOCK PROCESS START
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3D7 04001       1484                             ADD             s0, #0x01
3D8 0C030       1485                             load           s0, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3D9 0003C       1486                             load         s0, #0x3c               ;;;60
3DA 095EE       1487                             JUMP            nz, real_time_end
3DB 01000       1488                             AND             s0, #0x00
3DC 0C030       1489                             load           s0, secb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3DD 0C020       1490                             load           s0, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3DE 04001       1491                             ADD             s0, #0x01
3DF 0C020       1492                             load           s0, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3E0 0003C       1493                             load         s0, #0x3c
3E1 095EE       1494                             JUMP            nz, real_time_end
3E2 01000       1495                             AND             s0, #0x00
3E3 0C020       1496                             load           s0, minb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
                1497     ;;;24 Hours
3E4 0C010       1498                             load           s0, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3E5 04001       1499                             ADD             s0, #0x01
3E6 0C010       1500                             load           s0, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3E7 00018       1501                             load         s0, #0x18
3E8 095EE       1502                             JUMP            nz, real_time_end
3E9 01000       1503                             AND             s0, #0x00
3EA 0C010       1504                             load           s0, hourb
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3EB 0C0F0       1505     day_p:                  load           s0, day_up
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3EC 00001       1506                             LOAD            s0, #0x01
3ED 0C0F0       1507                             load           s0, day_up
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3EE 0C000       1508     real_time_end:          load           s0, ms2                 ;;;;;;;;2.5ms counter
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3EF 04001       1509                             ADD             s0, #0x01
3F0 00028       1510                             load         s0, #0x28               ;;;;;;counter to 100ms
3F1 095F6       1511                             JUMP            nz, load_ms2
3F2 0C130       1512                             load           s1, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3F3 04101       1513                             ADD             s1, #0x01
3F4 0C130       1514     sav_ms100:              load           s1, ms100
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3F5 00000       1515                             LOAD            s0, #0x00
3F6 0C000       1516     load_ms2:              load           s0, ms2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3F7 0C020       1517                             load           s0, led_pattern
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3F8 0E080       1518                             OUTPUT          s0, led_port
3F9 0C010       1519     end_isr:                load           s0, isr_s0              ;reload s0
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3FA 0C120       1520                             load           s1, isr_s1              ;reload s1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3FB 0C250       1521                             load           s2, isr_s2              ;reload s2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
3FC 080F0       1522                             RETURNI         enable
                1523     ;**************************************************************************************
                1524     ;Interrupt Vector
                1525     ;**************************************************************************************
                1526     ;
  003FF         1527                             ORG             0x3ff
3FF 0811D       1528                             JUMP            isr
                1529     ;First Screen:
                1530     ;1234567890123456
                1531     ; Clock Based
                1532     ;S3E Starter kit
                1533     ;Second Screen:
                1534     ;1234567890123456
                1535     ;   X Xilinx
                1536     ;PicoBlaze load
                1537     ;Third Screen:
                1538     ;1234567890123456
                1539     ; Press & Turn
                1540     ;Encoder to Adjust
                1541     ;1234567890123456
                1542     ;09:00:00    Mon
                1543     ;<->   05/01/2006
                1544     ;Based on Ken C's
                1545     ;S3ESK_STARTUP
                1546     ;Modified By
                1547     ; George W.
                1548     ;Dear Mr. Chapman,
                1549     ;I have just finished a design with PicoBlaze Based the hardware of S3E Starter kit platform.
                1550     ;It's amazing that the BicoBlaze works perfect,not bad than any other professional MCU I have ever used.I like it very much.
                1551     ;I have used up all the programme space that MicroBlaze supports and I had to remove some functions from the designs for the programme space reason
                1552     ;My question is ,wether can I make the programme counter wider in PicoBlaze to support more programme space.
                1553     ;Another problem,I cannot update the PROM on the starter kit PCB,I'm not sure whether it is caused by the MCS file I generated or other problem.The screen shot and bitstream are attached.Please help me to have a check. Thank you.
                1554
