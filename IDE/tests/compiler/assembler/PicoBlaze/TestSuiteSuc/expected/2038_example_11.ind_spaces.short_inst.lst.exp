                   1     ; KCPSM3 Program - Automatic Pulse Width Modulation (PWM) Control on the Spartan-3E Starter Kit.
                   2     ;
                   3     ; Ken Chapman - Xilinx Ltd
                   4     ;
                   5     ; Version v1.00 - 24th May 2006
                   6     device kcpsm2
                   7     ; Automatically sequences the LEDs on the board using PWM to change intensity.
                   8     ;
                   9     ;**************************************************************************************
                  10     ; Port definitions
                  11     ;**************************************************************************************
                  12     ;
                  13     ;
                  14     ;
  00080           15     led_port                EQU     0x80                    ;8 simple LEDs
  00001           16     led0                    EQU     0x01                    ;     LED 0 - bit0
  00002           17     led1                    EQU     0x02                    ;         1 - bit1
  00004           18     led2                    EQU     0x04                    ;         2 - bit2
  00008           19     led3                    EQU     0x08                    ;         3 - bit3
  00010           20     led4                    EQU     0x10                    ;         4 - bit4
  00020           21     led5                    EQU     0x20                    ;         5 - bit5
  00040           22     led6                    EQU     0x40                    ;         6 - bit6
  00080           23     led7                    EQU     0x80                    ;         7 - bit7
                  24     ;
                  25     ;
  00040           26     simple_port             EQU     0x40                    ;4 simple outputs
  00001           27     simple_io9              EQU     0x01                    ;  Header  IO9  - bit0
  00002           28     simple_io10             EQU     0x02                    ;          IO10 - bit1
  00004           29     simple_io11             EQU     0x04                    ;          IO11 - bit2
  00008           30     simple_io12             EQU     0x08                    ;          IO12 - bit3
                  31     ;
                  32     ;
                  33     ;
  00000           34     status_port             EQU     0x00                    ;UART status input
  00001           35     tx_half_full            EQU     0x01                    ;  Transmitter     half full - bit0
  00002           36     tx_full                 EQU     0x02                    ;    FIFO               full - bit1
  00004           37     rx_data_present         EQU     0x04                    ;  Receiver     data present - bit2
  00008           38     rx_half_full            EQU     0x08                    ;    FIFO          half full - bit3
  00010           39     rx_full                 EQU     0x10                    ;                   full - bit4
  00020           40     spare1                  EQU     0x20                    ;                  spare '0' - bit5
  00040           41     spare2                  EQU     0x40                    ;                  spare '0' - bit6
  00080           42     spare3                  EQU     0x80                    ;                  spare '0' - bit7
                  43     ;
  00001           44     uart_read_port          EQU     0x01                    ;UART Rx data input
                  45     ;
  00020           46     uart_write_port         EQU     0x20                    ;UART Tx data output
                  47     ;
                  48     ;
                  49     ;
                  50     ;**************************************************************************************
                  51     ; Special Register usage
                  52     ;**************************************************************************************
                  53     ;
  0000F           54     uart_data               REG     sf                      ;used to pass data to and from the UART
                  55     ;
                  56     ;
                  57     ;
                  58     ;**************************************************************************************
                  59     ;Scratch Pad Memory Locations
                  60     ;**************************************************************************************
                  61     ;
  00000           62     pwm_duty_counter        EQU     0x00                    ;Duty Counter 0 to 255 within 1KHz period (1ms)
  00001           63     pwm_channel0            EQU     0x01                    ;PWM settings for each channel
  00002           64     pwm_channel1            EQU     0x02                    ; Channels 0 to 7 = LEDs 0 to 7
  00003           65     pwm_channel2            EQU     0x03                    ; Channels 8 to 11 = IO9 to IO12
  00004           66     pwm_channel3            EQU     0x04
  00005           67     pwm_channel4            EQU     0x05
  00006           68     pwm_channel5            EQU     0x06
  00007           69     pwm_channel6            EQU     0x07
  00008           70     pwm_channel7            EQU     0x08
  00009           71     pwm_channel8            EQU     0x09
  0000A           72     pwm_channel9            EQU     0x0a
  0000B           73     pwm_channel10           EQU     0x0b
  0000C           74     pwm_channel11           EQU     0x0c
  0000D           75     isr_preserve_s0         EQU     0x0d                    ;preserve register contents during Interrupt Service Routine
  0000E           76     isr_preserve_s1         EQU     0x0e
  0000F           77     isr_preserve_s2         EQU     0x0f
                  78     ;
                  79     ;
  00010           80     led0_sequence           EQU     0x10                    ;LED sequence values
  00011           81     led1_sequence           EQU     0x11
  00012           82     led2_sequence           EQU     0x12
  00013           83     led3_sequence           EQU     0x13
  00014           84     led4_sequence           EQU     0x14
  00015           85     led5_sequence           EQU     0x15
  00016           86     led6_sequence           EQU     0x16
  00017           87     led7_sequence           EQU     0x17
                  88     ;
                  89     ;
                  90     ;
                  91     ;**************************************************************************************
                  92     ;Useful data constants
                  93     ;**************************************************************************************
                  94     ;
                  95     ;
                  96     ;
                  97     ;
                  98     ;ASCII table
                  99     ;
  00061          100     character_a             EQU     0x61
  00062          101     character_b             EQU     0x62
  00063          102     character_c             EQU     0x63
  00064          103     character_d             EQU     0x64
  00065          104     character_e             EQU     0x65
  00066          105     character_f             EQU     0x66
  00067          106     character_g             EQU     0x67
  00068          107     character_h             EQU     0x68
  00069          108     character_i             EQU     0x69
  0006A          109     character_j             EQU     0x6a
  0006B          110     character_k             EQU     0x6b
  0006C          111     character_l             EQU     0x6c
  0006D          112     character_m             EQU     0x6d
  0006E          113     character_n             EQU     0x6e
  0006F          114     character_o             EQU     0x6f
  00070          115     character_p             EQU     0x70
  00071          116     character_q             EQU     0x71
  00072          117     character_r             EQU     0x72
  00073          118     character_s             EQU     0x73
  00074          119     character_t             EQU     0x74
  00075          120     character_u             EQU     0x75
  00076          121     character_v             EQU     0x76
  00077          122     character_w             EQU     0x77
  00078          123     character_x             EQU     0x78
  00079          124     character_y             EQU     0x79
  0007A          125     character_z             EQU     0x7a
  00041          126     _character_a            EQU     0x41
  00042          127     _character_b            EQU     0x42
  00043          128     _character_c            EQU     0x43
  00044          129     _character_d            EQU     0x44
  00045          130     _character_e            EQU     0x45
  00046          131     _character_f            EQU     0x46
  00047          132     _character_g            EQU     0x47
  00048          133     _character_h            EQU     0x48
  00049          134     _character_i            EQU     0x49
  0004A          135     _character_j            EQU     0x4a
  0004B          136     _character_k            EQU     0x4b
  0004C          137     _character_l            EQU     0x4c
  0004D          138     _character_m            EQU     0x4d
  0004E          139     _character_n            EQU     0x4e
  0004F          140     _character_o            EQU     0x4f
  00050          141     _character_p            EQU     0x50
  00051          142     _character_q            EQU     0x51
  00052          143     _character_r            EQU     0x52
  00053          144     _character_s            EQU     0x53
  00054          145     _character_t            EQU     0x54
  00055          146     _character_u            EQU     0x55
  00056          147     _character_v            EQU     0x56
  00057          148     _character_w            EQU     0x57
  00058          149     _character_x            EQU     0x58
  00059          150     _character_y            EQU     0x59
  0005A          151     _character_z            EQU     0x5a
  00030          152     character_0             EQU     0x30
  00031          153     character_1             EQU     0x31
  00032          154     character_2             EQU     0x32
  00033          155     character_3             EQU     0x33
  00034          156     character_4             EQU     0x34
  00035          157     character_5             EQU     0x35
  00036          158     character_6             EQU     0x36
  00037          159     character_7             EQU     0x37
  00038          160     character_8             EQU     0x38
  00039          161     character_9             EQU     0x39
  0003A          162     character_colon         EQU     0x3a
  0002E          163     character_stop          EQU     0x2e
  0003B          164     character_semi_colon    EQU     0x3b
  0002D          165     character_minus         EQU     0x2d
  0002F          166     character_divide        EQU     0x2f                    ;'/'
  0002B          167     character_plus          EQU     0x2b
  0002C          168     character_comma         EQU     0x2c
  0003C          169     character_less_than     EQU     0x3c
  0003E          170     character_greater_than  EQU     0x3e
  0003D          171     character_equals        EQU     0x3d
  00020          172     character_space         EQU     0x20
  0000D          173     character_cr            EQU     0x0d                    ;carriage return
  0003F          174     character_question      EQU     0x3f                    ;'?'
  00024          175     character_dollar        EQU     0x24
  00021          176     character_exclaim       EQU     0x21                    ;'!'
  00008          177     character_bs            EQU     0x08                    ;Back Space command character
                 178     ;
                 179     ;
                 180     ;
                 181     ;
                 182     ;
                 183     ;**************************************************************************************
                 184     ;Initialise the system
                 185     ;**************************************************************************************
                 186     ;
                 187     ; All PWM channels initialise to off (zero).
                 188     ; Simple I/O outputs will remain off at all times.
                 189     ;
000 00000        190     cold_start:             LD      s0, #0x00
001 00101        191                             LD      s1, #pwm_channel0
  00002          192     clear_loop:             ST      s0, @s1
E: instruction not supported on the this device: STORE sX, sY.
                 193                             CMP     s1, #pwm_channel11
E: instruction not supported on the this device: COMPARE sX, kk.
002 35007        194                             JUMP    z, enable_int
003 08101        195                             ADD     s1, #0x01
004 34002        196                             JUMP    clear_loop
                 197     ;
005 3C001        198     enable_int:             ENA                             ;interrupts used to drive servo
                 199     ;
006 360C7        200                             CALL    send_welcome            ;Write welcome message to UART
007 360FB        201                             CALL    send_ok
                 202     ;
                 203     ;
                 204     ; Initialise LED pattern sequence
                 205     ;
008 00001        206                             LD      s0, #0x01               ;trigger to start wave pattern
                 207                             ST      s0, led0_sequence
E: instruction not supported on the this device: STORE sX, ss.
009 00000        208                             LD      s0, #0x00
                 209                             ST      s0, led1_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 210                             ST      s0, led2_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 211                             ST      s0, led3_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 212                             ST      s0, led4_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 213                             ST      s0, led5_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 214                             ST      s0, led6_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 215                             ST      s0, led7_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 216     ;
                 217     ;**************************************************************************************
                 218     ; Main program
                 219     ;**************************************************************************************
                 220     ;
                 221     ; Provides a pattern of interest on the LEDs :-)
                 222     ;
                 223     ; Each LED increases intensity in 8 steps and then decreases intensity in 8 steps until it is off.
                 224     ; The middle LEDs (LD2 to LD5) each start to turn on when either neighbour is turned half on and increasing
                 225     ; to provide the effect of a passing a 'wave' of light passing from side to side. The pair of LEDs at each
                 226     ; (LD0, Ld1 and LD6, LD7) are required to reflect the 'wave' so that the pattern continues.
                 227     ;
                 228     ; I'm sure this code cold be written in more elegant way, but I leave that as an exercise to you :-)
                 229     ;
00A 00203        230     warm_start:             LD      s2, #0x03               ;simple delay loop (time will be increased by ISR processing)
00B 001FF        231     delay_s2_loop:          LD      s1, #0xff
00C 000FF        232     delay_s1_loop:          LD      s0, #0xff
00D 0C001        233     delay_s0_loop:          SUB     s0, #0x01
00E 35C17        234                             JUMP    nc, delay_s0_loop
00F 0C101        235                             SUB     s1, #0x01
010 35C16        236                             JUMP    nc, delay_s1_loop
011 0C201        237                             SUB     s2, #0x01
012 35C15        238                             JUMP    nc, delay_s2_loop
                 239     ;
                 240     ;Pattern generation
                 241     ;
                 242                             FT      s0, led0_sequence       ;read sequence for LED0
E: instruction not supported on the this device: FETCH sX, ss.
                 243                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
013 35025        244                             JUMP    z, test_led0_start
014 0C020        245                             SUB     s0, #0x20               ;Count longer to ensure end stops then reset count if maximum
015 35028        246                             JUMP    z, update_led0
016 08020        247                             ADD     s0, #0x20
017 08001        248     inc_led0:               ADD     s0, #0x01               ;increment counter
018 34028        249                             JUMP    update_led0
  00025          250     test_led0_start:        FT      s1, led1_sequence       ;start LED0 if LED1 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 251                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
019 35023        252                             JUMP    z, inc_led0
  00028          253     update_led0:            ST      s0, led0_sequence
E: instruction not supported on the this device: STORE sX, ss.
01A 360A7        254                             CALL    led_to_duty
                 255                             ST      s1, pwm_channel0
E: instruction not supported on the this device: STORE sX, ss.
                 256     ;
                 257                             FT      s1, led0_sequence       ; refresh LED1 if LED0 = 11 (0B hex) to reflect wave
E: instruction not supported on the this device: FETCH sX, ss.
                 258                             CMP     s1, #0x0b
E: instruction not supported on the this device: COMPARE sX, kk.
01B 35430        259                             JUMP    nz, normal_led1
01C 00004        260                             LD      s0, #0x04
01D 3403E        261                             JUMP    update_led1
  00030          262     normal_led1:            FT      s0, led1_sequence       ;read sequence for LED1
E: instruction not supported on the this device: FETCH sX, ss.
                 263                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
01E 35038        264                             JUMP    z, test_led1_start
01F 0C010        265                             SUB     s0, #0x10               ;reset count if maximum
020 3503E        266                             JUMP    z, update_led1
021 08010        267                             ADD     s0, #0x10
022 08001        268     inc_led1:               ADD     s0, #0x01               ;increment counter
023 3403E        269                             JUMP    update_led1
  00038          270     test_led1_start:        FT      s1, led0_sequence       ;start LED1 if LED0 = 11 (0B hex) to reflect wave
E: instruction not supported on the this device: FETCH sX, ss.
                 271                             CMP     s1, #0x0b
E: instruction not supported on the this device: COMPARE sX, kk.
024 35036        272                             JUMP    z, inc_led1
                 273                             FT      s1, led2_sequence       ;start LED1 if LED2 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 274                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
025 35036        275                             JUMP    z, inc_led1
  0003E          276     update_led1:            ST      s0, led1_sequence
E: instruction not supported on the this device: STORE sX, ss.
026 360A7        277                             CALL    led_to_duty
                 278                             ST      s1, pwm_channel1
E: instruction not supported on the this device: STORE sX, ss.
                 279     ;
                 280                             FT      s0, led2_sequence       ;read sequence for LED2
E: instruction not supported on the this device: FETCH sX, ss.
                 281                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
027 35049        282                             JUMP    z, test_led2_start
028 0C010        283                             SUB     s0, #0x10               ;reset count if maximum
029 3504F        284                             JUMP    z, update_led2
02A 08010        285                             ADD     s0, #0x10
02B 08001        286     inc_led2:               ADD     s0, #0x01               ;increment counter
02C 3404F        287                             JUMP    update_led2
  00049          288     test_led2_start:        FT      s1, led1_sequence       ;start LED2 if LED1 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 289                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
02D 35047        290                             JUMP    z, inc_led2
                 291                             FT      s1, led3_sequence       ;start LED2 if LED3 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 292                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
02E 35047        293                             JUMP    z, inc_led2
  0004F          294     update_led2:            ST      s0, led2_sequence
E: instruction not supported on the this device: STORE sX, ss.
02F 360A7        295                             CALL    led_to_duty
                 296                             ST      s1, pwm_channel2
E: instruction not supported on the this device: STORE sX, ss.
                 297     ;
                 298     ;
                 299                             FT      s0, led3_sequence       ;read sequence for LED3
E: instruction not supported on the this device: FETCH sX, ss.
                 300                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
030 3505A        301                             JUMP    z, test_led3_start
031 0C010        302                             SUB     s0, #0x10               ;reset count if maximum
032 35060        303                             JUMP    z, update_led3
033 08010        304                             ADD     s0, #0x10
034 08001        305     inc_led3:               ADD     s0, #0x01               ;increment counter
035 34060        306                             JUMP    update_led3
  0005A          307     test_led3_start:        FT      s1, led2_sequence       ;start LED3 if LED2 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 308                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
036 35058        309                             JUMP    z, inc_led3
                 310                             FT      s1, led4_sequence       ;start LED3 if LED4 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 311                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
037 35058        312                             JUMP    z, inc_led3
  00060          313     update_led3:            ST      s0, led3_sequence
E: instruction not supported on the this device: STORE sX, ss.
038 360A7        314                             CALL    led_to_duty
                 315                             ST      s1, pwm_channel3
E: instruction not supported on the this device: STORE sX, ss.
                 316     ;
                 317                             FT      s0, led4_sequence       ;read sequence for LED4
E: instruction not supported on the this device: FETCH sX, ss.
                 318                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
039 3506B        319                             JUMP    z, test_led4_start
03A 0C010        320                             SUB     s0, #0x10               ;reset count if maximum
03B 35071        321                             JUMP    z, update_led4
03C 08010        322                             ADD     s0, #0x10
03D 08001        323     inc_led4:               ADD     s0, #0x01               ;increment counter
03E 34071        324                             JUMP    update_led4
  0006B          325     test_led4_start:        FT      s1, led3_sequence       ;start LED4 if LED3 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 326                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
03F 35069        327                             JUMP    z, inc_led4
                 328                             FT      s1, led5_sequence       ;start LED4 if LED5 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 329                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
040 35069        330                             JUMP    z, inc_led4
  00071          331     update_led4:            ST      s0, led4_sequence
E: instruction not supported on the this device: STORE sX, ss.
041 360A7        332                             CALL    led_to_duty
                 333                             ST      s1, pwm_channel4
E: instruction not supported on the this device: STORE sX, ss.
                 334     ;
                 335                             FT      s0, led5_sequence       ;read sequence for LED5
E: instruction not supported on the this device: FETCH sX, ss.
                 336                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
042 3507C        337                             JUMP    z, test_led5_start
043 0C010        338                             SUB     s0, #0x10               ;reset count if maximum
044 35082        339                             JUMP    z, update_led5
045 08010        340                             ADD     s0, #0x10
046 08001        341     inc_led5:               ADD     s0, #0x01               ;increment counter
047 34082        342                             JUMP    update_led5
  0007C          343     test_led5_start:        FT      s1, led4_sequence       ;start LED5 if LED4 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 344                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
048 3507A        345                             JUMP    z, inc_led5
                 346                             FT      s1, led6_sequence       ;start LED5 if LED6 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 347                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
049 3507A        348                             JUMP    z, inc_led5
  00082          349     update_led5:            ST      s0, led5_sequence
E: instruction not supported on the this device: STORE sX, ss.
04A 360A7        350                             CALL    led_to_duty
                 351                             ST      s1, pwm_channel5
E: instruction not supported on the this device: STORE sX, ss.
                 352     ;
                 353                             FT      s1, led7_sequence       ; refresh LED6 if LED7 = 11 (0B hex) to reflect wave
E: instruction not supported on the this device: FETCH sX, ss.
                 354                             CMP     s1, #0x0b
E: instruction not supported on the this device: COMPARE sX, kk.
04B 3548A        355                             JUMP    nz, normal_led6
04C 00004        356                             LD      s0, #0x04
04D 34095        357                             JUMP    update_led6
  0008A          358     normal_led6:            FT      s0, led6_sequence       ;read sequence for LED6
E: instruction not supported on the this device: FETCH sX, ss.
                 359                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
04E 35092        360                             JUMP    z, test_led6_start
04F 0C010        361                             SUB     s0, #0x10               ;reset count if maximum
050 35095        362                             JUMP    z, update_led6
051 08010        363                             ADD     s0, #0x10
052 08001        364     inc_led6:               ADD     s0, #0x01               ;increment counter
053 34095        365                             JUMP    update_led6
  00092          366     test_led6_start:        FT      s1, led5_sequence       ;start LED6 if LED5 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 367                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
054 35090        368                             JUMP    z, inc_led6
  00095          369     update_led6:            ST      s0, led6_sequence
E: instruction not supported on the this device: STORE sX, ss.
055 360A7        370                             CALL    led_to_duty
                 371                             ST      s1, pwm_channel6
E: instruction not supported on the this device: STORE sX, ss.
                 372     ;
                 373                             FT      s0, led7_sequence       ;read sequence for LED7
E: instruction not supported on the this device: FETCH sX, ss.
                 374                             CMP     s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
056 350A0        375                             JUMP    z, test_led7_start
057 0C020        376                             SUB     s0, #0x20               ;Count longer to ensure end stops then reset count if maximum
058 350A3        377                             JUMP    z, update_led7
059 08020        378                             ADD     s0, #0x20
05A 08001        379     inc_led7:               ADD     s0, #0x01               ;increment counter
05B 340A3        380                             JUMP    update_led7
  000A0          381     test_led7_start:        FT      s1, led6_sequence       ;start LED7 if LED6 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 382                             CMP     s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
05C 3509E        383                             JUMP    z, inc_led7
  000A3          384     update_led7:            ST      s0, led7_sequence
E: instruction not supported on the this device: STORE sX, ss.
05D 360A7        385                             CALL    led_to_duty
                 386                             ST      s1, pwm_channel7
E: instruction not supported on the this device: STORE sX, ss.
05E 34014        387                             JUMP    warm_start
                 388     ;
                 389     ;
                 390     ; Convert LED sequence number into PWM intensity figure
                 391     ;
                 392     ; LEDs duty cycle values are 0,1,2,4,8,16,32 and 64 because they appear to give what
                 393     ; appears to be a fairly liner change in intensity and provides a simple way to set
                 394     ; the duty value.
                 395     ;
                 396     ; Provide sequence value in register s0 and intensity will be
                 397     ; returned in register s1.
                 398     ;
                 399     ; s0   s1
                 400     ; 00   00
                 401     ; 01   01
                 402     ; 02   02
                 403     ; 03   04
                 404     ; 04   08
                 405     ; 05   10
                 406     ; 06   20
                 407     ; 07   40
                 408     ; 08   80
                 409     ; 09   40
                 410     ; 0A   20
                 411     ; 0B   10
                 412     ; 0C   08
                 413     ; 0D   04
                 414     ; 0E   02
                 415     ; 0F   01
                 416     ; 10   00  and zero for all larger values of s0
                 417     ;
05F 00100        418     led_to_duty:            LD      s1, #0x00
                 419                             CMP     s0, #0x00               ;test for zero
E: instruction not supported on the this device: COMPARE sX, kk.
060 24000        420                             RET
061 00101        421                             LD      s1, #0x01               ;inject '1'
062 0C001        422     go_up_loop:             SUB     s0, #0x01
063 24000        423                             RET
064 28106        424                             SL0     s1                      ;multiply by 2
065 358B0        425                             JUMP    c, go_down
066 340AB        426                             JUMP    go_up_loop
067 00140        427     go_down:                LD      s1, #0x40
068 0C001        428     go_down_loop:           SUB     s0, #0x01
069 24000        429                             RET
06A 2810E        430                             SR0     s1                      ;divide by 2
06B 340B1        431                             JUMP    go_down_loop
                 432     ;
                 433     ;**************************************************************************************
                 434     ; UART communication routines
                 435     ;**************************************************************************************
                 436     ;
                 437     ; Read one character from the UART
                 438     ;
                 439     ; Character read will be returned in a register called 'UART_data'.
                 440     ;
                 441     ; The routine first tests the receiver FIFO buffer to see if data is present.
                 442     ; If the FIFO is empty, the routine waits until there is a character to read.
                 443     ; As this could take any amount of time the wait loop could include a call to a
                 444     ; subroutine which performs a useful function.
                 445     ;
                 446     ;
                 447     ; Registers used s0 and UART_data
                 448     ;
06C 20000        449     read_from_uart:         IN      s0, status_port         ;test Rx_FIFO buffer
                 450                             TEST    s0, #rx_data_present    ;wait if empty
E: instruction not supported on the this device: TEST sX, kk.
06D 354B9        451                             JUMP    nz, read_character
06E 340B5        452                             JUMP    read_from_uart
06F 20F01        453     read_character:         IN      uart_data, uart_read_port ;read from FIFO
070 24000        454                             RET
                 455     ;
                 456     ;
                 457     ;
                 458     ; Transmit one character to the UART
                 459     ;
                 460     ; Character supplied in register called 'UART_data'.
                 461     ;
                 462     ; The routine first tests the transmit FIFO buffer to see if it is full.
                 463     ; If the FIFO is full, then the routine waits until it there is space.
                 464     ;
                 465     ; Registers used s0
                 466     ;
071 20000        467     send_to_uart:           IN      s0, status_port         ;test Tx_FIFO buffer
                 468                             TEST    s0, #tx_full            ;wait if full
E: instruction not supported on the this device: TEST sX, kk.
072 350BF        469                             JUMP    z, uart_write
073 340BB        470                             JUMP    send_to_uart
074 22F20        471     uart_write:             OUT     uart_data, uart_write_port
075 24000        472                             RET
                 473     ;
                 474     ;
                 475     ;
                 476     ;**************************************************************************************
                 477     ; Text messages
                 478     ;**************************************************************************************
                 479     ;
                 480     ;
                 481     ; Send Carriage Return to the UART
                 482     ;
076 00F0D        483     send_cr:                LD      uart_data, #character_cr
077 360BB        484                             CALL    send_to_uart
078 24000        485                             RET
                 486     ;
                 487     ; Send a space to the UART
                 488     ;
079 00F20        489     send_space:             LD      uart_data, #character_space
07A 360BB        490                             CALL    send_to_uart
07B 24000        491                             RET
                 492     ;
                 493     ;
                 494     ;
                 495     ; Send 'PicoBlaze Servo Control' string to the UART
                 496     ;
07C 360C1        497     send_welcome:           CALL    send_cr
07D 360C1        498                             CALL    send_cr
07E 00F50        499                             LD      uart_data, #_character_p
07F 360BB        500                             CALL    send_to_uart
080 00F69        501                             LD      uart_data, #character_i
081 360BB        502                             CALL    send_to_uart
082 00F63        503                             LD      uart_data, #character_c
083 360BB        504                             CALL    send_to_uart
084 00F6F        505                             LD      uart_data, #character_o
085 360BB        506                             CALL    send_to_uart
086 00F42        507                             LD      uart_data, #_character_b
087 360BB        508                             CALL    send_to_uart
088 00F6C        509                             LD      uart_data, #character_l
089 360BB        510                             CALL    send_to_uart
08A 00F61        511                             LD      uart_data, #character_a
08B 360BB        512                             CALL    send_to_uart
08C 00F7A        513                             LD      uart_data, #character_z
08D 360BB        514                             CALL    send_to_uart
08E 00F65        515                             LD      uart_data, #character_e
08F 360BB        516                             CALL    send_to_uart
090 360C4        517                             CALL    send_space
091 00F41        518                             LD      uart_data, #_character_a
092 360BB        519                             CALL    send_to_uart
093 00F75        520                             LD      uart_data, #character_u
094 360BB        521                             CALL    send_to_uart
095 00F74        522                             LD      uart_data, #character_t
096 360BB        523                             CALL    send_to_uart
097 00F6F        524                             LD      uart_data, #character_o
098 360BB        525                             CALL    send_to_uart
099 360C4        526                             CALL    send_space
09A 00F50        527                             LD      uart_data, #_character_p
09B 360BB        528                             CALL    send_to_uart
09C 00F57        529                             LD      uart_data, #_character_w
09D 360BB        530                             CALL    send_to_uart
09E 00F4D        531                             LD      uart_data, #_character_m
09F 360BB        532                             CALL    send_to_uart
0A0 360C4        533                             CALL    send_space
0A1 00F41        534                             LD      uart_data, #_character_a
0A2 360BB        535                             CALL    send_to_uart
0A3 00F63        536                             LD      uart_data, #character_c
0A4 360BB        537                             CALL    send_to_uart
0A5 00F74        538                             LD      uart_data, #character_t
0A6 360BB        539                             CALL    send_to_uart
0A7 00F69        540                             LD      uart_data, #character_i
0A8 360BB        541                             CALL    send_to_uart
0A9 00F76        542                             LD      uart_data, #character_v
0AA 360BB        543                             CALL    send_to_uart
0AB 00F65        544                             LD      uart_data, #character_e
0AC 360BB        545                             CALL    send_to_uart
0AD 360C1        546                             CALL    send_cr
0AE 360C1        547                             CALL    send_cr
0AF 24000        548                             RET
                 549     ;
                 550     ;
                 551     ;Send 'OK' to the UART
                 552     ;
0B0 360C1        553     send_ok:                CALL    send_cr
0B1 00F4F        554                             LD      uart_data, #_character_o
0B2 360BB        555                             CALL    send_to_uart
0B3 00F4B        556                             LD      uart_data, #_character_k
0B4 360BB        557                             CALL    send_to_uart
0B5 340C1        558                             JUMP    send_cr
                 559     ;
                 560     ;
                 561     ;**************************************************************************************
                 562     ; Interrupt Service Routine (ISR)
                 563     ;**************************************************************************************
                 564     ;
                 565     ; Interrupts occur at 3.92us intervals and are used to generate the PWM pulses generated
                 566     ; at a PRF of 1KHz. The 3.92us interrupt rate corresponds with a resolution of 256 steps
                 567     ; over the 1ms associated with the 1KHz PRF.
                 568     ;
                 569     ; The ISR is self contained and all registers used are preserved. Scratch pad memory
                 570     ; locations are used to determine the desired duty factor for each of 12 channels.
                 571     ;
                 572     ; Note that an interrupt is generated every 196 clock cycles. This means that there is
                 573     ; only time to execute 98 instructions between each interrupt. This ISR is 48 instructions
                 574     ; long. A further 3 instructions are also consumed by the interrupt process
                 575     ; (abandoned instruction, virtual CALL to 3FF and the interrupt vector JUMP) and hence
                 576     ; PicoBlaze has approximately half of its time available for other tasks in the main program.
                 577     ;
                 578     ; Although a loop would normal be employed in software to process each of 12 channels,
                 579     ; the implementation of a loop would increase the number of instructions which needed to
                 580     ; be executed to such an extent that this 12 channel implementation would not be possible.
                 581     ; Consequently the code is written out in a linear fashion which consumes more program
                 582     ; space but which executes faster.
                 583     ;
  00101          584     isr:                    ST      s0, isr_preserve_s0     ;preserve registers to be used
E: instruction not supported on the this device: STORE sX, ss.
                 585                             ST      s1, isr_preserve_s1
E: instruction not supported on the this device: STORE sX, ss.
                 586                             ST      s2, isr_preserve_s2
E: instruction not supported on the this device: STORE sX, ss.
                 587     ;Determine the number of steps currently through the 1ms PWM cycle
                 588                             FT      s1, pwm_duty_counter    ;read 8-bit counter of steps
E: instruction not supported on the this device: FETCH sX, ss.
0B6 08101        589                             ADD     s1, #0x01               ;increment counter (will roll over to zero)
                 590                             ST      s1, pwm_duty_counter    ;update count value in memory for next interrupt.
E: instruction not supported on the this device: STORE sX, ss.
                 591     ;Read duty factor for each channel and compare it with the duty counter and set or
                 592     ;reset a bit in register s2 accordingly.
                 593                             FT      s0, pwm_channel11       ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 594                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0B7 28200        595                             SLA     s2                      ;shift carry into register s2
                 596                             FT      s0, pwm_channel10       ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 597                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0B8 28200        598                             SLA     s2                      ;shift carry into register s2
                 599                             FT      s0, pwm_channel9        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 600                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0B9 28200        601                             SLA     s2                      ;shift carry into register s2
                 602                             FT      s0, pwm_channel8        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 603                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0BA 28200        604                             SLA     s2                      ;shift carry into register s2
0BB 22240        605                             OUT     s2, simple_port         ;drive pins on connector J4
                 606                             FT      s0, pwm_channel7        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 607                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0BC 28200        608                             SLA     s2                      ;shift carry into register s2
                 609                             FT      s0, pwm_channel6        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 610                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0BD 28200        611                             SLA     s2                      ;shift carry into register s2
                 612                             FT      s0, pwm_channel5        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 613                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0BE 28200        614                             SLA     s2                      ;shift carry into register s2
                 615                             FT      s0, pwm_channel4        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 616                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0BF 28200        617                             SLA     s2                      ;shift carry into register s2
                 618                             FT      s0, pwm_channel3        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 619                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0C0 28200        620                             SLA     s2                      ;shift carry into register s2
                 621                             FT      s0, pwm_channel2        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 622                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0C1 28200        623                             SLA     s2                      ;shift carry into register s2
                 624                             FT      s0, pwm_channel1        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 625                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0C2 28200        626                             SLA     s2                      ;shift carry into register s2
                 627                             FT      s0, pwm_channel0        ;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 628                             CMP     s1, s0                  ;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0C3 28200        629                             SLA     s2                      ;shift carry into register s2
0C4 22280        630                             OUT     s2, led_port            ;drive LEDs
                 631                             FT      s0, isr_preserve_s0     ;restore register values
E: instruction not supported on the this device: FETCH sX, ss.
                 632                             FT      s1, isr_preserve_s1
E: instruction not supported on the this device: FETCH sX, ss.
                 633                             FT      s2, isr_preserve_s2
E: instruction not supported on the this device: FETCH sX, ss.
0C5 2C001        634                             RETIE
                 635     ;
                 636     ;
                 637     ;**************************************************************************************
                 638     ; Interrupt Vector
                 639     ;**************************************************************************************
                 640     ;
  003FF          641                             ORG     0x3ff
3FF 34101        642                             JUMP    isr
                 643     ;
                 644     ;
                 645
