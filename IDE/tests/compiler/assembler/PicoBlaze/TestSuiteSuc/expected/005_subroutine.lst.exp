                   1     ; Compiler test case for Assembler
                   2     ; instruction opcodes
                   3
                   4
                   5     DEVICE          kcpsm3
                   6
                   7     Start:
                   8
                   9         ; Others
000 30001         10                     CALl      Podprog1
                  11
                  12     Podprog1:
001 30003         13                     CALl      Podprog2
002 2A000         14                     RETURN
003 30005         15     Podprog2:       CALl      Podprog3
004 2A000         16                     RETURN
005 30007         17     Podprog3:       CALl      Podprog4
006 2A000         18                     RETURN
007 30009         19     Podprog4:       CALl      Podprog5
008 2A000         20                     RETURN
009 3000B         21     Podprog5:       CALl      Podprog6
00A 2A000         22                     RETURN
00B 3000D         23     Podprog6:       CALl      Podprog7
00C 2A000         24                     RETURN
                  25     Podprog7:
00D 2A000         26                     RETURN
                  27
                  28     ADD16:
                  29
  00000           30     NAMEREG         s0, a_lsb
                  31     ; rename register s0 as “a_lsb”
  00001           32     NAMEREG         s1, a_msb
                  33     ; rename register s1 as “a_msb”
  00002           34     NAMEREG         s2, b_lsb
                  35     ; rename register s2 as “b_lsb”
  00003           36     NAMEREG         s3, b_msb
                  37     ; rename register s3 as “b_lsb”
00E 19020         38     ADD             a_lsb, b_lsb
                  39     ; add LSBs, keep result in a_lsb
00F 1B130         40     ADDCY           a_msb, b_msb
                  41     ; add MSBs, keep result in a_msb
010 2A000         42     RETURN
                  43
  00004           44     sX              equ             4
                  45
                  46
                  47     inc_16:
  00008           48                      lo_byte     REG   s8
  00009           49                     hi_byte     REG   s9
                  50             ; increment low byte
011 19810         51             ADD             lo_byte,01
                  52             ; increment high byte only if CARRY bit set when incrementing low byte
012 1B900         53             ADDCY           hi_byte,00
                  54
                  55
                  56     Negate:
                  57             ; invert all bits in the register performing a one’s complement
013 0E4FF         58             XOR             sX,#FFh
                  59             ; add one to sX
014 18401         60             ADD             sX,#01
015 2A000         61             RETURN
                  62
                  63
                  64
                  65
  0000F           66     NAMEREG         sF, value
  0000E           67     NAMEREG         sE, complement
                  68     ; Clear ‘complement’ to zero
016 01E00         69     LOAD            complement, 00
                  70     ; subtract value from 0 to create two’s complement
017 1DEF0         71     SUB             complement, value
018 2A000         72     RETURN
                  73
                  74
                  75     mult_8x8:
  00000           76     NAMEREG         s0, multiplicand
W: reusing already reserved space in register file memory at address: 0
                  77     ;
                  78     ;preserved
  00001           79     NAMEREG         s1, multiplier
W: reusing already reserved space in register file memory at address: 1
                  80     ; preserved
  00002           81     NAMEREG         s2, bit_mask
W: reusing already reserved space in register file memory at address: 2
                  82     ; modified
  00003           83     NAMEREG         s3, result_msb
W: reusing already reserved space in register file memory at address: 3
                  84     ;
                  85     ;most-significant byte (MSB) of result,
                  86     ; modified
  00004           87     NAMEREG         s4, result_lsb
                  88     ; least-significant byte (LSB) of result,
                  89     ; modified
                  90     ;
019 01210         91     LOAD            bit_mask, 01
                  92     ; start with least-significant bit (lsb)
01A 01300         93     LOAD            result_msb, 00
                  94     ; clear product MSB
01B 01400         95     LOAD            result_lsb, 00
                  96     ; clear product LSB (not required)
                  97     ;
                  98     ; loop through all bits in multiplier
                  99     mult_loop:
01C 13120        100     TEST            multiplier, bit_mask
                 101     ; check if bit is set
01D 3501F        102     JUMP            Z, no_add
                 103     ; if bit is not set, skip addition
                 104     ;
01E 19300        105     ADD             result_msb, multiplicand
                 106     ; addition only occurs in MSB
                 107     ;
                 108     no_add:
01F 20308        109     SRA             result_msb
                 110     ; shift MSB right, CARRY into bit 7,
                 111     ; lsb into CARRY
020 20408        112     SRA             result_lsb
                 113     ; shift LSB right,
                 114     ; lsb from result_msb into bit 7
                 115     ;
021 20206        116     SL0             bit_mask
                 117     ; shift bit_mask left to examine
                 118     ; next bit in multiplier
                 119     ;
022 3541C        120     JUMP            NZ, mult_loop
                 121     ; if all bit examined, then bit_mask = 0,
                 122
                 123
                 124     ; Multiplier Routine (8-bit x 8-bit = 16-bit product)
                 125     ; ===================================================
                 126     ; Connects to embedded 18x18 Hardware Multiplier via ports
                 127     ;
                 128
                 129     ;
                 130     ;least-significant byte (LSB) of result, modified
                 131     ;
                 132     ; Define the port ID numbers as constants for better clarity
  00000          133     CONSTANT         multiplier_lsb, 00
  00001          134     CONSTANT         multiplier_msb, 01
                 135     ;
                 136     ;
                 137     ;Output multiplicand and multiplier to FPGA registers connected to the
                 138     ;inputs of
                 139     ; the embedded multiplier.
023 2C000        140     OUTPUT           multiplicand, multiplier_lsb
024 2C101        141     OUTPUT           multiplier, multiplier_msb
                 142     ;
                 143     ; Input the resulting product from the embedded multiplier.
025 04400        144     INPUT            result_lsb, multiplier_lsb
026 04301        145     INPUT            result_msb, multiplier_msb
                 146
                 147
                 148     ; Divide Routine (8-bit / 8-bit = 8-bit result, remainder)
                 149     ; ==================================================
                 150     ; Shift and subtract algorithm
                 151     ;
                 152     div_8by8:
  00000          153     NAMEREG          s0, dividend
                 154     ; preserved
  00001          155     NAMEREG          s1, divisor
                 156     ; preserved
  00002          157     NAMEREG          s2, quotient
                 158     ; preserved
  00003          159     NAMEREG          s3, remainder
                 160     ; modified
                 161
                 162     ; used to test bits in dividend,
                 163     ; one-hot encoded, modified
                 164     ;
027 01300        165     LOAD             remainder, 00
                 166     ; clear remainder
028 01200        167     LOAD             bit_mask, 80
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0
                 168     ; start with most-significant bit (msb)
                 169     div_loop:
029 13020        170     TEST             dividend, bit_mask
                 171     ; test bit, set CARRY if bit is '1'
02A 20300        172     SLA              remainder
                 173     ; shift CARRY into lsb of remainder
02B 20206        174     SL0              quotient
                 175     ; shift quotient left (multiply by 2)
                 176     ;
02C 15310        177     COMPARE          remainder, divisor
                 178     ; is remainder > divisor?
02D 35830        179     JUMP             C, no_sub
                 180     ; if divisor is greater, continue to next bit
02E 1D310        181     SUB              remainder, divisor
                 182     ; if remainder > divisor, then subtract
02F 19210        183     ADD              quotient, 01
                 184     ; add one to quotient
                 185     no_sub:
030 2020E        186     SR0              bit_mask
                 187     ; shift to examine next bit position
031 35429        188     JUMP             NZ, div_loop
                 189     ;
                 190     ;if bit_mask=0, then all bits examined
                 191
                 192
                 193     set_carry:
032 01400        194     LOAD             sX, 00
033 15410        195     COMPARE          sX, 01
                 196     ; set CARRY flag and reset ZERO flag
                 197
                 198
034 01050        199     LOAD             s0, 05
                 200     ; s0 = 00000101
035 13040        201     TEST             s0, 04
                 202     ; mask = 00000100
                 203     ; CARRY = 1, ZERO = 0
