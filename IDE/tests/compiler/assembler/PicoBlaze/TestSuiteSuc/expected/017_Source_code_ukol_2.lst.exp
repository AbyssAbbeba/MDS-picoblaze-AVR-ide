                   1     ;##############################################################################;
                   2     ; Description of code
                   3     ;##############################################################################;
                   4     ;
                   5     ; Tutorial code for MPLD 2010/11
                   6     ; Michal Kubicek 17.4.2011
                   7     device          KCPSM3
                   8     ;
                   9     ;##############################################################################;
                  10     ; Start of code
                  11     ;##############################################################################;
                  12     ; Register name assignment
  00000           13     temp1               EQU       s0                  ; temporary data register
  00001           14     temp2               EQU       s1                  ; temporary data register
  00002           15     temp3               EQU       s2                  ; temporary data register
  00003           16     chreg               EQU       s3                  ; character register
  00004           17     RxDat               EQU       s4                  ; received character register
  00005           18     addr                EQU       s5                  ; address register
                  19     
                  20     ; Peripherals
  00001           21     UART_data           EQU        01h                 ; UART data register port ID
  00002           22     UART_stat           EQU        02h                 ; UART control register port ID
                  23     ; UART Status register:
                  24     ;  [2] Tx ready
                  25     ;  [3] new Rx data
                  26     ;  [4] Rx buffer overflow
                  27     
  00004           28     BCD_01              EQU        04h                 ; 7 segment, upper two segments
  00008           29     BCD_23              EQU        08h                 ; 7 segment, lower two segments
  00010           30     LED                 EQU        10h                 ; LEDs
  00020           31     Switch              EQU        20h                 ; Switches
  00040           32     Button              EQU        40h                 ; Buttons (3:0)
                  33     
                  34     ;##############################################################################;
                  35     
                  36     
                  37     ;##############################################################################;
                  38     ; Initialization
                  39     ;##############################################################################;
                  40     
                  41     ; initial wait
000 3002C         42     Start:              CALL      wait_1s             ; wait for peripheral startup
001 00000         43     	                LOAD      Temp1,#00           ; LEDs OFF at startup
002 2C010         44     	                OUT       Temp1,LED           ; write valu to LED register
                  45     
                  46     ; end of initialization
                  47     
                  48     ;##############################################################################;
                  49     ;  Main loop
                  50     ;##############################################################################;
003 3000E         51     main_loop:          CALL      GetChar             ; get (wait for) new character
004 2C304         52                         OUT       chreg,BCD_01        ; Store value on 7-segment
005 19310         53                         ADD       chreg,1             ; Increment chreg
006 2C308         54                         OUT       chreg,BCD_23        ; Store new value on 7-segment
007 30009         55                         CALL      SendChar            ; And send it via UART
008 34003         56                         JUMP      main_loop
                  57     
                  58     ;##############################################################################;
                  59     ;  General purpose procedures
                  60     ;##############################################################################;
                  61     
                  62     ; Basic UART text output procedures (CALLs)
                  63     
                  64     ;==============================================================================;
                  65     ; Send character stored in chreg via UART
                  66     ; Registers used: Temp1, chreg
                  67     ;==============================================================================;
009 04002         68     SendChar:           IN        Temp1, UART_stat    ; checking UART status
00A 13040         69                         TEST      Temp1, 4            ; test bit 2 (is Tx ready?)
00B 35009         70                         JUMP      Z, SendChar         ; wait until Tx is ready
00C 2C301         71                         OUT       chreg, UART_data    ; Send the character
00D 2A000         72                         RET                           ; Return from procedure
                  73     
                  74     ;==============================================================================;
                  75     ; Reads a single character from UART (waits on receive when none is prepared)
                  76     ; Registers used: Temp1, chreg
                  77     ;==============================================================================;
00E 04002         78     GetChar:            IN        Temp1, UART_stat    ; checking UART status
00F 13080         79                         TEST      Temp1, 8            ; test bit 3 (new Rx data?)
010 3500E         80                         JUMP      Z, GetChar          ; wait for new Rx data
011 04301         81                         IN        chreg, UART_data    ; Read the character
012 2A000         82                         RET                           ; Return from procedure
                  83     
                  84     ;==============================================================================;
                  85     ; Procedure for sending content of "chreg" register in hexadecimal ASCII format
                  86     ;   (two characters, one for each nibble)
                  87     ; Reister used: Temp1, Temp2, chreg
                  88     ; Procedures used: SendChar
                  89     ;==============================================================================;
013 01130         90     SendByte:           LOAD      Temp2, chreg        ; make a backup of chreg
014 2030E         91                         SR0       chreg               ; move upper nibble to lower nibble
015 2030E         92                         SR0       chreg
016 2030E         93                         SR0       chreg
017 2030E         94                         SR0       chreg
018 153A0         95                         CMP      chreg, 10           ; if not greater than 9, than it is a number
019 3581C         96                         JUMP      C, SendBNum1        ; C is set when Temp < 10 (Temp-10)
01A 18325         97                         ADD       chreg, #37          ; when letter, add #37; letter conversion
01B 3401D         98                         JUMP      SendB1
01C 1831E         99     SendBNum1:          ADD       chreg, #30          ; when number, add #30; number conversion
01D 30009        100     SendB1:             CALL      SendChar            ; Send Character
                 101     
01E 01310        102                         LOAD      chreg, Temp2        ; load the whole byte again
01F 0A30F        103                         AND       chreg, #0Fh          ; select second character
020 153A0        104                         CMP      chreg, 10           ; if not greater than 9, than number
021 35824        105                         JUMP      C, SendBNum2        ; C is set when Temp < 10 (Temp-10 under 0)
022 18325        106                         ADD       chreg, #37          ; when letter, add #37; letter conversion
023 34025        107                         JUMP      SendB2
024 1831E        108     SendBNum2:          ADD       chreg, #30          ; when number, add #30; number conversion
025 30009        109     SendB2:             CALL      SendChar            ; Send character
026 2A000        110                         RET
                 111     
                 112     ;==============================================================================;
                 113     ; Send 0D and 0A character pair via UART
                 114     ; Registers used: Temp1, chreg
                 115     ; Procedures used: SendChar
                 116     ;==============================================================================;
027 00300        117     SendCRLF:           LOAD      chreg, #0D          ; CR character
028 30009        118                         CALL      SendChar            ; Send character
029 0030A        119                         LOAD      chreg, #0Ah          ; Load LF character
02A 30009        120                         CALL      SendChar            ; Send character
02B 2A000        121                         RET                           ; Return from procedure
                 122     
                 123     ;==============================================================================;
                 124     ; Procedures for waiting for specified time
                 125     ; Duration is set in registers Temp1, Temp2 and Temp3
                 126     ;
                 127     ;   clock           instruction execution time
                 128     ;   10.00 MHz              200.00 ns
                 129     ;   19.44 MHz              102.88 ns
                 130     ;   38.88 MHz               51.44 ns
                 131     ;   50.00 MHz               40.00 ns
                 132     ;  100.00 MHz               20.00 ns
                 133     ;
                 134     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                 135     ;   1s @ (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                 136     ;==============================================================================;
02C 010A0        137     wait_1s:            LOAD      Temp1, 250          ; Load Temp1 register
W: value out of range: 250, allowed range is [0,15] (trimmed to 4 bits) which makes it 10
02D 01190        138                         LOAD      Temp2, 249          ; Load Temp2 register
W: value out of range: 249, allowed range is [0,15] (trimmed to 4 bits) which makes it 9
02E 01280        139                         LOAD      Temp3, 200          ; Load Temp3 register
W: value out of range: 200, allowed range is [0,15] (trimmed to 4 bits) which makes it 8
02F 1D010        140     wait_1s_i:          SUB       Temp1, 1
030 3542F        141                         JUMP      NZ, wait_1s_i
031 1D110        142                         SUB       Temp2, 1
032 3542F        143                         JUMP      NZ, wait_1s_i
033 1D210        144                         SUB       Temp3, 1
034 3542F        145                         JUMP      NZ, wait_1s_i
035 2A000        146                         RET
                 147     
036 010A0        148     wait_100ms:         LOAD      Temp1, 250          ; Load Temp1 register
037 01190        149                         LOAD      Temp2, 249          ; Load Temp2 register
038 01240        150                         LOAD      Temp3, 20           ; Load Temp3 register
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4
039 1D010        151     wait_100ms_i:       SUB       Temp1, 1
03A 35439        152                         JUMP      NZ, wait_100ms_i
03B 1D110        153                         SUB       Temp2, 1
03C 35439        154                         JUMP      NZ, wait_100ms_i
03D 1D210        155                         SUB       Temp3, 1
03E 35439        156                         JUMP      NZ, wait_100ms_i
03F 2A000        157                         RET
                 158     
                 159     ;##############################################################################;
                 160     
                 161
