                   1
                   2
                   3     device kcpsm1
                   4
  00004            5     G               equ     4
  00004            6     SBOX_ROM               equ     4
  00004            7     STATE               equ     4
  00004            8     RESULT               equ     4
  00004            9     KEY               equ     4
  00004           10     INKEY               equ     4
  00004           11     B128               equ     4
  00004           12     XORROUNDKEY               equ     4
  00004           13     INTOSTATE               equ     4
  00004           14     X   equ                         4
                  15
                  16     ; Rijndael encrypt entry
                  17     ; plain  is assumed to be in {plain }, the key in {inkey}
                  18     ; both will be copied, final state will be the result
  00000           19     encrypt:
000 0831C         20                             CALL    inkeytokey
001 08304         21                             CALL    intostate               ; state = in
W: instruction `CALL aaa' requires operand #1 to be of type(s): label; while the given operand is of type: number.
                  22
002 08304         23                             CALL    xorroundkey             ; XorRoundKey( state, k[0], Nc )
W: instruction `CALL aaa' requires operand #1 to be of type(s): label; while the given operand is of type: number.
003 0AF04         24                             IN      sf, x                   ; x^(i-1) (i=1)
004 0A309         25                             IN      s3, 9                   ; for round = 1 step 1 to Nn - 1
  00005           26     round:                                                  ;
005 08364         27                             CALL    subbytes                ; ..SubBytes( state, Nc )
006 0838F         28                             CALL    shiloadrows               ; ..ShiloadRows( state, Nc )
007 083A8         29                             CALL    mixcolumns              ; ..MixColumns( state, Nc )
008 0832E         30                             CALL    nextroundkey            ; ..XorRoundKey( state, k[ round ], Nc )
009 08304         31                             CALL    xorroundkey
W: instruction `CALL aaa' requires operand #1 to be of type(s): label; while the given operand is of type: number.
00A 06301         32                             SUB     s3, #1                  ; ..step 1
00B 09505         33                             JUMP    nz, round               ; end for
00C 08364         34                             CALL    subbytes                ; SubBytes( state, Nc )
00D 0838F         35                             CALL    shiloadrows               ; ShiloadRows( state, Nc )
00E 0832E         36                             CALL    nextroundkey            ; XorRoundKey( state, k[ round ], Nc )
00F 08304         37                             CALL    xorroundkey
W: instruction `CALL aaa' requires operand #1 to be of type(s): label; while the given operand is of type: number.
010 08324         38                             CALL    statetoout
011 08080         39                             RET                             ; result  is last {state}
                  40
                  41     ; result should be: (Gladman)
                  42     ; R[10].k_sch d014f9a8c9ee2589e13f0cc8b6630ca6
                  43     ; R[10].result  3925841d02dc09fbdc118597196a0b32
                  44
                  45     ; XorRoundKey( state, k, Nc )
  00005           46     pkey    EQU     5
  00004           47     pstate  equ     4
                  48
012 0A004         49     xor128:                 IN      s0, b128                ; set up loop count
013 00405         50     xornext:                LD      s4, #pkey               ; get key byte
014 00504         51                             LD      s5, #pstate             ; get state byte
015 0C453         52                             XOR     s4, s5                  ; do the xor
                  53
016 04501         54                             ADD     pkey, #1                ; increment key pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
017 04401         55                             ADD     pstate, #1              ; increment state pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
018 06001         56                             SUB     s0, #1                  ; decrement loop counter
019 09513         57                             JUMP    nz, xornext             ; loop back if not done 16 times (128/8)
01A 08080         58                             RET
                  59
                  60     ; get pointer to state
01B 0811E         61                             JUMP    toscratch128
                  62
  0001C           63     inkeytokey:
01C 0A504         64                             IN      pkey, inkey             ; get pointer to plain
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01D 0A404         65                             IN      pstate, key             ; get pointer to state
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                  66
  0001E           67     toscratch128:
01E 00405         68     putnext:                LD      s4, #pkey               ; get plain  byte
                  69               ; save new state byte
01F 04501         70                             ADD     pkey, #1                ; increment key pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
020 04401         71                             ADD     pstate, #1              ; increment state pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
021 06001         72                             SUB     s0, #1                  ; decrement loop counter
022 0951E         73                             JUMP    nz, putnext             ; loop back if not done 16 times (128/8)
023 08080         74                             RET
                  75
  00024           76     statetoout:
024 0A504         77                             IN      pkey, state             ; get pointer to state
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
025 0A404         78                             IN      pstate, result          ; get pointer to result
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                  79
026 0A004         80                             IN      s0, b128                ; set up loop count
027 00405         81     getnext:                LD      s4, #pkey               ; get plain  byte
028 0C440         82                             load      s4, pstate              ; save new state byte
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
029 04501         83                             ADD     pkey, #1                ; increment key pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
02A 04401         84                             ADD     pstate, #1              ; increment state pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
02B 06001         85                             SUB     s0, #1                  ; decrement loop counter
02C 09527         86                             JUMP    nz, getnext             ; loop back if not done 16 times (128/8)
02D 08080         87                             RET
                  88
  0002E           89     nextroundkey:
                  90     ; temp = k[i - 1]
02E 00410         91                             LD      s4, #key + 12           ; get last word of previous key
02F 00511         92                             LD      s5, #key + 13
030 00612         93                             LD      s6, #key + 14
031 00713         94                             LD      s7, #key + 15
                  95
032 0A804         96                             IN      s8, s4                 ; RotWord
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
033 0A405         97                             IN      s4, s5
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
034 0A506         98                             IN      s5, s6
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
035 0A607         99                             IN      s6, s7
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
036 0A708        100                             IN      s7, s8
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
                 101
037 0A804        102                             IN      s8, s4                 ; temp=SubWord( RotWord( temp ) )
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
038 0836D        103                             CALL    sbox
039 0A408        104                             IN      s4, s8
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
                 105
03A 0C4F3        106                             XOR     s4, sf                  ; xor Rcon( i / Nk )
03B 0DF06        107                             SL0     sf                      ; x^(i-1) (i+=1)
03C 09D3E        108                             JUMP    nc, nowrap
03D 03F04        109                             XOR     sf, #g
  0003E          110     nowrap:
03E 0A805        111                             IN      s8, s5                 ; SubWord( RotWord( temp ) )
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
03F 0836D        112                             CALL    sbox
040 0A508        113                             IN      s5, s8
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
                 114
041 0A806        115                             IN      s8, s6                 ; SubWord( RotWord( temp ) )
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
042 0836D        116                             CALL    sbox
043 0A608        117                             IN      s6, s8
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
                 118
044 0A807        119                             IN      s8, s7                 ; SubWord( RotWord( temp ) )
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
045 0836D        120                             CALL    sbox
046 0A708        121                             IN      s7, s8
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
                 122
047 0A504        123                             IN      pkey, key
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                 124
048 0A004        125                             IN      s0, b128
049 00805        126     key96:                  LD      s8, #pkey               ; k[i]=k[i - Nk] ^ temp
04A 0C483        127                             XOR     s4, s8
04B 0C450        128                             load      s4, pkey
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
04C 04501        129                             ADD     pkey, #1
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                 130
04D 00805        131                             LD      s8, #pkey               ; k[i]=k[i - Nk] ^ temp
04E 0C583        132                             XOR     s5, s8
04F 0C550        133                             load      s5, pkey
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
050 04501        134                             ADD     pkey, #1
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                 135
051 00805        136                             LD      s8, #pkey               ; k[i]=k[i - Nk] ^ temp
052 0C683        137                             XOR     s6, s8
053 0C650        138                             load      s6, pkey
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
054 04501        139                             ADD     pkey, #1
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                 140
055 00805        141                             LD      s8, #pkey               ; k[i]=k[i - Nk] ^ temp
056 0C783        142                             XOR     s7, s8
057 0C750        143                             load      s7, pkey
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
058 04501        144                             ADD     pkey, #1
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                 145
059 06004        146                             SUB     s0, #4
05A 09549        147                             JUMP    nz, key96
05B 08080        148                             RET
                 149
                 150     ; Sub bytes of one 32b word pointed at by pKey
  0005C          151     subword:
05C 0A004        152                             IN      s0, 4
05D 00805        153     subword1:               LD      s8, #pkey
05E 0836D        154                             CALL    sbox
05F 0C850        155                             load      s8, pkey
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
060 04501        156                             ADD     pkey, #1
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
061 06001        157                             SUB     s0, #1
062 0955D        158                             JUMP    nz, subword1
063 08080        159                             RET
                 160
                 161     ; SubBytes( state, Nc )
  00064          162     subbytes:
064 0A404        163                             IN      pstate, state          ; get pointer to state
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                 164
065 0A004        165                             IN      s0, b128                ; set up loop count
066 00804        166     sub128:                 LD      s8, #pstate             ; get state byte
067 0836D        167                             CALL    sbox
068 0C840        168                             load      s8, pstate              ; save new state byte
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
069 04401        169                             ADD     pstate, #1              ; increment state pointer
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
06A 06001        170                             SUB     s0, #1                  ; decrement loop counter
06B 09566        171                             JUMP    nz, sub128              ; loop back if not done 16 times (128/8)
06C 08080        172                             RET
                 173
                 174     ; SBox( s )
  0006D          175     sbox:
06D 0E804        176                             OUT     s8, sbox_rom            ; set index
06E 0A804        177                             IN      s8, sbox_rom            ; get EQU
06F 08080        178                             RET
                 179
                 180     ; soload version of SBOX, very slow
  00070          181     sbox_soload:
070 0837A        182                             CALL    mulinverse              ; .    x = sbox_affine(mul_inverse(in));
  00071          183     sboxaffine:
                 184     ; for(counter = 1; counter > (DEGREE - 1)) | (s << 1); s &= MASK;
071 0C893        185                             XOR     s8, s9                  ; in ^= s;
072 0D902        186                             RL      s9
073 0C893        187                             XOR     s8, s9
074 0D902        188                             RL      s9
075 0C893        189                             XOR     s8, s9
076 0D902        190                             RL      s9
077 0C893        191                             XOR     s8, s9
078 0383F        192                             XOR     s8, #63                 ; in ^= 0x63;
079 08080        193                             RET                             ; return in;
                 194     ; }
                 195
                 196     ; MulInverse by trial and error
  0007A          197     mulinverse:
07A 0A900        198                             IN      s9, 0                   ; int result = 0;
07B 0C882        199                             OR      s8, s8                  ; if (in == 0)
07C 08080        200                             RET                             ; return 0;
07D 04901        201     mulinverse1:            ADD     s9, #1                  ; result = 1; result++
07E 08080        202                             RET                             ; result < MOD
07F 0AC08        203                             IN      sc, s8                 ; in
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
080 0AD09        204                             IN      sd, s9                 ; result
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
081 08385        205                             CALL    gmul                    ; gmul( in, result, ...)
082 06E01        206                             SUB     se, #1                  ; == 1
083 0957D        207                             JUMP    nz, mulinverse1         ; == 1?
084 08080        208                             RET                             ; return result
                 209
  00085          210     gmul:
085 0AE00        211                             IN      se, 0
  00086          212     gmul1:
086 0DD0E        213                             SR0     sd
087 0998A        214                             JUMP    c, gmul2                ; ; last bit was 1
088 08080        215                             RET                             ; ; i2 was 0 already ?
089 0818B        216                             JUMP    gmul3
                 217
08A 0CEC3        218     gmul2:                  XOR     se, sc
08B 0DC06        219     gmul3:                  SL0     sc
08C 09D86        220                             JUMP    nc, gmul1
08D 03C04        221                             XOR     sc, #g                  ; ; i1 ^= field;
08E 08186        222                             JUMP    gmul1
                 223
                 224     ;; ShiloadRows( state, Nc )
  0008F          225     shiloadrows:
08F 00705        226                             LD      s7, #state + 1
090 00409        227                             LD      s4, #state + 1 + 4
091 0050D        228                             LD      s5, #state + 1 + 4 + 4
092 00611        229                             LD      s6, #state + 1 + 4 + 4 + 4
093 0C450        230                             load      s4, state + 1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
094 0C590        231                             load      s5, state + 1 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
095 0C6D0        232                             load      s6, state + 1 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
096 0C710        233                             load      s7, state + 1 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
                 234
097 00606        235                             LD      s6, #state + 2
098 0070A        236                             LD      s7, #state + 2 + 4
099 0040E        237                             LD      s4, #state + 2 + 4 + 4
09A 00512        238                             LD      s5, #state + 2 + 4 + 4 + 4
09B 0C460        239                             load      s4, state + 2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
09C 0C5A0        240                             load      s5, state + 2 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
09D 0C6E0        241                             load      s6, state + 2 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
09E 0C720        242                             load      s7, state + 2 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x12, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
                 243
09F 00507        244                             LD      s5, #state + 3
0A0 0060B        245                             LD      s6, #state + 3 + 4
0A1 0070F        246                             LD      s7, #state + 3 + 4 + 4
0A2 00413        247                             LD      s4, #state + 3 + 4 + 4 + 4
0A3 0C470        248                             load      s4, state + 3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0A4 0C5B0        249                             load      s5, state + 3 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0A5 0C6F0        250                             load      s6, state + 3 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0A6 0C730        251                             load      s7, state + 3 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
                 252
0A7 08080        253                             RET
                 254
                 255     ;; MixColumns( state, Nc )
  000A8          256     mixcolumns:
                 257
0A8 00404        258                             LD      s4, #state + 0
0A9 00505        259                             LD      s5, #state + 1
0AA 00606        260                             LD      s6, #state + 2
0AB 00707        261                             LD      s7, #state + 3
0AC 083CD        262                             CALL    mixcolumn
0AD 0C440        263                             load      s4, state + 0
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0AE 0C550        264                             load      s5, state + 1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0AF 0C660        265                             load      s6, state + 2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0B0 0C770        266                             load      s7, state + 3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 267
0B1 00408        268                             LD      s4, #state + 0 + 4
0B2 00509        269                             LD      s5, #state + 1 + 4
0B3 0060A        270                             LD      s6, #state + 2 + 4
0B4 0070B        271                             LD      s7, #state + 3 + 4
0B5 083CD        272                             CALL    mixcolumn
0B6 0C480        273                             load      s4, state + 0 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0B7 0C590        274                             load      s5, state + 1 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0B8 0C6A0        275                             load      s6, state + 2 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0B9 0C7B0        276                             load      s7, state + 3 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 277
0BA 0040C        278                             LD      s4, #state + 0 + 4 + 4
0BB 0050D        279                             LD      s5, #state + 1 + 4 + 4
0BC 0060E        280                             LD      s6, #state + 2 + 4 + 4
0BD 0070F        281                             LD      s7, #state + 3 + 4 + 4
0BE 083CD        282                             CALL    mixcolumn
0BF 0C4C0        283                             load      s4, state + 0 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0C0 0C5D0        284                             load      s5, state + 1 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0C1 0C6E0        285                             load      s6, state + 2 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
0C2 0C7F0        286                             load      s7, state + 3 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 287
0C3 00410        288                             LD      s4, #state + 0 + 4 + 4 + 4
0C4 00511        289                             LD      s5, #state + 1 + 4 + 4 + 4
0C5 00612        290                             LD      s6, #state + 2 + 4 + 4 + 4
0C6 00713        291                             LD      s7, #state + 3 + 4 + 4 + 4
0C7 083CD        292                             CALL    mixcolumn
0C8 0C400        293                             load      s4, state + 0 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x10, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
0C9 0C510        294                             load      s5, state + 1 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
0CA 0C620        295                             load      s6, state + 2 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x12, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
0CB 0C730        296                             load      s7, state + 3 + 4 + 4 + 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
                 297
0CC 08080        298                             RET
                 299
  000CD          300     mixcolumn:
0CD 0A904        301                             IN      s9, s4                 ; ; t = c[0] ^ c[3]
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0CE 0C973        302                             XOR     s9, s7
0CF 0AA05        303                             IN      sa, s5                 ; ; u = c[1] ^ c[2]
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0D0 0CA63        304                             XOR     sa, s6
0D1 0AB09        305                             IN      sb, s9                 ;  ; v = t ^ u
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0D2 0CBA3        306                             XOR     sb, sa
                 307
0D3 0A804        308                             IN      s8, s4                 ; ; c[0] = c[0] ^ v ^ FFmul(0x02, c[0] ^ c[1])
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0D4 0C853        309                             XOR     s8, s5
0D5 0D806        310                             SL0     s8
0D6 09DD8        311                             JUMP    nc, mcf1
0D7 03804        312                             XOR     s8, #g
0D8 0C8B3        313     mcf1:                   XOR     s8, sb
0D9 0C483        314                             XOR     s4, s8
                 315
0DA 0A80A        316                             IN      s8, sa                 ;  ; c[1] = c[1] ^ v ^ FFmul(0x02, u)
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0DB 0D806        317                             SL0     s8
0DC 09DDE        318                             JUMP    nc, mcf2
0DD 03804        319                             XOR     s8, #g
0DE 0C8B3        320     mcf2:                   XOR     s8, sb
0DF 0C583        321                             XOR     s5, s8
                 322
0E0 0A806        323                             IN      s8, s6                 ; ; c[2] = c[2] ^ v ^ FFmul(0x02, c[2] ^ c[3])
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0E1 0C873        324                             XOR     s8, s7
0E2 0D806        325                             SL0     s8
0E3 09DE5        326                             JUMP    nc, mcf3
0E4 03804        327                             XOR     s8, #g
0E5 0C8B3        328     mcf3:                   XOR     s8, sb
0E6 0C683        329                             XOR     s6, s8
                 330
0E7 0A809        331                             IN      s8, s9                 ; ; c[3] = c[3] ^ v ^ FFmul(0x02, t)
W: instruction `INPUT sX, pp' requires operand #2 to be of type(s): number, or port, or expression; while the given operand is of type: register.
0E8 0D806        332                             SL0     s8
0E9 09DEB        333                             JUMP    nc, mcf4
0EA 03804        334                             XOR     s8, #g
0EB 0C8B3        335     mcf4:                   XOR     s8, sb
0EC 0C783        336                             XOR     s7, s8
                 337
0ED 08080        338                             RET
