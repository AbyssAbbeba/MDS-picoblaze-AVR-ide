                   1     ; Compiler test case for Assembler
                   2     ; instruction opcodes
                   3     device kcpsm3
                   4
  00001            5     TESTsymb1    SET        1h
  00011            6     TESTsymb2    SET        0x11
  00001            7     TESTsymb3    SET        1
  00003            8     TESTsymb4    SET        3d
  00004            9     TESTsymb5    EQU        4h
  00005           10     TESTsymb6    EQU        0x05
  00006           11     TESTsymb7    EQU        6
  00007           12     TESTsymb8    EQU        7
  00008           13     TESTsymb9    REG        8h
  00009           14     TESTsymb10    REG        9h
  0000A           15     TESTsymb11    REG        Ah
  0000B           16     TESTsymb12    REG        Bh
  0000C           17     TESTsymb13    DATA        Ch
  00005           18     TESTsymb14    DATA        0x05
  00002           19     TESTsymb15    DATA        2
  00003           20     TESTsymb16    DATA        3d
  00002           21     TESTsymb17    CODE        0h + 2h
  00002           22     TESTsymb18    CODE        2h
  00002           23     TESTsymb19    CODE        2h
  00002           24     TESTsymb20    CODE        2h
                  25     TESTsymb21    DEFINE        3h
                  26     TESTsymb22    DEFINE        4h
                  27     TESTsymb23    DEFINE        5h
                  28     TESTsymb24    DEFINE        TESTsymb1 + TESTsymb11
                  29
                  30
  00000           31               ORG        0x000
000 34002         32               JUMP        Start
001 34000         33               JUMP        0x000
W: instruction `JUMP aaa' requires operand #1 to be of type(s): label; while the given operand is of type: number.
  00002           34     Start:
002 35000         35             JUMP        Z, 0x000
W: instruction `JUMP Z, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
003 35400         36             JUMP        NZ,0x000
W: instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
004 35800         37             JUMP        C, 0x000
W: instruction `JUMP C, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
005 35C00         38             JUMP        NC,0x000
W: instruction `JUMP NC, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: number.
                  39
                  40          ; Arithmetics
006 1880C         41             ADD         testsymb9,#12
007 1A814         42             ADDCY       testsymb9,#20
008 1C8FF         43             SUB         testsymb9,#ffh
009 1E8FF         44             SUBCY       testsymb9,#0xff
00A 14800         45             COMPARE     testsymb9,#0
                  46
00B 19880         47             ADD         testsymb9,testsymb9
00C 1B880         48             ADDCY       testsymb9,testsymb9
00D 1D880         49             SUB         testsymb9,testsymb9
00E 1F890         50             SUBCY       testsymb9,testsymb10
00F 158A0         51             COMPARE     testsymb9,testsymb11
                  52
                  53     ; Logical
010 00801         54             LOAD      testsymb9,#01h
011 0A800         55             AND       testsymb9,#0
012 0C801         56             OR        testsymb9,#1
013 0E802         57             XOR       testsymb9,#2
014 12803         58             TEST      testsymb9,#3
                  59
015 01880         60             LOAD      testsymb9,testsymb9
016 0B880         61             AND       testsymb9,testsymb9
017 0D880         62             OR        testsymb9,testsymb9
018 0F880         63             XOR       testsymb9,testsymb9
019 13880         64             TEST      testsymb9,testsymb9
                  65     ; Shift and rotate
01A 2090E         66             SR0       TESTsymb10
01B 2090F         67             SR1       TESTsymb10
01C 2090A         68             SRX        TESTsymb10
01D 20908         69             SRA        TESTsymb10
01E 2090C         70             RR         TESTsymb10
                  71
01F 20906         72             SL0       TESTsymb10
020 20907         73             SL1       TESTsymb10
021 20904         74             SLX       TESTsymb10
022 20900         75             SLA       TESTsymb10
023 20902         76             RL        TESTsymb10
                  77         ; Others
024 3002D         78             CALl      Podprog
025 3102D         79             CALL      Z,Podprog
026 3142D         80             CALL      NZ,Podprog
027 3182D         81             CALL      C,Podprog
028 31C2D         82             CALL      NC,Podprog
                  83
029 2E80C         84             STORE     TESTsymb9,TESTsymb13
02A 2F9A0         85             STORE     TESTsymb10,@10
W: instruction `STORE sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
02B 06A0C         86             FETCH     TESTsymb11,TESTsymb13
02C 07B50         87             FETCH     TESTsymb12,@5
W: instruction `FETCH sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
                  88
  0002D           89     Podprog:
02D 2A000         90             RETURN
02E 2B000         91             RETURN    Z
02F 2B400         92             RETURN    NZ
030 2B800         93             RETURN    C
031 2BC00         94             RETURN    NC
                  95
                  96
                  97       ;  JUMP aaa ADD sX,kk LOAD sX,kk SR0 sX
                  98     ;JUMP Z,aaa ADDCY sX,kk AND sX,kk SR1 sX
                  99     ;JUMP NZ,aaa SUB sX,kk OR sX,kk SRX sX
                 100     ;JUMP C,aaa SUBCY sX,kk XOR sX,kk SRA sX
                 101     ;JUMP NC,aaa COMPARE sX,kk TEST sX,kk RR sX
                 102     ;CALL aaa ADD sX,sY LOAD sX,sY SL0 sX
                 103     ;CALL Z,aaa ADDCY sX,sY AND sX,sY SL1 sX
                 104     ;CALL NZ,aaa SUB sX,sY OR sX,sY SLX sX
                 105     ;CALL C,aaa SUBCY sX,sY XOR sX,sY SLA sX
                 106     ;CALL NC,aaa COMPARE sX,sY TEST sX,sY RL sX
