                   1     ; Compiler test case for Assembler
                   2
                   3
                   4     ;=========================================================
                   5     ; routine: mult_soft
                   6     ;  function: 8-bit unsigned multiplier using
                   7     ;           shift-and-add algorithm
                   8     ;  input register:
                   9     ;     s3: multiplicand
                  10     ;     s4: multiplier
                  11     ;  output register:
                  12     ;     s5: upper byte of product
                  13     ;     s6: lower byte of product
                  14     ;  temp register: i
                  15     ;========================================================
                  16
                  17     device kcpsm3
                  18
                  19
                  20
                  21     mult_soft:
000 01500         22        load s5, 00              ;clear s5
001 01680         23        load s6, 08                 ;initialize loop index
                  24     mult_loop:
002 2040E         25        sr0  s4                     ;shift lsb to carry
003 35C05         26        jump nc, shift_prod       ;lsb is 0
004 19530         27        add s5, s3                    ;lsb is 1
                  28     shift_prod:
005 20508         29        sra s5                     ;shift upper byte right,
                  30                                       ;carry to MSB, LSB to carry
006 20608         31        sra s6                     ;shift lower byte right,
                  32                                      ;lsb of s5 to MSB of s6
007 1D610         33        sub s6, 01                ;dec loop index
008 35402         34        jump nz, mult_loop       ;repeat until i=0
009 2A000         35        return
                  36
                  37     ; UART Transmit Example
                  38     ;
00A 011D0         39     start: LOAD s1, 45 ;ASCII "E".
W: value out of range: 45, allowed range is [0,15] (trimmed to 4 bits) which makes it 13
00B 3002B         40     CALL xmit
                  41
                  42     ;Send character.
00C 011D0         43     LOAD s1, 45 ;ASCII "E".
00D 3002B         44     CALL xmit
                  45
                  46     ;Send character.
00E 01110         47     LOAD s1, 33 ;ASCII "3".
W: value out of range: 33, allowed range is [0,15] (trimmed to 4 bits) which makes it 1
00F 3002B         48     CALL xmit
                  49
                  50     ;Send character.
010 01160         51     LOAD s1, 38 ;ASCII "8".
W: value out of range: 38, allowed range is [0,15] (trimmed to 4 bits) which makes it 6
011 3002B         52     CALL xmit
                  53
                  54     ;Send character.
012 011F0         55     LOAD s1, 31 ;ASCII "1".
W: value out of range: 31, allowed range is [0,15] (trimmed to 4 bits) which makes it 15
013 3002B         56     CALL xmit
                  57
                  58     ;Send character.
014 011E0         59     LOAD s1, 30 ;ASCII "0".
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14
015 3002B         60     CALL xmit
                  61
                  62     ;Send character.
016 01140         63     LOAD s1, 20 ;ASCII " ".
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4
017 3002B         64     CALL xmit
                  65
                  66     ;Send character.
018 01140         67     LOAD s1, 52 ;ASCII "R".
W: value out of range: 52, allowed range is [0,15] (trimmed to 4 bits) which makes it 4
019 3002B         68     CALL xmit
                  69
                  70     ;Send character.
01A 011B0         71     LOAD s1, 75 ;ASCII "u".
W: value out of range: 75, allowed range is [0,15] (trimmed to 4 bits) which makes it 11
01B 3002B         72     CALL xmit
                  73
                  74     ;Send character.
01C 011C0         75     LOAD s1, 6Ch ;ASCII "l".
W: value out of range: 108, allowed range is [0,15] (trimmed to 4 bits) which makes it 12
01D 3002B         76     CALL xmit
                  77
                  78     ;Send character.
01E 01110         79     LOAD s1, 65 ;ASCII "e".
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1
01F 3002B         80     CALL xmit
                  81     ;Send character.
                  82
020 01190         83     LOAD s1, 73 ;ASCII "s".
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9
021 3002B         84     CALL xmit
                  85
                  86     ;Send character.
022 01150         87     LOAD s1, 21 ;ASCII "!".
W: value out of range: 21, allowed range is [0,15] (trimmed to 4 bits) which makes it 5
023 3002B         88     CALL xmit
                  89
                  90     ;Send character.
024 01150         91     LOAD s1, 21 ;ASCII "!".
025 3002B         92     CALL xmit
                  93
                  94     ;Send character.
026 01150         95     LOAD s1, 21 ;ASCII "!".
027 3002B         96     CALL xmit
                  97
                  98     ;Send character.
028 01140         99     LOAD s1, 20 ;ASCII " ".
029 3002B        100     CALL xmit
                 101
                 102     ;Send character.
02A 3400A        103     JUMP start
                 104
                 105     ; Routine to transmit data via RS-232
                 106     ; First check UART status.
02B 04000        107     xmit: INPUT s0, 00 ;read uart status.
02C 0B000        108             AND s0, 80 ;Buffer full mask.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0
02D 3542B        109             JUMP NZ, xmit ;Poll if buffer is full.
                 110     ; Buffer is not full, transmit byte in s1
02E 2C100        111     OUTPUT s1, 00 ;Ship byte.
02F 2A000        112     RETURN
                 113
                 114
                 115
                 116
                 117     END
                 118
                 119
