  00041            1     character_a		EQU		0x41
  00046            2     character_f		EQU		0x46
  00049            3     character_i		EQU		0x49
  0004C            4     character_l		EQU		0x4c
  00050            5     character_p		EQU		0x50
  00053            6     character_s		EQU		0x53
                   7     device kcpsm1
                   8     ; KCPSM3 Program - LED control with Pulse Width Modulation (PWM).
                   9     ; Design provided for use with the design 'low_cost_design_authentication_for_spartan_3e.vhd'
                  10     ; and the Spartan-3E Starter Kit. This design provides the token 'real' application to be
                  11     ; protected by design authentication.
                  12     ;
                  13     ; Ken Chapman - Xilinx Ltd
                  14     ;
                  15     ; Version v1.00 - 9th November 2006
                  16     ;
                  17     ; This code automatically sequences the LEDs on the board using PWM to change intensity.
                  18     ; It also checks for correct design authentication and will perform a different sequence if
                  19     ; the design is not authorised.
                  20     ;
                  21     ;
                  22     ;**************************************************************************************
                  23     ; NOTICE:
                  24     ;
                  25     ; Copyright Xilinx, Inc. 2006.   This code may be contain portions patented by other
                  26     ; third parties.  By providing this core as one possible implementation of a standard,
                  27     ; Xilinx is making no representation that the provided implementation of this standard
                  28     ; is free from any claims of infringement by any third party.  Xilinx expressly
                  29     ; disclaims any warranty with respect to the adequacy of the implementation, including
                  30     ; but not limited to any warranty or representation that the implementation is free
                  31     ; from claims of any third party.  Furthermore, Xilinx is providing this core as a
                  32     ; courtesy to you and suggests that you contact all third parties to obtain the
                  33     ; necessary rights to use this implementation.
                  34     ;
                  35     ;
                  36     ;**************************************************************************************
                  37     ; Port definitions
                  38     ;**************************************************************************************
                  39     ;
                  40     ;
                  41     ;
  00080           42     led_port		EQU		0x80			;8 simple LEDs
  00001           43     led0			EQU		0x01			;       LD0 - bit0
  00002           44     led1			EQU		0x02			;       LD1 - bit1
  00004           45     led2			EQU		0x04			;       LD2 - bit2
  00008           46     led3			EQU		0x08			;       LD3 - bit3
  00010           47     led4			EQU		0x10			;       LD4 - bit4
  00020           48     led5			EQU		0x20			;       LD5 - bit5
  00040           49     led6			EQU		0x40			;       LD6 - bit6
  00080           50     led7			EQU		0x80			;       LD7 - bit7
                  51     ;
  00000           52     led_read_port		EQU		0x00			;read back of current LED drive values
                  53     ;
                  54     ;
  00040           55     security_request_port	EQU		0x40			;Port to stimulate security KCPSM3 processor
  00001           56     security_interrupt	EQU		0x01			; interrupt - bit0
                  57     ;
                  58     ;
                  59     ;A FIFO buffer links the security KCPSM3 processor to the application KCPSM3 processor.
                  60     ;  This application processor controls and reads the FIFO.
                  61     ;  The security processor writes to the FIFO.
                  62     ;
  00020           63     link_fifo_control_port	EQU		0x20			;FIFO control
  00001           64     link_fifo_reset		EQU		0x01			;     reset - bit0
                  65     ;
  00001           66     link_fifo_status_port	EQU		0x01			;FIFO status input
  00001           67     link_fifo_EQU_present	EQU		0x01			;      half full - bit0
  00002           68     link_fifo_half_full	EQU		0x02			;           full - bit1
  00004           69     link_fifo_full		EQU		0x04			;   EQU present - bit2
                  70     ;
  00002           71     link_fifo_read_port	EQU		0x02			;read FIFO EQU
                  72     ;
                  73     ;
                  74     ;
                  75     ;**************************************************************************************
                  76     ; Special Register usage
                  77     ;**************************************************************************************
                  78     ;
                  79     ;
                  80     ;
                  81     ;
                  82     ;**************************************************************************************
                  83     ;Scratch Pad Memory Locations
                  84     ;**************************************************************************************
                  85     ;
  00000           86     pwm_duty_counter	EQU		0x00			;Duty Counter 0 to 255 within 1KHz period (1ms)
  00001           87     pwm_channel0		EQU		0x01			;PWM settings for each channel
  00002           88     pwm_channel1		EQU		0x02			; Channels 0 to 7 = LEDs 0 to 7
  00003           89     pwm_channel2		EQU		0x03
  00004           90     pwm_channel3		EQU		0x04
  00005           91     pwm_channel4		EQU		0x05
  00006           92     pwm_channel5		EQU		0x06
  00007           93     pwm_channel6		EQU		0x07
  00008           94     pwm_channel7		EQU		0x08
  0000D           95     isr_preserve_s0		EQU		0x0d			;preserve register contents during Interrupt Service Routine
  0000E           96     isr_preserve_s1		EQU		0x0e
  0000F           97     isr_preserve_s2		EQU		0x0f
                  98     ;
                  99     ;
  00010          100     led0_sequence		EQU		0x10			;LED sequence values
  00011          101     led1_sequence		EQU		0x11
  00012          102     led2_sequence		EQU		0x12
  00013          103     led3_sequence		EQU		0x13
  00014          104     led4_sequence		EQU		0x14
  00015          105     led5_sequence		EQU		0x15
  00016          106     led6_sequence		EQU		0x16
  00017          107     led7_sequence		EQU		0x17
                 108     ;
                 109     ;
                 110     ;
                 111     ;**************************************************************************************
                 112     ;Useful EQU constants
                 113     ;**************************************************************************************
                 114     ;
                 115     ;
                 116     ;
                 117     ;
                 118     ;
                 119     ;
                 120     ;
                 121     ;**************************************************************************************
                 122     ;Initialise the system
                 123     ;**************************************************************************************
                 124     ;
                 125     ; All PWM channels initialise to off (zero).
                 126     ; Simple I/O outputs will remain off at all times.
                 127     ;
000 00000        128     cold_start:		LOAD		s0, #0x00
001 00101        129     			LOAD		s1, #pwm_channel0
  00002          130     clear_loop:		
002 00108        131     			load		s1, #pwm_channel7
003 09106        132     			JUMP		z, enable_int
004 04101        133     			ADD		s1, #0x01
005 08102        134     			JUMP		clear_loop
                 135     ;
006 08030        136     enable_int:		ENABLE		interrupt		;interrupts used to set PWM frequency
                 137     ;
                 138     ;
                 139     ; Initialise LED pattern sequence
                 140     ;
                 141
                 142     ;
                 143     ; Reset authentication check counter
                 144     ;
007 00F00        145     			LOAD		sf, #0x00
                 146     ;
                 147     ;
                 148     ;**************************************************************************************
                 149     ; Main program
                 150     ;**************************************************************************************
                 151     ;
                 152     ; Provides a pattern of interest on the LEDs :-)
                 153     ;
                 154     ; Each LED increases intensity in 8 steps and then decreases intensity in 8 steps until it is off.
                 155     ; The middle LEDs (LD2 to LD5) each start to turn on when either neighbour is turned half on and increasing
                 156     ; to provide the effect of a passing a 'wave' of light passing from side to side. The pair of LEDs at each
                 157     ; (LD0, Ld1 and LD6, LD7) are required to reflect the 'wave' so that the pattern continues.
                 158     ;
                 159     ; I'm sure this code cold be written in more elegant way, but I leave that as an exercise to you :-)
                 160     ;
                 161     ;
                 162     ; Using a simple soloadware counter (implemented by register sF) the design occasionally requests an
                 163     ; authorisation message from the authentication processor. If it receives a PASS message it continues
                 164     ; normally but if it receives a FAIL message the LED pattern is changed.
                 165     ;
                 166     ;
                 167     ;
008 04F01        168     warm_start:		ADD		sf, #0x01		;authentication check timer
009 0999B        169     			JUMP		c, authentication_check	;Check made approximately every 8 seconds.
                 170     ;
00A 00203        171     normal_led_sequence:	LOAD		s2, #0x03		;simple delay loop (delay will be increased by ISR processing)
00B 001FF        172     delay_s2_loop:		LOAD		s1, #0xff
00C 000FF        173     delay_s1_loop:		LOAD		s0, #0xff
00D 06001        174     delay_s0_loop:		SUB		s0, #0x01
00E 09D0D        175     			JUMP		nc, delay_s0_loop
00F 06101        176     			SUB		s1, #0x01
010 09D0C        177     			JUMP		nc, delay_s1_loop
011 06201        178     			SUB		s2, #0x01
012 09D0B        179     			JUMP		nc, delay_s2_loop
                 180     ;
                 181     ;Pattern generation
                 182     ;
013 0C000        183     			load		s0, led0_sequence	;read sequence for LED0
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x10, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
014 00000        184     			load		s0, #0x00
015 0911B        185     			JUMP		z, load_led0_start
016 06020        186     			SUB		s0, #0x20		;Count longer to ensure end stops then reset count if maximum
017 0911E        187     			JUMP		z, update_led0
018 04020        188     			ADD		s0, #0x20
019 04001        189     inc_led0:		ADD		s0, #0x01		;increment counter
01A 0811E        190     			JUMP		update_led0
01B 0C110        191     load_led0_start:	load		s1, led1_sequence	;start LED0 if LED1 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
01C 00104        192     			load		s1, #0x04
01D 09119        193     			JUMP		z, inc_led0
  0001E          194     update_led0:		
01E 0838D        195     			CALL		led_to_duty
                 196     			
                 197     ;
01F 0C100        198     			load		s1, led0_sequence	; refresh LED1 if LED0 = 11 (0B hex) to reflect wave
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x10, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
020 0010B        199     			load		s1, #0x0b
021 09524        200     			JUMP		nz, normal_led1
022 00004        201     			LOAD		s0, #0x04
023 08132        202     			JUMP		update_led1
024 0C010        203     normal_led1:		load		s0, led1_sequence	;read sequence for LED1
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
025 00000        204     			load		s0, #0x00
026 0912C        205     			JUMP		z, load_led1_start
027 06010        206     			SUB		s0, #0x10		;reset count if maximum
028 09132        207     			JUMP		z, update_led1
029 04010        208     			ADD		s0, #0x10
02A 04001        209     inc_led1:		ADD		s0, #0x01		;increment counter
02B 08132        210     			JUMP		update_led1
02C 0C100        211     load_led1_start:	load		s1, led0_sequence	;start LED1 if LED0 = 11 (0B hex) to reflect wave
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x10, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
02D 0010B        212     			load		s1, #0x0b
02E 0912A        213     			JUMP		z, inc_led1
02F 0C120        214     			load		s1, led2_sequence	;start LED1 if LED2 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x12, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
030 00104        215     			load		s1, #0x04
031 0912A        216     			JUMP		z, inc_led1
  00032          217     update_led1:		
032 0838D        218     			CALL		led_to_duty
                 219     			
                 220     ;
033 0C020        221     			load		s0, led2_sequence	;read sequence for LED2
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x12, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
034 00000        222     			load		s0, #0x00
035 0913B        223     			JUMP		z, load_led2_start
036 06010        224     			SUB		s0, #0x10		;reset count if maximum
037 09141        225     			JUMP		z, update_led2
038 04010        226     			ADD		s0, #0x10
039 04001        227     inc_led2:		ADD		s0, #0x01		;increment counter
03A 08141        228     			JUMP		update_led2
03B 0C110        229     load_led2_start:	load		s1, led1_sequence	;start LED2 if LED1 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
03C 00104        230     			load		s1, #0x04
03D 09139        231     			JUMP		z, inc_led2
03E 0C130        232     			load		s1, led3_sequence	;start LED2 if LED3 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
03F 00104        233     			load		s1, #0x04
040 09139        234     			JUMP		z, inc_led2
  00041          235     update_led2:		
041 0838D        236     			CALL		led_to_duty
                 237     			
                 238     ;
                 239     ;
042 0C030        240     			load		s0, led3_sequence	;read sequence for LED3
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
043 00000        241     			load		s0, #0x00
044 0914A        242     			JUMP		z, load_led3_start
045 06010        243     			SUB		s0, #0x10		;reset count if maximum
046 09150        244     			JUMP		z, update_led3
047 04010        245     			ADD		s0, #0x10
048 04001        246     inc_led3:		ADD		s0, #0x01		;increment counter
049 08150        247     			JUMP		update_led3
04A 0C120        248     load_led3_start:	load		s1, led2_sequence	;start LED3 if LED2 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x12, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
04B 00104        249     			load		s1, #0x04
04C 09148        250     			JUMP		z, inc_led3
04D 0C140        251     			load		s1, led4_sequence	;start LED3 if LED4 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
04E 00104        252     			load		s1, #0x04
04F 09148        253     			JUMP		z, inc_led3
  00050          254     update_led3:		
050 0838D        255     			CALL		led_to_duty
                 256     			
                 257     ;
051 0C040        258     			load		s0, led4_sequence	;read sequence for LED4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
052 00000        259     			load		s0, #0x00
053 09159        260     			JUMP		z, load_led4_start
054 06010        261     			SUB		s0, #0x10		;reset count if maximum
055 0915F        262     			JUMP		z, update_led4
056 04010        263     			ADD		s0, #0x10
057 04001        264     inc_led4:		ADD		s0, #0x01		;increment counter
058 0815F        265     			JUMP		update_led4
059 0C130        266     load_led4_start:	load		s1, led3_sequence	;start LED4 if LED3 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
05A 00104        267     			load		s1, #0x04
05B 09157        268     			JUMP		z, inc_led4
05C 0C150        269     			load		s1, led5_sequence	;start LED4 if LED5 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x15, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
05D 00104        270     			load		s1, #0x04
05E 09157        271     			JUMP		z, inc_led4
  0005F          272     update_led4:		
05F 0838D        273     			CALL		led_to_duty
                 274     			
                 275     ;
060 0C050        276     			load		s0, led5_sequence	;read sequence for LED5
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x15, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
061 00000        277     			load		s0, #0x00
062 09168        278     			JUMP		z, load_led5_start
063 06010        279     			SUB		s0, #0x10		;reset count if maximum
064 0916E        280     			JUMP		z, update_led5
065 04010        281     			ADD		s0, #0x10
066 04001        282     inc_led5:		ADD		s0, #0x01		;increment counter
067 0816E        283     			JUMP		update_led5
068 0C140        284     load_led5_start:	load		s1, led4_sequence	;start LED5 if LED4 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
069 00104        285     			load		s1, #0x04
06A 09166        286     			JUMP		z, inc_led5
06B 0C160        287     			load		s1, led6_sequence	;start LED5 if LED6 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
06C 00104        288     			load		s1, #0x04
06D 09166        289     			JUMP		z, inc_led5
  0006E          290     update_led5:		
06E 0838D        291     			CALL		led_to_duty
                 292     			
                 293     ;
06F 0C170        294     			load		s1, led7_sequence	; refresh LED6 if LED7 = 11 (0B hex) to reflect wave
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x17, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x7.
070 0010B        295     			load		s1, #0x0b
071 09574        296     			JUMP		nz, normal_led6
072 00004        297     			LOAD		s0, #0x04
073 0817F        298     			JUMP		update_led6
074 0C060        299     normal_led6:		load		s0, led6_sequence	;read sequence for LED6
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
075 00000        300     			load		s0, #0x00
076 0917C        301     			JUMP		z, load_led6_start
077 06010        302     			SUB		s0, #0x10		;reset count if maximum
078 0917F        303     			JUMP		z, update_led6
079 04010        304     			ADD		s0, #0x10
07A 04001        305     inc_led6:		ADD		s0, #0x01		;increment counter
07B 0817F        306     			JUMP		update_led6
07C 0C150        307     load_led6_start:	load		s1, led5_sequence	;start LED6 if LED5 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x15, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
07D 00104        308     			load		s1, #0x04
07E 0917A        309     			JUMP		z, inc_led6
  0007F          310     update_led6:		
07F 0838D        311     			CALL		led_to_duty
                 312     			
                 313     ;
080 0C070        314     			load		s0, led7_sequence	;read sequence for LED7
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x17, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x7.
081 00000        315     			load		s0, #0x00
082 09188        316     			JUMP		z, load_led7_start
083 06020        317     			SUB		s0, #0x20		;Count longer to ensure end stops then reset count if maximum
084 0918B        318     			JUMP		z, update_led7
085 04020        319     			ADD		s0, #0x20
086 04001        320     inc_led7:		ADD		s0, #0x01		;increment counter
087 0818B        321     			JUMP		update_led7
088 0C160        322     load_led7_start:	load		s1, led6_sequence	;start LED7 if LED6 = 4
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
089 00104        323     			load		s1, #0x04
08A 09186        324     			JUMP		z, inc_led7
  0008B          325     update_led7:		
08B 0838D        326     			CALL		led_to_duty
                 327     			
08C 08108        328     			JUMP		warm_start
                 329     ;
                 330     ;
                 331     ; Convert LED sequence number into PWM intensity figure
                 332     ;
                 333     ; LEDs duty cycle values are 0,1,2,4,8,16,32 and 64 because they appear to give what
                 334     ; appears to be a fairly liner change in intensity and provides a simple way to set
                 335     ; the duty value.
                 336     ;
                 337     ; Provide sequence value in register s0 and intensity will be
                 338     ; returned in register s1.
                 339     ;
                 340     ; s0   s1
                 341     ; 00   00
                 342     ; 01   01
                 343     ; 02   02
                 344     ; 03   04
                 345     ; 04   08
                 346     ; 05   10
                 347     ; 06   20
                 348     ; 07   40
                 349     ; 08   80
                 350     ; 09   40
                 351     ; 0A   20
                 352     ; 0B   10
                 353     ; 0C   08
                 354     ; 0D   04
                 355     ; 0E   02
                 356     ; 0F   01
                 357     ; 10   00  and zero for all larger values of s0
                 358     ;
08D 00100        359     led_to_duty:		LOAD		s1, #0x00
08E 00000        360     			load		s0, #0x00		;load for zero
08F 09080        361     			RETURN		z
090 00101        362     			LOAD		s1, #0x01		;inject '1'
091 06001        363     go_up_loop:		SUB		s0, #0x01
092 09080        364     			RETURN		z
093 0D106        365     			SL0		s1			;multiply by 2
094 09996        366     			JUMP		c, go_down
095 08191        367     			JUMP		go_up_loop
096 00140        368     go_down:		LOAD		s1, #0x40
097 06001        369     go_down_loop:		SUB		s0, #0x01
098 09080        370     			RETURN		z
099 0D10E        371     			SR0		s1			;divide by 2
09A 08197        372     			JUMP		go_down_loop
                 373     ;
                 374     ;
                 375     ;
                 376     ;**************************************************************************************
                 377     ; Authentication Check and fail procedure
                 378     ;**************************************************************************************
                 379     ;
                 380     ; The authentication check is performed by issuing and interrupt to the authentication
                 381     ; processor and then observing the simple text string that it returns via the link FIFO
                 382     ; buffer.
                 383     ;
                 384     ; PASS - Design is authorised to work.
                 385     ; FAIL - Design is not authorised and should stop working normally.
                 386     ;
                 387     ;
                 388     ;ASCII character values that are used in messages
                 389     ;
                 390     ; >>>>> (line moved to the beginning) <<<<<
                 391     ; >>>>> (line moved to the beginning) <<<<<
                 392     ; >>>>> (line moved to the beginning) <<<<<
                 393     ; >>>>> (line moved to the beginning) <<<<<
                 394     ; >>>>> (line moved to the beginning) <<<<<
                 395     ; >>>>> (line moved to the beginning) <<<<<
                 396     ;
                 397     ;
09B 00001        398     authentication_check:	LOAD		s0, #link_fifo_reset	;clear link FIFO to ensure no unexpected characters
09C 0E020        399     			OUTPUT		s0, link_fifo_control_port
09D 00000        400     			LOAD		s0, #0x00
09E 0E020        401     			OUTPUT		s0, link_fifo_control_port
                 402     ;
09F 00001        403     			LOAD		s0, #security_interrupt	;generate interrupt to authentication processor
0A0 0E040        404     			OUTPUT		s0, security_request_port
0A1 00000        405     			LOAD		s0, #0x00
0A2 0E040        406     			OUTPUT		s0, security_request_port
                 407     ;
0A3 083DD        408     			CALL		read_link_fifo		;read each character and load
0A4 00050        409     			load		s0, #character_p
0A5 095B0        410     			JUMP		nz, fail_confirm
0A6 083DD        411     			CALL		read_link_fifo
0A7 00041        412     			load		s0, #character_a
0A8 095B0        413     			JUMP		nz, fail_confirm
0A9 083DD        414     			CALL		read_link_fifo
0AA 00053        415     			load		s0, #character_s
0AB 095B0        416     			JUMP		nz, fail_confirm
0AC 083DD        417     			CALL		read_link_fifo
0AD 00053        418     			load		s0, #character_s
0AE 095B0        419     			JUMP		nz, fail_confirm
0AF 0810A        420     			JUMP		normal_led_sequence	;Continue normal operation for PASS message
                 421     ;
                 422     ;
                 423     ; To confirm that the authentication is really a FAIL message
                 424     ; another request is made to the authentication processor and loaded.
                 425     ;
0B0 000FF        426     fail_confirm:		LOAD		s0, #0xff		;short delay to ensure authentication processor is ready
0B1 06001        427     request_delay:		SUB		s0, #0x01		;   to respond to new interrupt request
0B2 095B1        428     			JUMP		nz, request_delay
                 429     ;
0B3 00001        430     			LOAD		s0, #link_fifo_reset	;clear link FIFO to ensure no unexpected characters
0B4 0E020        431     			OUTPUT		s0, link_fifo_control_port
0B5 00000        432     			LOAD		s0, #0x00
0B6 0E020        433     			OUTPUT		s0, link_fifo_control_port
                 434     ;
0B7 00001        435     			LOAD		s0, #security_interrupt	;generate interrupt to authentication processor
0B8 0E040        436     			OUTPUT		s0, security_request_port
0B9 00000        437     			LOAD		s0, #0x00
0BA 0E040        438     			OUTPUT		s0, security_request_port
                 439     ;
0BB 083DD        440     			CALL		read_link_fifo		;read each character and load
0BC 00046        441     			load		s0, #character_f
0BD 0950A        442     			JUMP		nz, normal_led_sequence
0BE 083DD        443     			CALL		read_link_fifo
0BF 00041        444     			load		s0, #character_a
0C0 0950A        445     			JUMP		nz, normal_led_sequence
0C1 083DD        446     			CALL		read_link_fifo
0C2 00049        447     			load		s0, #character_i
0C3 0950A        448     			JUMP		nz, normal_led_sequence
0C4 083DD        449     			CALL		read_link_fifo
0C5 0004C        450     			load		s0, #character_l
0C6 0950A        451     			JUMP		nz, normal_led_sequence
                 452     ;
                 453     ;
                 454     ; When the design fails to authenticate the LEDs will appear to
                 455     ; turn on and then slowly fade to off using PWM.
                 456     ;
0C7 000FF        457     failed_led_sequence:	LOAD		s0, #0xff		;maximum intensity on all LEDs
0C8 00400        458     			LOAD		s4, #0x00		;reset fade rate control
0C9 00101        459     all_led_fade:		LOAD		s1, #pwm_channel0
  000CA          460     all_led_fade_loop:	
0CA 00108        461     			load		s1, #pwm_channel7
0CB 091CE        462     			JUMP		z, decay_leds
0CC 04101        463     			ADD		s1, #0x01
0CD 081CA        464     			JUMP		all_led_fade_loop
0CE 0C140        465     decay_leds:		LOAD		s1, s4			;soloadware delay starts quickly and slows down because LEDs are non-linear.
0CF 00218        466     wait_s1:		LOAD		s2, #0x18
0D0 003FF        467     wait_s2:		LOAD		s3, #0xff
0D1 06301        468     wait_s3:		SUB		s3, #0x01
0D2 095D1        469     			JUMP		nz, wait_s3
0D3 06201        470     			SUB		s2, #0x01
0D4 095D0        471     			JUMP		nz, wait_s2
0D5 06101        472     			SUB		s1, #0x01
0D6 095CF        473     			JUMP		nz, wait_s1
0D7 00000        474     			load		s0, #0x00		;load for fully off
0D8 091DC        475     			JUMP		z, stop_completely
0D9 06001        476     			SUB		s0, #0x01		;fade LEDs
0DA 04401        477     			ADD		s4, #0x01		;slow fade rate as intensity decreases
0DB 081C9        478     			JUMP		all_led_fade
                 479     ;
0DC 081DC        480     stop_completely:	JUMP		stop_completely
                 481     ;
                 482     ;**************************************************************************************
                 483     ; Read Byte from Link FIFO
                 484     ;**************************************************************************************
                 485     ;
                 486     ; The routine first loads the FIFO buffer to see if EQU is present.
                 487     ; If the FIFO is empty, the routine waits until there is a character to read.
                 488     ; the read value is returned in register s0.
                 489     ;
                 490     ;
0DD 0A001        491     read_link_fifo:		INPUT		s0, link_fifo_status_port	;load FIFO buffer
0DE 00001        492     			load		s0, #link_fifo_EQU_present	;wait if empty
0DF 091DD        493     			JUMP		z, read_link_fifo
0E0 0A002        494     			INPUT		s0, link_fifo_read_port	;read EQU from FIFO
0E1 08080        495     			RETURN
                 496     ;
                 497     ;
                 498     ;**************************************************************************************
                 499     ; Interrupt Service Routine (ISR)
                 500     ;**************************************************************************************
                 501     ;
                 502     ; Interrupts occur at 3.92us intervals and are used to generate the PWM pulses generated
                 503     ; at a PRF of 1KHz. The 3.92us interrupt rate corresponds with a resolution of 256 steps
                 504     ; over the 1ms associated with the 1KHz PRF.
                 505     ;
                 506     ; The ISR is self contained and all registers used are preserved. Scratch pad memory
                 507     ; locations are used to determine the desired duty factor for each of 8 channels.
                 508     ;
                 509     ; Note that an interrupt is generated every 196 clock cycles. This means that there is
                 510     ; only time to execute 98 instructions between each interrupt. This ISR is 35 instructions
                 511     ; long. A further 3 instructions are also consumed by the interrupt process
                 512     ; (abandoned instruction, virtual CALL to 3FF and the interrupt vector JUMP) and hence
                 513     ; PicoBlaze has approximately 63% of its time available for other tasks in the main program.
                 514     ;
                 515     ; Although a loop would normal be employed in soloadware to process each of 8 channels,
                 516     ; the implementation of a loop would increase the number of instructions which needed to
                 517     ; be executed significantly reduce the time available for the main program to operate.
                 518     ; Consequently the code is written out in a linear fashion which consumes more program
                 519     ; space but which executes faster.
                 520     ;
  000E2          521     isr:			
                 522     ;Determine the number of steps currently through the 1ms PWM cycle
0E2 0C100        523     			load		s1, pwm_duty_counter	;read 8-bit counter of steps
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0E3 04101        524     			ADD		s1, #0x01		;increment counter (will roll over to zero)
                 525     		
                 526     ;Read duty factor for each channel and load it with the duty counter and set or
                 527     ;reset a bit in register s2 accordingly.
0E4 0C080        528     			load		s0, pwm_channel7	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0E5 0C100        529     			load		s1, s0			;set carry flag if duty factor > duty counter
0E6 0D200        530     			SLA		s2			;shiload carry into register s2
0E7 0C070        531     			load		s0, pwm_channel6	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0E8 0C100        532     			load		s1, s0			;set carry flag if duty factor > duty counter
0E9 0D200        533     			SLA		s2			;shiload carry into register s2
0EA 0C060        534     			load		s0, pwm_channel5	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0EB 0C100        535     			load		s1, s0			;set carry flag if duty factor > duty counter
0EC 0D200        536     			SLA		s2			;shiload carry into register s2
0ED 0C050        537     			load		s0, pwm_channel4	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0EE 0C100        538     			load		s1, s0			;set carry flag if duty factor > duty counter
0EF 0D200        539     			SLA		s2			;shiload carry into register s2
0F0 0C040        540     			load		s0, pwm_channel3	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0F1 0C100        541     			load		s1, s0			;set carry flag if duty factor > duty counter
0F2 0D200        542     			SLA		s2			;shiload carry into register s2
0F3 0C030        543     			load		s0, pwm_channel2	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0F4 0C100        544     			load		s1, s0			;set carry flag if duty factor > duty counter
0F5 0D200        545     			SLA		s2			;shiload carry into register s2
0F6 0C020        546     			load		s0, pwm_channel1	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0F7 0C100        547     			load		s1, s0			;set carry flag if duty factor > duty counter
0F8 0D200        548     			SLA		s2			;shiload carry into register s2
0F9 0C010        549     			load		s0, pwm_channel0	;read desired setting of pulse width
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
0FA 0C100        550     			load		s1, s0			;set carry flag if duty factor > duty counter
0FB 0D200        551     			SLA		s2			;shiload carry into register s2
0FC 0E280        552     			OUTPUT		s2, led_port		;drive LEDs
                 553
0FD 080F0        554     			RETURNI		enable
                 555     ;
                 556     ;
                 557     ;**************************************************************************************
                 558     ; Interrupt Vector
                 559     ;**************************************************************************************
                 560     ;
  000FF          561     			ORG		0xff
0FF 081E2        562     			JUMP		isr
                 563     ;
                 564     ;
                 565
