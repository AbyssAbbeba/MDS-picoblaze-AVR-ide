  00041            1     character_a		EQU		0x41
  00046            2     character_f		EQU		0x46
  00049            3     character_i		EQU		0x49
  0004C            4     character_l		EQU		0x4c
  00050            5     character_p		EQU		0x50
  00053            6     character_s		EQU		0x53
                   7     device kcpsm1
                   8     ; KCPSM3 Program - LED control with Pulse Width Modulation (PWM).
                   9     ; Design provided for use with the design 'low_cost_design_authentication_for_spartan_3e.vhd'
                  10     ; and the Spartan-3E Starter Kit. This design provides the token 'real' application to be
                  11     ; protected by design authentication.
                  12     ;
                  13     ; Ken Chapman - Xilinx Ltd
                  14     ;
                  15     ; Version v1.00 - 9th November 2006
                  16     ;
                  17     ; This code automatically sequences the LEDs on the board using PWM to change intensity.
                  18     ; It also checks for correct design authentication and will perform a different sequence if
                  19     ; the design is not authorised.
                  20     ;
                  21     ;
                  22     ;**************************************************************************************
                  23     ; NOTICE:
                  24     ;
                  25     ; Copyright Xilinx, Inc. 2006.   This code may be contain portions patented by other
                  26     ; third parties.  By providing this core as one possible implementation of a standard,
                  27     ; Xilinx is making no representation that the provided implementation of this standard
                  28     ; is free from any claims of infringement by any third party.  Xilinx expressly
                  29     ; disclaims any warranty with respect to the adequacy of the implementation, including
                  30     ; but not limited to any warranty or representation that the implementation is free
                  31     ; from claims of any third party.  Furthermore, Xilinx is providing this core as a
                  32     ; courtesy to you and suggests that you contact all third parties to obtain the
                  33     ; necessary rights to use this implementation.
                  34     ;
                  35     ;
                  36     ;**************************************************************************************
                  37     ; Port definitions
                  38     ;**************************************************************************************
                  39     ;
                  40     ;
                  41     ;
  00080           42     led_port		EQU		0x80			;8 simple LEDs
  00001           43     led0			EQU		0x01			;       LD0 - bit0
  00002           44     led1			EQU		0x02			;       LD1 - bit1
  00004           45     led2			EQU		0x04			;       LD2 - bit2
  00008           46     led3			EQU		0x08			;       LD3 - bit3
  00010           47     led4			EQU		0x10			;       LD4 - bit4
  00020           48     led5			EQU		0x20			;       LD5 - bit5
  00040           49     led6			EQU		0x40			;       LD6 - bit6
  00080           50     led7			EQU		0x80			;       LD7 - bit7
                  51     ;
  00000           52     led_read_port		EQU		0x00			;read back of current LED drive values
                  53     ;
                  54     ;
  00040           55     security_request_port	EQU		0x40			;Port to stimulate security KCPSM3 processor
  00001           56     security_interrupt	EQU		0x01			; interrupt - bit0
                  57     ;
                  58     ;
                  59     ;A FIFO buffer links the security KCPSM3 processor to the application KCPSM3 processor.
                  60     ;  This application processor controls and reads the FIFO.
                  61     ;  The security processor writes to the FIFO.
                  62     ;
  00020           63     link_fifo_control_port	EQU		0x20			;FIFO control
  00001           64     link_fifo_reset		EQU		0x01			;     reset - bit0
                  65     ;
  00001           66     link_fifo_status_port	EQU		0x01			;FIFO status input
  00001           67     link_fifo_data_present	EQU		0x01			;      half full - bit0
  00002           68     link_fifo_half_full	EQU		0x02			;           full - bit1
  00004           69     link_fifo_full		EQU		0x04			;   data present - bit2
                  70     ;
  00002           71     link_fifo_read_port	EQU		0x02			;read FIFO data
                  72     ;
                  73     ;
                  74     ;
                  75     ;**************************************************************************************
                  76     ; Special Register usage
                  77     ;**************************************************************************************
                  78     ;
                  79     ;
                  80     ;
                  81     ;
                  82     ;**************************************************************************************
                  83     ;Scratch Pad Memory Locations
                  84     ;**************************************************************************************
                  85     ;
  00000           86     pwm_duty_counter	EQU		0x00			;Duty Counter 0 to 255 within 1KHz period (1ms)
  00001           87     pwm_channel0		EQU		0x01			;PWM settings for each channel
  00002           88     pwm_channel1		EQU		0x02			; Channels 0 to 7 = LEDs 0 to 7
  00003           89     pwm_channel2		EQU		0x03
  00004           90     pwm_channel3		EQU		0x04
  00005           91     pwm_channel4		EQU		0x05
  00006           92     pwm_channel5		EQU		0x06
  00007           93     pwm_channel6		EQU		0x07
  00008           94     pwm_channel7		EQU		0x08
  0000D           95     isr_preserve_s0		EQU		0x0d			;preserve register contents during Interrupt Service Routine
  0000E           96     isr_preserve_s1		EQU		0x0e
  0000F           97     isr_preserve_s2		EQU		0x0f
                  98     ;
                  99     ;
  00010          100     led0_sequence		EQU		0x10			;LED sequence values
  00011          101     led1_sequence		EQU		0x11
  00012          102     led2_sequence		EQU		0x12
  00013          103     led3_sequence		EQU		0x13
  00014          104     led4_sequence		EQU		0x14
  00015          105     led5_sequence		EQU		0x15
  00016          106     led6_sequence		EQU		0x16
  00017          107     led7_sequence		EQU		0x17
                 108     ;
                 109     ;
                 110     ;
                 111     ;**************************************************************************************
                 112     ;Useful data constants
                 113     ;**************************************************************************************
                 114     ;
                 115     ;
                 116     ;
                 117     ;
                 118     ;
                 119     ;
                 120     ;
                 121     ;**************************************************************************************
                 122     ;Initialise the system
                 123     ;**************************************************************************************
                 124     ;
                 125     ; All PWM channels initialise to off (zero).
                 126     ; Simple I/O outputs will remain off at all times.
                 127     ;
000 00000        128     cold_start:		LOAD		s0, #0x00
001 00101        129     			LOAD		s1, #pwm_channel0
  00002          130     clear_loop:		STORE		s0, @s1
E: instruction not supported on the this device: STORE sX, sY.
                 131     			COMPARE		s1, #pwm_channel7
E: instruction not supported on the this device: COMPARE sX, kk.
002 09107        132     			JUMP		z, enable_int
003 04101        133     			ADD		s1, #0x01
004 08102        134     			JUMP		clear_loop
                 135     ;
005 08030        136     enable_int:		ENABLE		interrupt		;interrupts used to set PWM frequency
                 137     ;
                 138     ;
                 139     ; Initialise LED pattern sequence
                 140     ;
006 00001        141     			LOAD		s0, #0x01		;trigger to start wave pattern
                 142     			STORE		s0, led0_sequence
E: instruction not supported on the this device: STORE sX, ss.
007 00000        143     			LOAD		s0, #0x00
                 144     			STORE		s0, led1_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 145     			STORE		s0, led2_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 146     			STORE		s0, led3_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 147     			STORE		s0, led4_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 148     			STORE		s0, led5_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 149     			STORE		s0, led6_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 150     			STORE		s0, led7_sequence
E: instruction not supported on the this device: STORE sX, ss.
                 151     ;
                 152     ;
                 153     ; Reset authentication check counter
                 154     ;
008 00F00        155     			LOAD		sf, #0x00
                 156     ;
                 157     ;
                 158     ;**************************************************************************************
                 159     ; Main program
                 160     ;**************************************************************************************
                 161     ;
                 162     ; Provides a pattern of interest on the LEDs :-)
                 163     ;
                 164     ; Each LED increases intensity in 8 steps and then decreases intensity in 8 steps until it is off.
                 165     ; The middle LEDs (LD2 to LD5) each start to turn on when either neighbour is turned half on and increasing
                 166     ; to provide the effect of a passing a 'wave' of light passing from side to side. The pair of LEDs at each
                 167     ; (LD0, Ld1 and LD6, LD7) are required to reflect the 'wave' so that the pattern continues.
                 168     ;
                 169     ; I'm sure this code cold be written in more elegant way, but I leave that as an exercise to you :-)
                 170     ;
                 171     ;
                 172     ; Using a simple software counter (implemented by register sF) the design occasionally requests an
                 173     ; authorisation message from the authentication processor. If it receives a PASS message it continues
                 174     ; normally but if it receives a FAIL message the LED pattern is changed.
                 175     ;
                 176     ;
                 177     ;
009 04F01        178     warm_start:		ADD		sf, #0x01		;authentication check timer
00A 099B6        179     			JUMP		c, authentication_check	;Check made approximately every 8 seconds.
                 180     ;
00B 00203        181     normal_led_sequence:	LOAD		s2, #0x03		;simple delay loop (delay will be increased by ISR processing)
00C 001FF        182     delay_s2_loop:		LOAD		s1, #0xff
00D 000FF        183     delay_s1_loop:		LOAD		s0, #0xff
00E 06001        184     delay_s0_loop:		SUB		s0, #0x01
00F 09D18        185     			JUMP		nc, delay_s0_loop
010 06101        186     			SUB		s1, #0x01
011 09D17        187     			JUMP		nc, delay_s1_loop
012 06201        188     			SUB		s2, #0x01
013 09D16        189     			JUMP		nc, delay_s2_loop
                 190     ;
                 191     ;Pattern generation
                 192     ;
                 193     			FETCH		s0, led0_sequence	;read sequence for LED0
E: instruction not supported on the this device: FETCH sX, ss.
                 194     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
014 09126        195     			JUMP		z, test_led0_start
015 06020        196     			SUB		s0, #0x20		;Count longer to ensure end stops then reset count if maximum
016 09129        197     			JUMP		z, update_led0
017 04020        198     			ADD		s0, #0x20
018 04001        199     inc_led0:		ADD		s0, #0x01		;increment counter
019 08129        200     			JUMP		update_led0
  00026          201     test_led0_start:	FETCH		s1, led1_sequence	;start LED0 if LED1 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 202     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
01A 09124        203     			JUMP		z, inc_led0
  00029          204     update_led0:		STORE		s0, led0_sequence
E: instruction not supported on the this device: STORE sX, ss.
01B 083A8        205     			CALL		led_to_duty
                 206     			STORE		s1, pwm_channel0
E: instruction not supported on the this device: STORE sX, ss.
                 207     ;
                 208     			FETCH		s1, led0_sequence	; refresh LED1 if LED0 = 11 (0B hex) to reflect wave
E: instruction not supported on the this device: FETCH sX, ss.
                 209     			COMPARE		s1, #0x0b
E: instruction not supported on the this device: COMPARE sX, kk.
01C 09531        210     			JUMP		nz, normal_led1
01D 00004        211     			LOAD		s0, #0x04
01E 0813F        212     			JUMP		update_led1
  00031          213     normal_led1:		FETCH		s0, led1_sequence	;read sequence for LED1
E: instruction not supported on the this device: FETCH sX, ss.
                 214     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
01F 09139        215     			JUMP		z, test_led1_start
020 06010        216     			SUB		s0, #0x10		;reset count if maximum
021 0913F        217     			JUMP		z, update_led1
022 04010        218     			ADD		s0, #0x10
023 04001        219     inc_led1:		ADD		s0, #0x01		;increment counter
024 0813F        220     			JUMP		update_led1
  00039          221     test_led1_start:	FETCH		s1, led0_sequence	;start LED1 if LED0 = 11 (0B hex) to reflect wave
E: instruction not supported on the this device: FETCH sX, ss.
                 222     			COMPARE		s1, #0x0b
E: instruction not supported on the this device: COMPARE sX, kk.
025 09137        223     			JUMP		z, inc_led1
                 224     			FETCH		s1, led2_sequence	;start LED1 if LED2 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 225     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
026 09137        226     			JUMP		z, inc_led1
  0003F          227     update_led1:		STORE		s0, led1_sequence
E: instruction not supported on the this device: STORE sX, ss.
027 083A8        228     			CALL		led_to_duty
                 229     			STORE		s1, pwm_channel1
E: instruction not supported on the this device: STORE sX, ss.
                 230     ;
                 231     			FETCH		s0, led2_sequence	;read sequence for LED2
E: instruction not supported on the this device: FETCH sX, ss.
                 232     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
028 0914A        233     			JUMP		z, test_led2_start
029 06010        234     			SUB		s0, #0x10		;reset count if maximum
02A 09150        235     			JUMP		z, update_led2
02B 04010        236     			ADD		s0, #0x10
02C 04001        237     inc_led2:		ADD		s0, #0x01		;increment counter
02D 08150        238     			JUMP		update_led2
  0004A          239     test_led2_start:	FETCH		s1, led1_sequence	;start LED2 if LED1 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 240     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
02E 09148        241     			JUMP		z, inc_led2
                 242     			FETCH		s1, led3_sequence	;start LED2 if LED3 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 243     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
02F 09148        244     			JUMP		z, inc_led2
  00050          245     update_led2:		STORE		s0, led2_sequence
E: instruction not supported on the this device: STORE sX, ss.
030 083A8        246     			CALL		led_to_duty
                 247     			STORE		s1, pwm_channel2
E: instruction not supported on the this device: STORE sX, ss.
                 248     ;
                 249     ;
                 250     			FETCH		s0, led3_sequence	;read sequence for LED3
E: instruction not supported on the this device: FETCH sX, ss.
                 251     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
031 0915B        252     			JUMP		z, test_led3_start
032 06010        253     			SUB		s0, #0x10		;reset count if maximum
033 09161        254     			JUMP		z, update_led3
034 04010        255     			ADD		s0, #0x10
035 04001        256     inc_led3:		ADD		s0, #0x01		;increment counter
036 08161        257     			JUMP		update_led3
  0005B          258     test_led3_start:	FETCH		s1, led2_sequence	;start LED3 if LED2 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 259     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
037 09159        260     			JUMP		z, inc_led3
                 261     			FETCH		s1, led4_sequence	;start LED3 if LED4 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 262     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
038 09159        263     			JUMP		z, inc_led3
  00061          264     update_led3:		STORE		s0, led3_sequence
E: instruction not supported on the this device: STORE sX, ss.
039 083A8        265     			CALL		led_to_duty
                 266     			STORE		s1, pwm_channel3
E: instruction not supported on the this device: STORE sX, ss.
                 267     ;
                 268     			FETCH		s0, led4_sequence	;read sequence for LED4
E: instruction not supported on the this device: FETCH sX, ss.
                 269     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
03A 0916C        270     			JUMP		z, test_led4_start
03B 06010        271     			SUB		s0, #0x10		;reset count if maximum
03C 09172        272     			JUMP		z, update_led4
03D 04010        273     			ADD		s0, #0x10
03E 04001        274     inc_led4:		ADD		s0, #0x01		;increment counter
03F 08172        275     			JUMP		update_led4
  0006C          276     test_led4_start:	FETCH		s1, led3_sequence	;start LED4 if LED3 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 277     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
040 0916A        278     			JUMP		z, inc_led4
                 279     			FETCH		s1, led5_sequence	;start LED4 if LED5 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 280     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
041 0916A        281     			JUMP		z, inc_led4
  00072          282     update_led4:		STORE		s0, led4_sequence
E: instruction not supported on the this device: STORE sX, ss.
042 083A8        283     			CALL		led_to_duty
                 284     			STORE		s1, pwm_channel4
E: instruction not supported on the this device: STORE sX, ss.
                 285     ;
                 286     			FETCH		s0, led5_sequence	;read sequence for LED5
E: instruction not supported on the this device: FETCH sX, ss.
                 287     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
043 0917D        288     			JUMP		z, test_led5_start
044 06010        289     			SUB		s0, #0x10		;reset count if maximum
045 09183        290     			JUMP		z, update_led5
046 04010        291     			ADD		s0, #0x10
047 04001        292     inc_led5:		ADD		s0, #0x01		;increment counter
048 08183        293     			JUMP		update_led5
  0007D          294     test_led5_start:	FETCH		s1, led4_sequence	;start LED5 if LED4 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 295     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
049 0917B        296     			JUMP		z, inc_led5
                 297     			FETCH		s1, led6_sequence	;start LED5 if LED6 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 298     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
04A 0917B        299     			JUMP		z, inc_led5
  00083          300     update_led5:		STORE		s0, led5_sequence
E: instruction not supported on the this device: STORE sX, ss.
04B 083A8        301     			CALL		led_to_duty
                 302     			STORE		s1, pwm_channel5
E: instruction not supported on the this device: STORE sX, ss.
                 303     ;
                 304     			FETCH		s1, led7_sequence	; refresh LED6 if LED7 = 11 (0B hex) to reflect wave
E: instruction not supported on the this device: FETCH sX, ss.
                 305     			COMPARE		s1, #0x0b
E: instruction not supported on the this device: COMPARE sX, kk.
04C 0958B        306     			JUMP		nz, normal_led6
04D 00004        307     			LOAD		s0, #0x04
04E 08196        308     			JUMP		update_led6
  0008B          309     normal_led6:		FETCH		s0, led6_sequence	;read sequence for LED6
E: instruction not supported on the this device: FETCH sX, ss.
                 310     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
04F 09193        311     			JUMP		z, test_led6_start
050 06010        312     			SUB		s0, #0x10		;reset count if maximum
051 09196        313     			JUMP		z, update_led6
052 04010        314     			ADD		s0, #0x10
053 04001        315     inc_led6:		ADD		s0, #0x01		;increment counter
054 08196        316     			JUMP		update_led6
  00093          317     test_led6_start:	FETCH		s1, led5_sequence	;start LED6 if LED5 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 318     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
055 09191        319     			JUMP		z, inc_led6
  00096          320     update_led6:		STORE		s0, led6_sequence
E: instruction not supported on the this device: STORE sX, ss.
056 083A8        321     			CALL		led_to_duty
                 322     			STORE		s1, pwm_channel6
E: instruction not supported on the this device: STORE sX, ss.
                 323     ;
                 324     			FETCH		s0, led7_sequence	;read sequence for LED7
E: instruction not supported on the this device: FETCH sX, ss.
                 325     			COMPARE		s0, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
057 091A1        326     			JUMP		z, test_led7_start
058 06020        327     			SUB		s0, #0x20		;Count longer to ensure end stops then reset count if maximum
059 091A4        328     			JUMP		z, update_led7
05A 04020        329     			ADD		s0, #0x20
05B 04001        330     inc_led7:		ADD		s0, #0x01		;increment counter
05C 081A4        331     			JUMP		update_led7
  000A1          332     test_led7_start:	FETCH		s1, led6_sequence	;start LED7 if LED6 = 4
E: instruction not supported on the this device: FETCH sX, ss.
                 333     			COMPARE		s1, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
05D 0919F        334     			JUMP		z, inc_led7
  000A4          335     update_led7:		STORE		s0, led7_sequence
E: instruction not supported on the this device: STORE sX, ss.
05E 083A8        336     			CALL		led_to_duty
                 337     			STORE		s1, pwm_channel7
E: instruction not supported on the this device: STORE sX, ss.
05F 08113        338     			JUMP		warm_start
                 339     ;
                 340     ;
                 341     ; Convert LED sequence number into PWM intensity figure
                 342     ;
                 343     ; LEDs duty cycle values are 0,1,2,4,8,16,32 and 64 because they appear to give what
                 344     ; appears to be a fairly liner change in intensity and provides a simple way to set
                 345     ; the duty value.
                 346     ;
                 347     ; Provide sequence value in register s0 and intensity will be
                 348     ; returned in register s1.
                 349     ;
                 350     ; s0   s1
                 351     ; 00   00
                 352     ; 01   01
                 353     ; 02   02
                 354     ; 03   04
                 355     ; 04   08
                 356     ; 05   10
                 357     ; 06   20
                 358     ; 07   40
                 359     ; 08   80
                 360     ; 09   40
                 361     ; 0A   20
                 362     ; 0B   10
                 363     ; 0C   08
                 364     ; 0D   04
                 365     ; 0E   02
                 366     ; 0F   01
                 367     ; 10   00  and zero for all larger values of s0
                 368     ;
060 00100        369     led_to_duty:		LOAD		s1, #0x00
                 370     			COMPARE		s0, #0x00		;test for zero
E: instruction not supported on the this device: COMPARE sX, kk.
061 09080        371     			RETURN		z
062 00101        372     			LOAD		s1, #0x01		;inject '1'
063 06001        373     go_up_loop:		SUB		s0, #0x01
064 09080        374     			RETURN		z
065 0D106        375     			SL0		s1			;multiply by 2
066 099B1        376     			JUMP		c, go_down
067 081AC        377     			JUMP		go_up_loop
068 00140        378     go_down:		LOAD		s1, #0x40
069 06001        379     go_down_loop:		SUB		s0, #0x01
06A 09080        380     			RETURN		z
06B 0D10E        381     			SR0		s1			;divide by 2
06C 081B2        382     			JUMP		go_down_loop
                 383     ;
                 384     ;
                 385     ;
                 386     ;**************************************************************************************
                 387     ; Authentication Check and fail procedure
                 388     ;**************************************************************************************
                 389     ;
                 390     ; The authentication check is performed by issuing and interrupt to the authentication
                 391     ; processor and then observing the simple text string that it returns via the link FIFO
                 392     ; buffer.
                 393     ;
                 394     ; PASS - Design is authorised to work.
                 395     ; FAIL - Design is not authorised and should stop working normally.
                 396     ;
                 397     ;
                 398     ;ASCII character values that are used in messages
                 399     ;
                 400     ; >>>>> (line moved to the beginning) <<<<<
                 401     ; >>>>> (line moved to the beginning) <<<<<
                 402     ; >>>>> (line moved to the beginning) <<<<<
                 403     ; >>>>> (line moved to the beginning) <<<<<
                 404     ; >>>>> (line moved to the beginning) <<<<<
                 405     ; >>>>> (line moved to the beginning) <<<<<
                 406     ;
                 407     ;
06D 00001        408     authentication_check:	LOAD		s0, #link_fifo_reset	;clear link FIFO to ensure no unexpected characters
06E 0E020        409     			OUTPUT		s0, link_fifo_control_port
06F 00000        410     			LOAD		s0, #0x00
070 0E020        411     			OUTPUT		s0, link_fifo_control_port
                 412     ;
071 00001        413     			LOAD		s0, #security_interrupt	;generate interrupt to authentication processor
072 0E040        414     			OUTPUT		s0, security_request_port
073 00000        415     			LOAD		s0, #0x00
074 0E040        416     			OUTPUT		s0, security_request_port
                 417     ;
075 083F9        418     			CALL		read_link_fifo		;read each character and compare
                 419     			COMPARE		s0, #character_p
E: instruction not supported on the this device: COMPARE sX, kk.
076 095CB        420     			JUMP		nz, fail_confirm
077 083F9        421     			CALL		read_link_fifo
                 422     			COMPARE		s0, #character_a
E: instruction not supported on the this device: COMPARE sX, kk.
078 095CB        423     			JUMP		nz, fail_confirm
079 083F9        424     			CALL		read_link_fifo
                 425     			COMPARE		s0, #character_s
E: instruction not supported on the this device: COMPARE sX, kk.
07A 095CB        426     			JUMP		nz, fail_confirm
07B 083F9        427     			CALL		read_link_fifo
                 428     			COMPARE		s0, #character_s
E: instruction not supported on the this device: COMPARE sX, kk.
07C 095CB        429     			JUMP		nz, fail_confirm
07D 08115        430     			JUMP		normal_led_sequence	;Continue normal operation for PASS message
                 431     ;
                 432     ;
                 433     ; To confirm that the authentication is really a FAIL message
                 434     ; another request is made to the authentication processor and tested.
                 435     ;
07E 000FF        436     fail_confirm:		LOAD		s0, #0xff		;short delay to ensure authentication processor is ready
07F 06001        437     request_delay:		SUB		s0, #0x01		;   to respond to new interrupt request
080 095CC        438     			JUMP		nz, request_delay
                 439     ;
081 00001        440     			LOAD		s0, #link_fifo_reset	;clear link FIFO to ensure no unexpected characters
082 0E020        441     			OUTPUT		s0, link_fifo_control_port
083 00000        442     			LOAD		s0, #0x00
084 0E020        443     			OUTPUT		s0, link_fifo_control_port
                 444     ;
085 00001        445     			LOAD		s0, #security_interrupt	;generate interrupt to authentication processor
086 0E040        446     			OUTPUT		s0, security_request_port
087 00000        447     			LOAD		s0, #0x00
088 0E040        448     			OUTPUT		s0, security_request_port
                 449     ;
089 083F9        450     			CALL		read_link_fifo		;read each character and compare
                 451     			COMPARE		s0, #character_f
E: instruction not supported on the this device: COMPARE sX, kk.
08A 09515        452     			JUMP		nz, normal_led_sequence
08B 083F9        453     			CALL		read_link_fifo
                 454     			COMPARE		s0, #character_a
E: instruction not supported on the this device: COMPARE sX, kk.
08C 09515        455     			JUMP		nz, normal_led_sequence
08D 083F9        456     			CALL		read_link_fifo
                 457     			COMPARE		s0, #character_i
E: instruction not supported on the this device: COMPARE sX, kk.
08E 09515        458     			JUMP		nz, normal_led_sequence
08F 083F9        459     			CALL		read_link_fifo
                 460     			COMPARE		s0, #character_l
E: instruction not supported on the this device: COMPARE sX, kk.
090 09515        461     			JUMP		nz, normal_led_sequence
                 462     ;
                 463     ;
                 464     ; When the design fails to authenticate the LEDs will appear to
                 465     ; turn on and then slowly fade to off using PWM.
                 466     ;
091 000FF        467     failed_led_sequence:	LOAD		s0, #0xff		;maximum intensity on all LEDs
092 00400        468     			LOAD		s4, #0x00		;reset fade rate control
093 00101        469     all_led_fade:		LOAD		s1, #pwm_channel0
  000E5          470     all_led_fade_loop:	STORE		s0, @s1
E: instruction not supported on the this device: STORE sX, sY.
                 471     			COMPARE		s1, #pwm_channel7
E: instruction not supported on the this device: COMPARE sX, kk.
094 091EA        472     			JUMP		z, decay_leds
095 04101        473     			ADD		s1, #0x01
096 081E5        474     			JUMP		all_led_fade_loop
097 0C140        475     decay_leds:		LOAD		s1, s4			;software delay starts quickly and slows down because LEDs are non-linear.
098 00218        476     wait_s1:		LOAD		s2, #0x18
099 003FF        477     wait_s2:		LOAD		s3, #0xff
09A 06301        478     wait_s3:		SUB		s3, #0x01
09B 095ED        479     			JUMP		nz, wait_s3
09C 06201        480     			SUB		s2, #0x01
09D 095EC        481     			JUMP		nz, wait_s2
09E 06101        482     			SUB		s1, #0x01
09F 095EB        483     			JUMP		nz, wait_s1
                 484     			COMPARE		s0, #0x00		;test for fully off
E: instruction not supported on the this device: COMPARE sX, kk.
0A0 091F8        485     			JUMP		z, stop_completely
0A1 06001        486     			SUB		s0, #0x01		;fade LEDs
0A2 04401        487     			ADD		s4, #0x01		;slow fade rate as intensity decreases
0A3 081E4        488     			JUMP		all_led_fade
                 489     ;
0A4 081F8        490     stop_completely:	JUMP		stop_completely
                 491     ;
                 492     ;**************************************************************************************
                 493     ; Read Byte from Link FIFO
                 494     ;**************************************************************************************
                 495     ;
                 496     ; The routine first tests the FIFO buffer to see if data is present.
                 497     ; If the FIFO is empty, the routine waits until there is a character to read.
                 498     ; the read value is returned in register s0.
                 499     ;
                 500     ;
0A5 0A001        501     read_link_fifo:		INPUT		s0, link_fifo_status_port	;test FIFO buffer
                 502     			TEST		s0, #link_fifo_data_present	;wait if empty
E: instruction not supported on the this device: TEST sX, kk.
0A6 091F9        503     			JUMP		z, read_link_fifo
0A7 0A002        504     			INPUT		s0, link_fifo_read_port	;read data from FIFO
0A8 08080        505     			RETURN
                 506     ;
                 507     ;
                 508     ;**************************************************************************************
                 509     ; Interrupt Service Routine (ISR)
                 510     ;**************************************************************************************
                 511     ;
                 512     ; Interrupts occur at 3.92us intervals and are used to generate the PWM pulses generated
                 513     ; at a PRF of 1KHz. The 3.92us interrupt rate corresponds with a resolution of 256 steps
                 514     ; over the 1ms associated with the 1KHz PRF.
                 515     ;
                 516     ; The ISR is self contained and all registers used are preserved. Scratch pad memory
                 517     ; locations are used to determine the desired duty factor for each of 8 channels.
                 518     ;
                 519     ; Note that an interrupt is generated every 196 clock cycles. This means that there is
                 520     ; only time to execute 98 instructions between each interrupt. This ISR is 35 instructions
                 521     ; long. A further 3 instructions are also consumed by the interrupt process
                 522     ; (abandoned instruction, virtual CALL to 3FF and the interrupt vector JUMP) and hence
                 523     ; PicoBlaze has approximately 63% of its time available for other tasks in the main program.
                 524     ;
                 525     ; Although a loop would normal be employed in software to process each of 8 channels,
                 526     ; the implementation of a loop would increase the number of instructions which needed to
                 527     ; be executed significantly reduce the time available for the main program to operate.
                 528     ; Consequently the code is written out in a linear fashion which consumes more program
                 529     ; space but which executes faster.
                 530     ;
  000FE          531     isr:			STORE		s0, isr_preserve_s0	;preserve registers to be used
E: instruction not supported on the this device: STORE sX, ss.
                 532     			STORE		s1, isr_preserve_s1
E: instruction not supported on the this device: STORE sX, ss.
                 533     			STORE		s2, isr_preserve_s2
E: instruction not supported on the this device: STORE sX, ss.
                 534     ;Determine the number of steps currently through the 1ms PWM cycle
                 535     			FETCH		s1, pwm_duty_counter	;read 8-bit counter of steps
E: instruction not supported on the this device: FETCH sX, ss.
0A9 04101        536     			ADD		s1, #0x01		;increment counter (will roll over to zero)
                 537     			STORE		s1, pwm_duty_counter	;update count value in memory for next interrupt.
E: instruction not supported on the this device: STORE sX, ss.
                 538     ;Read duty factor for each channel and compare it with the duty counter and set or
                 539     ;reset a bit in register s2 accordingly.
                 540     			FETCH		s0, pwm_channel7	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 541     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0AA 0D200        542     			SLA		s2			;shift carry into register s2
                 543     			FETCH		s0, pwm_channel6	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 544     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0AB 0D200        545     			SLA		s2			;shift carry into register s2
                 546     			FETCH		s0, pwm_channel5	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 547     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0AC 0D200        548     			SLA		s2			;shift carry into register s2
                 549     			FETCH		s0, pwm_channel4	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 550     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0AD 0D200        551     			SLA		s2			;shift carry into register s2
                 552     			FETCH		s0, pwm_channel3	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 553     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0AE 0D200        554     			SLA		s2			;shift carry into register s2
                 555     			FETCH		s0, pwm_channel2	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 556     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0AF 0D200        557     			SLA		s2			;shift carry into register s2
                 558     			FETCH		s0, pwm_channel1	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 559     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0B0 0D200        560     			SLA		s2			;shift carry into register s2
                 561     			FETCH		s0, pwm_channel0	;read desired setting of pulse width
E: instruction not supported on the this device: FETCH sX, ss.
                 562     			COMPARE		s1, s0			;set carry flag if duty factor > duty counter
E: instruction not supported on the this device: COMPARE sX, sY.
0B1 0D200        563     			SLA		s2			;shift carry into register s2
0B2 0E280        564     			OUTPUT		s2, led_port		;drive LEDs
                 565     			FETCH		s0, isr_preserve_s0	;restore register values
E: instruction not supported on the this device: FETCH sX, ss.
                 566     			FETCH		s1, isr_preserve_s1
E: instruction not supported on the this device: FETCH sX, ss.
                 567     			FETCH		s2, isr_preserve_s2
E: instruction not supported on the this device: FETCH sX, ss.
0B3 080F0        568     			RETURNI		enable
                 569     ;
                 570     ;
                 571     ;**************************************************************************************
                 572     ; Interrupt Vector
                 573     ;**************************************************************************************
                 574     ;
  003FF          575     			ORG		0x3ff
3FF 081FE        576     			JUMP		isr
                 577     ;
                 578     ;
                 579
