                   1     ;KCPSM3 Program - UART programming of StrataFLASH memory on the Spartan-3E Starter Kit.
                   2     ;
                   3     ;Ken Chapman - Xilinx Ltd
                   4     ;
                   5     ;Version v1.00 - 28th March 2006
                   6     ;
                   7     ;This program uses a 115200 baud UART connection with XON/XOFF flow control
                   8     ;to allow a standard MCS file for the configuration of a Spartan-3E device to
                   9     ;be programmed into the Intel StrataFLASH device on the board.
                  10     ;
                  11     device kcpsm6
                  12     ;
                  13     ;
                  14     ;**************************************************************************************
                  15     ; Port definitions
                  16     ;**************************************************************************************
                  17     ;
                  18     ;
  00000           19     status_port             EQU             0x00                    ;UART and filter status input
  00001           20     tx_data_present         EQU             0x01                    ;  Transmitter  data present - bit0
  00002           21     tx_half_full            EQU             0x02                    ;    FIFO          half full - bit1
  00004           22     tx_full                 EQU             0x04                    ;                       full - bit2
  00008           23     rx_data_present         EQU             0x08                    ;               data present - bit3
  00010           24     rx_half_full            EQU             0x10                    ;  Receiver        half full - bit4
  00020           25     rx_full                 EQU             0x20                    ;    FIFO               full - bit5
  00040           26     spare1                  EQU             0x40                    ;                  spare '0' - bit6
  00080           27     sf_sts                  EQU             0x80                    ;            StrataFLASH STS - bit7
                  28     ;
  00001           29     uart_read_port          EQU             0x01                    ;UART Rx data input
                  30     ;
  00004           31     uart_write_port         EQU             0x04                    ;UART Tx data output
                  32     ;
                  33     ;
  00002           34     sf_data_in_port         EQU             0x02                    ;Read data from StrataFLASH device
                  35     ;
  00010           36     sf_data_out_port        EQU             0x10                    ;Data to write into StrataFLASH device
                  37     ;
  00080           38     sf_addr_hi_port         EQU             0x80                    ;StrataFLASH address[23:16]
  00040           39     sf_addr_mi_port         EQU             0x40                    ;StrataFLASH address[15:8]
  00020           40     sf_addr_lo_port         EQU             0x20                    ;StrataFLASH address[7:0]
                  41     ;
  00008           42     sf_control_port         EQU             0x08                    ;StrataFLASH control
  00001           43     sf_read                 EQU             0x01                    ;         active High read - bit0
  00002           44     sf_ce                   EQU             0x02                    ; active Low device enable - bit1
  00004           45     sf_we                   EQU             0x04                    ;         active Low write - bit2
                  46     ;
                  47     ;
                  48     ;
                  49     ;**************************************************************************************
                  50     ; Special Register usage
                  51     ;**************************************************************************************
                  52     ;
  0000F           53     uart_data               REG             sf                      ;used to pass data to and from the UART
                  54     ;
                  55     ;
                  56     ;**************************************************************************************
                  57     ; Useful data constants
                  58     ;**************************************************************************************
                  59     ;
                  60     ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                  61     ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                  62     ;calculation highly predictable. The '6' in the following equation even allows for
                  63     ;'CALL delay_1us' instruction in the initiating code.
                  64     ;
                  65     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                  66     ;
                  67     ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                  68     ;For clock rates below 10MHz the value of 1 must be used and the operation will
                  69     ;become lower than intended.
                  70     ;
  0000B           71     delay_1us_constant      EQU             0x0b
                  72     ;
                  73     ;
                  74     ;
                  75     ;ASCII table
                  76     ;
  00061           77     character_a             EQU             0x61
  00062           78     character_b             EQU             0x62
  00063           79     character_c             EQU             0x63
  00064           80     character_d             EQU             0x64
  00065           81     character_e             EQU             0x65
  00066           82     character_f             EQU             0x66
  00067           83     character_g             EQU             0x67
  00068           84     character_h             EQU             0x68
  00069           85     character_i             EQU             0x69
  0006A           86     character_j             EQU             0x6a
  0006B           87     character_k             EQU             0x6b
  0006C           88     character_l             EQU             0x6c
  0006D           89     character_m             EQU             0x6d
  0006E           90     character_n             EQU             0x6e
  0006F           91     character_o             EQU             0x6f
  00070           92     character_p             EQU             0x70
  00071           93     character_q             EQU             0x71
  00072           94     character_r             EQU             0x72
  00073           95     character_s             EQU             0x73
  00074           96     character_t             EQU             0x74
  00075           97     character_u             EQU             0x75
  00076           98     character_v             EQU             0x76
  00077           99     character_w             EQU             0x77
  00078          100     character_x             EQU             0x78
  00079          101     character_y             EQU             0x79
  0007A          102     character_z             EQU             0x7a
  00041          103     _character_a            EQU             0x41
  00042          104     _character_b            EQU             0x42
  00043          105     _character_c            EQU             0x43
  00044          106     _character_d            EQU             0x44
  00045          107     _character_e            EQU             0x45
  00046          108     _character_f            EQU             0x46
  00047          109     _character_g            EQU             0x47
  00048          110     _character_h            EQU             0x48
  00049          111     _character_i            EQU             0x49
  0004A          112     _character_j            EQU             0x4a
  0004B          113     _character_k            EQU             0x4b
  0004C          114     _character_l            EQU             0x4c
  0004D          115     _character_m            EQU             0x4d
  0004E          116     _character_n            EQU             0x4e
  0004F          117     _character_o            EQU             0x4f
  00050          118     _character_p            EQU             0x50
  00051          119     _character_q            EQU             0x51
  00052          120     _character_r            EQU             0x52
  00053          121     _character_s            EQU             0x53
  00054          122     _character_t            EQU             0x54
  00055          123     _character_u            EQU             0x55
  00056          124     _character_v            EQU             0x56
  00057          125     _character_w            EQU             0x57
  00058          126     _character_x            EQU             0x58
  00059          127     _character_y            EQU             0x59
  0005A          128     _character_z            EQU             0x5a
  00030          129     character_0             EQU             0x30
  00031          130     character_1             EQU             0x31
  00032          131     character_2             EQU             0x32
  00033          132     character_3             EQU             0x33
  00034          133     character_4             EQU             0x34
  00035          134     character_5             EQU             0x35
  00036          135     character_6             EQU             0x36
  00037          136     character_7             EQU             0x37
  00038          137     character_8             EQU             0x38
  00039          138     character_9             EQU             0x39
  0003A          139     character_colon         EQU             0x3a
  0002E          140     character_fullstop      EQU             0x2e
  0003B          141     character_semi_colon    EQU             0x3b
  0002D          142     character_minus         EQU             0x2d
  0002B          143     character_plus          EQU             0x2b
  0002C          144     character_comma         EQU             0x2c
  0003C          145     character_less_than     EQU             0x3c                    ;'<'
  0003E          146     character_greater_than  EQU             0x3e                    ;'>'
  00028          147     character_open          EQU             0x28                    ;'('
  00029          148     character_close         EQU             0x29                    ;')'
  0002F          149     character_divide        EQU             0x2f                    ;'/'
  0003D          150     character_equals        EQU             0x3d
  00020          151     character_space         EQU             0x20
  0000D          152     character_cr            EQU             0x0d                    ;carriage return
  0000A          153     character_lf            EQU             0x0a                    ;line feed
  0003F          154     character_question      EQU             0x3f                    ;'?'
  00024          155     character_dollar        EQU             0x24
  00021          156     character_exclaim       EQU             0x21                    ;'!'
  00008          157     character_bs            EQU             0x08                    ;Back Space command character
  00011          158     character_xon           EQU             0x11                    ;Flow control ON
  00013          159     character_xoff          EQU             0x13                    ;Flow control OFF
                 160     ;
                 161     ;
                 162     ;**************************************************************************************
                 163     ; Scratch Pad Memory Locations
                 164     ;**************************************************************************************
                 165     ;
  00000          166     isr_preserve_s0         EQU             0x00                    ;preserve register during ISR
                 167     ;
                 168     ;
                 169     ;
                 170     ;Store up to one line of an MCS file as bytes
                 171     ;A typical data line consists of:-
                 172     ;:     Start character which is not stored
                 173     ;10    Number of data bytes included (16 in this case)
                 174     ;aaaa  Lower 16-bits of the storage address
                 175     ;00    Record type (data in this case)
                 176     ;dddd...   Data bytes (typically 16 which is the maximum)
                 177     ;cc    Checksum
                 178     ;CR/LF Line will end in carriage return and/or line feed which is not stored.
                 179     ;
                 180     ;So a total of 21 bytes could be stored before processing.
                 181     ;This is located at the end of scratch pad memory.
                 182     ;
  0002B          183     line_start              EQU             0x2b                    ;21 bytes until end of memory
  0002F          184     data_start              EQU             0x2f                    ;Start of data field if present
                 185     ;
                 186     ;
                 187     ;**************************************************************************************
                 188     ; Initialise the system and welcome message
                 189     ;**************************************************************************************
                 190     ;
000 20027        191     cold_start:             CALL            sf_init                 ;initialise StrataFLASH controls
001 2011A        192                             CALL            delay_1s                ;delay because UART is fast and JTAG startup sequence can be slow
002 28001        193                             ENABLE          interrupt               ;Interrupt is used for XON/XOFF flow control
003 20193        194     welcome_start:          CALL            send_cr
004 20199        195                             CALL            send_welcome            ;start up message and version number
                 196     ;
                 197     ;
                 198     ;**************************************************************************************
                 199     ; Main menu and command selection
                 200     ;**************************************************************************************
                 201     ;
                 202     ;
005 20233        203     warm_start:             CALL            send_menu               ;Menu and command selection
006 20193        204                             CALL            send_cr
                 205     ;
007 20193        206     prompt:                 CALL            send_cr
008 20193        207                             CALL            send_cr
009 01F3E        208                             LOAD            uart_data, #character_greater_than ;prompt for input
00A 20131        209                             CALL            send_to_uart
00B 20022        210                             CALL            read_upper_case
00C 1D045        211                             COMPARE         s0, #_character_e       ;test for commands and execute as required
00D 3202A        212                             JUMP            z, erase_command
00E 1D042        213                             COMPARE         s0, #_character_b
00F 3202C        214                             JUMP            z, block_erase_command
010 1D050        215                             COMPARE         s0, #_character_p
011 32047        216                             JUMP            z, program_command
012 1D057        217                             COMPARE         s0, #_character_w
013 3208C        218                             JUMP            z, write_command
014 1D052        219                             COMPARE         s0, #_character_r
015 320A3        220                             JUMP            z, read_command
016 1D049        221                             COMPARE         s0, #_character_i
017 320C2        222                             JUMP            z, sf_information
018 1D048        223                             COMPARE         s0, #_character_h
019 32003        224                             JUMP            z, welcome_start
01A 1D053        225                             COMPARE         s0, #_character_s
01B 320D5        226                             JUMP            z, sf_status
01C 20193        227                             CALL            send_cr                 ;no valid command input
01D 01F3F        228                             LOAD            uart_data, #character_question ;display ???
01E 20131        229                             CALL            send_to_uart
01F 20131        230                             CALL            send_to_uart
020 20131        231                             CALL            send_to_uart
021 22007        232                             JUMP            prompt                  ;Try again!
                 233     ;
                 234     ;
022 2011F        235     read_upper_case:        CALL            read_from_uart          ;read command character from UART
023 20131        236                             CALL            send_to_uart            ;echo character
024 000F0        237                             LOAD            s0, uart_data           ;convert to upper case
025 2013E        238                             CALL            upper_case
026 25000        239                             RETURN
                 240     ;
                 241     ;
                 242     ;**************************************************************************************
                 243     ; Initialise the StrataFlash Memory control signals.
                 244     ;**************************************************************************************
                 245     ;
                 246     ; SF_read = 0   - Output enable off
                 247     ; SF_ce = 1     - Deselect StrataFLASH memory
                 248     ; SF_we = 1     - Write enable off
                 249     ;
                 250     ; Register used s0
                 251     ;
027 01006        252     sf_init:                LOAD            s0, #0x06
028 2D008        253                             OUTPUT          s0, sf_control_port
029 25000        254                             RETURN
                 255     ;
                 256     ;
                 257     ;**************************************************************************************
                 258     ; Erase Command - Perform bulk erase of the StrataFLASH memory
                 259     ;**************************************************************************************
                 260     ;
                 261     ; This routine executes the block erase command 128 times with a different base
                 262     ; address in each case.
                 263     ;
                 264     ; Note that this could take as long as 8 minutes 30 seconds
                 265     ; and even typical times will be approximately 2 minutes.
                 266     ;
                 267     ; Registers used s1,s7,s8,s9
                 268     ;
02A 019FE        269     erase_command:          LOAD            s9, #0xfe               ;define base address of block 127 = FE0000
02B 2202D        270                             JUMP            blocks_erase
                 271     ;
                 272     ;
                 273     ;**************************************************************************************
                 274     ; Block Erase Command - Performs erase of lowest 3 blocks of StrataFLASH memory which
                 275     ; covers the address range 000000 to 05FFFF in which the configuration for an XC3S500E
                 276     ; would be able to fit (000000 to 045470).
                 277     ;**************************************************************************************
                 278     ;
                 279     ; This routine executes the block erase command 3 times with a different base
                 280     ; address in each case.
                 281     ;
                 282     ; Each block is 128K bytes and therefore has an address range of 000000 to 01FFFF.
                 283     ; So each block is separated by 020000 hex.
                 284     ;
                 285     ; Registers used s0,s1,s7,s8,s9
                 286     ;
02C 01904        287     block_erase_command:    LOAD            s9, #0x04               ;define base address of block 3 = 040000
02D 20193        288     blocks_erase:           CALL            send_cr
02E 202D4        289                             CALL            send_confirm            ;confirm command with a 'Y' which must be upper case
02F 2011F        290                             CALL            read_from_uart          ;read command character from UART
030 20131        291                             CALL            send_to_uart            ;echo input
031 1DF59        292                             COMPARE         uart_data, #_character_y
032 3603F        293                             JUMP            nz, abort_erase
033 20193        294                             CALL            send_cr
034 20209        295                             CALL            send_erase_in_progress
035 20193        296                             CALL            send_cr
036 01800        297                             LOAD            s8, #0x00               ;define lower address of each block = xx0000
037 01700        298                             LOAD            s7, #0x00
038 01F2E        299     blocks_erase_loop:      LOAD            uart_data, #character_fullstop ;progress dots
039 20131        300                             CALL            send_to_uart
03A 20041        301                             CALL            sf_erase_block          ;erase block
03B 19902        302                             SUB             s9, #0x02               ;decrement base address by 1 block
03C 3E038        303                             JUMP            nc, blocks_erase_loop   ;repeat until block 0 is erased
03D 2022C        304                             CALL            send_ok
03E 22007        305                             JUMP            prompt
                 306     ;
03F 202F1        307     abort_erase:            CALL            send_abort
040 22007        308                             JUMP            prompt
                 309     ;
                 310     ;
                 311     ;**************************************************************************************
                 312     ; Erase a single 128K Byte block of the StrataFlash Memory
                 313     ;**************************************************************************************
                 314     ;
                 315     ; The 24-bit address of the block should be supplied in register set [s9,s8,s7].
                 316     ;
                 317     ; To erase a block the address must be set and then the block erase command (20 hex)
                 318     ; written to the memory followed by the write confirm command (D0 hex).
                 319     ;
                 320     ; The act of erasing a block may take up to 1 second to complete. This routine
                 321     ; waits for the memory to be ready before restoring the normal read array mode and
                 322     ; returning.
                 323     ;
                 324     ; Registers used s1,s7,s8,s9
                 325     ;
041 01120        326     sf_erase_block:         LOAD            s1, #0x20               ;block erase command
042 200EA        327                             CALL            sf_byte_write
043 011D0        328                             LOAD            s1, #0xd0               ;write confirm command
044 200EA        329                             CALL            sf_byte_write
045 200F7        330                             CALL            wait_sf_ready           ;wait for erase to complete
046 25000        331                             RETURN
                 332     ;
                 333     ;
                 334     ;**************************************************************************************
                 335     ; Program Command - Program StrataFLASH memory with data defined in an MCS file
                 336     ;**************************************************************************************
                 337     ;
047 20193        338     program_command:        CALL            send_cr
048 201E2        339                             CALL            send_waiting_mcs_file
049 2004C        340                             CALL            program_mcs
04A 2022C        341                             CALL            send_ok
04B 22007        342                             JUMP            prompt
                 343     ;
                 344     ;**************************************************************************************
                 345     ; Program StrataFLASH memory with data defined in an MCS file
                 346     ;**************************************************************************************
                 347     ;
                 348     ;Reads the MCS file from the UART and programs the Strata FLASH device at the locations.
                 349     ;specified by the file contents.
                 350     ;
                 351     ;This routine will continue until an end of file record is detected.
                 352     ;For each line of MCS received, the current address will be output so that
                 353     ;progress can be monitored.
                 354     ;
                 355     ;
04C 20057        356     program_mcs:            CALL            read_mcs_line           ;read line from UART
04D 20067        357                             CALL            mcs_address             ;find start address and record type
04E 1DB01        358                             COMPARE         sb, #0x01               ;test for end record
04F 31000        359                             RETURN          z                       ;end of programming
050 1DB04        360                             COMPARE         sb, #0x04               ;test for extended address record
051 3204C        361                             JUMP            z, program_mcs          ;no data with this record and upper address now correct
                 362     ;
                 363     ;Assume data record type 00 which is data so need to program specified number
                 364     ;of bytes into memory at correct address.
                 365     ;
052 2016D        366     write_spm_data:         CALL            send_hex_3bytes         ;send address to indicate progress
053 20193        367                             CALL            send_cr
054 0BA2B        368                             FETCH           sa, line_start          ;read number of data bytes to program
055 20077        369                             CALL            sf_buffer_write         ;write bytes to memory
056 2204C        370                             JUMP            program_mcs
                 371     ;
                 372     ;
                 373     ;**************************************************************************************
                 374     ;Read one line of an MCS file into scratch pad memory
                 375     ;**************************************************************************************
                 376     ;
                 377     ;Reads one line of MCS file format into scratch pad memory starting at location 'line_start'.
                 378     ;
                 379     ;The routine detects the line start character ':' ignoring any preceding characters. This
                 380     ;will remove any additional CR or LF characters.
                 381     ;
                 382     ;It then reads each subsequent pair of ASCII characters, converts them to true hex in the
                 383     ;range 00 to FF and stores them in scratch pad memory.
                 384     ;
                 385     ;The end of the line is determined by either a CR or LF character.
                 386     ;
                 387     ;The value last returned in register 'sE' will be the pointer to the location in
                 388     ;scratch pad memory following the last byte for the line read.
                 389     ;
057 01E2B        390     read_mcs_line:          LOAD            se, #line_start         ;initialise SPM memory pointer
058 2011F        391     wait_mcs_line_start:    CALL            read_from_uart          ;read character
059 1DF3A        392                             COMPARE         uart_data, #character_colon ;test for start character
05A 36058        393                             JUMP            nz, wait_mcs_line_start
05B 2011F        394     read_mcs_byte:          CALL            read_from_uart          ;read character
05C 1DF0D        395                             COMPARE         uart_data, #character_cr ;test for end of line
05D 31000        396                             RETURN          z
05E 1DF0A        397                             COMPARE         uart_data, #character_lf ;test for end of line
05F 31000        398                             RETURN          z
060 003F0        399                             LOAD            s3, uart_data           ;upper nibble character
061 2011F        400                             CALL            read_from_uart          ;read character
062 002F0        401                             LOAD            s2, uart_data           ;lower nibble character
063 20174        402                             CALL            ascii_byte_to_hex       ;convert to true hex value
064 2E0E0        403                             STORE           s0, @se                 ;write to SPM
065 11E01        404                             ADD             se, #0x01               ;increment pointer
066 2205B        405                             JUMP            read_mcs_byte
                 406     ;
                 407     ;
                 408     ;**************************************************************************************
                 409     ;Determine the current address for the line of an MCS file in scratch pad memory
                 410     ;**************************************************************************************
                 411     ;
                 412     ;Checks the existing line data stored in scratch pad memory starting at location
                 413     ;'line_start' and determines the current address.
                 414     ;
                 415     ;The address is in the register set [s9,s8,s7] before and after this routine is
                 416     ;executed because not all address bits are defined by a given line of MCS and
                 417     ;the undefined bits remain constant.
                 418     ;
                 419     ;A record type of 04 will update [s9].
                 420     ;A record type of 00 will update [s8,s7].
                 421     ;
                 422     ;On return, the register sB will contain the record type and
                 423     ;register sC will indicate the number of data bytes stored.
                 424     ;
067 01D2B        425     mcs_address:            LOAD            sd, #line_start         ;initialise SPM memory pointer
068 0ACD0        426                             FETCH           sc, @sd                 ;read number of bytes on line
069 11D03        427                             ADD             sd, #0x03               ;move to record type
06A 0ABD0        428                             FETCH           sb, @sd                 ;read record type
06B 1DB00        429                             COMPARE         sb, #0x00               ;test for data record
06C 32072        430                             JUMP            z, new_low_address
06D 1DB04        431                             COMPARE         sb, #0x04               ;test for data record
06E 35000        432                             RETURN          nz
06F 11D02        433                             ADD             sd, #0x02               ;read upper 8-bits
070 0A9D0        434                             FETCH           s9, @sd
071 25000        435                             RETURN
072 19D01        436     new_low_address:        SUB             sd, #0x01               ;read lower 8-bits
073 0A7D0        437                             FETCH           s7, @sd
074 19D01        438                             SUB             sd, #0x01               ;read middle 8-bits
075 0A8D0        439                             FETCH           s8, @sd
076 25000        440                             RETURN
                 441     ;
                 442     ;
                 443     ;**************************************************************************************
                 444     ; Write to Buffer of StrataFlash Memory and program
                 445     ;**************************************************************************************
                 446     ;
                 447     ; Writing to the buffer allows faster operation than writing individual bytes.
                 448     ; The buffer size is limited to 32 locations. To perform a buffer write the process
                 449     ; is as follows:-
                 450     ;   Write command for buffer write to StrataFLASH memory (E8 hex).
                 451     ;      Base address for writing should also be set.
                 452     ;   Read Status register and if not ready repeat command until it is.
                 453     ;   Write a value specifying the number of bytes to be written LESS ONE.
                 454     ;      In this program the number of bytes will be specified in register sA
                 455     ;      and this value needs to be decremented before writing to the memory.
                 456     ;   Write the correct number of actual data bytes with appropriate addresses.
                 457     ;      Ideally the addresses do not cross the boundary of 32 locations
                 458     ;      such that LSBs are always in the range 00000 to 11111 binary.
                 459     ;      Crossing the boundary is OK but will take longer to program.
                 460     ;   Write command to confirm operation (D0 hex).
                 461     ;   Read Status register and wait for ready.
                 462     ;
                 463     ;   This routine additionally restores the normal read array mode before returning.
                 464     ;
                 465     ; The number of bytes to be written should be supplied in register sA and must be
                 466     ; a value between 1 and 32 (01 and 20 hex).
                 467     ;
                 468     ; The 24-bit base address should be supplied in register set [s9,s8,s7].
                 469     ; On return, this will be increased by the number of locations written.
                 470     ;
                 471     ; Scratch pad memory locations starting at location defined by constant
                 472     ; 'data_start' should contain the data bytes to be written.
                 473     ;
                 474     ; The act of writing the buffer to the memory array may take up to 654us to complete.
                 475     ; The time taken to program is recorded by register pair [sE,sD]. Each count
                 476     ; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
                 477     ;
                 478     ; Registers used s0,s1,s7,s8,s9,sA,sD,sE
                 479     ;
                 480     ;
077 011E8        481     sf_buffer_write:        LOAD            s1, #0xe8               ;command for buffer write
078 200EA        482                             CALL            sf_byte_write
079 200E0        483                             CALL            sf_byte_read            ;read status register into s0
07A 0D080        484                             TEST            s0, #0x80               ;test ready/busy flag
07B 32077        485                             JUMP            z, sf_buffer_write      ;repeat command until ready
07C 001A0        486                             LOAD            s1, sa                  ;Specify number of bytes to write
07D 19101        487                             SUB             s1, #0x01               ;one less than actual number!
07E 200EA        488                             CALL            sf_byte_write
07F 0132F        489                             LOAD            s3, #data_start         ;point to data in scratch pad memory
080 0A130        490     write_buffer_loop:      FETCH           s1, @s3                 ;fetch data
081 200EA        491                             CALL            sf_byte_write           ;write to buffer
082 11701        492                             ADD             s7, #0x01               ;increment address
083 13800        493                             ADDCY           s8, #0x00
084 13900        494                             ADDCY           s9, #0x00
085 11301        495                             ADD             s3, #0x01               ;increment SPM pointer
086 19A01        496                             SUB             sa, #0x01               ;count bytes remaining
087 36080        497                             JUMP            nz, write_buffer_loop
088 011D0        498                             LOAD            s1, #0xd0               ;command to confirm write
089 200EA        499                             CALL            sf_byte_write
08A 200F7        500                             CALL            wait_sf_ready           ;wait for program to complete and set read array mode
08B 25000        501                             RETURN
                 502     ;
                 503     ;
                 504     ;**************************************************************************************
                 505     ; Write Command - Write one byte to specified address
                 506     ;**************************************************************************************
                 507     ;
08C 202FE        508     write_command:          CALL            send_address            ;obtain 24-bit address 000000 to FFFFFF
08D 2018D        509                             CALL            obtain_8bits
08E 3A08C        510                             JUMP            c, write_command        ;bad input address
08F 00900        511                             LOAD            s9, s0
090 2018D        512                             CALL            obtain_8bits
091 3A08C        513                             JUMP            c, write_command        ;bad input address
092 00800        514                             LOAD            s8, s0
093 2018D        515                             CALL            obtain_8bits
094 3A08C        516                             JUMP            c, write_command        ;bad input address
095 00700        517                             LOAD            s7, s0
096 2030E        518     get_data:               CALL            send_data               ;obtain 8-bit data 00 to FF into s0
097 2018D        519                             CALL            obtain_8bits
098 3A096        520                             JUMP            c, get_data             ;bad input data
099 2009D        521                             CALL            sf_single_byte_write
09A 20193        522                             CALL            send_cr
09B 2022C        523                             CALL            send_ok
09C 22007        524                             JUMP            prompt
                 525     ;
                 526     ;
                 527     ;**************************************************************************************
                 528     ; Write a single byte to StrataFlash Memory
                 529     ;**************************************************************************************
                 530     ;
                 531     ; To write a single byte to StrataFLASH memory the address must be set and the
                 532     ; single-word/byte program command (40 hex) sent to the memory. Then the data byte can
                 533     ; be written to the memory using the same address.
                 534     ;
                 535     ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 536     ; Register s0 should contain the byte data to be written to the memory.
                 537     ;
                 538     ; The act of writing the memory array may take up to 175us to complete. This routine
                 539     ; waits for the memory to be ready before restoring the normal read array mode and
                 540     ; returning. The time taken to program is recorded by register pair [sE,sD]. Each count
                 541     ; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
                 542     ;
                 543     ; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
                 544     ;
                 545     ; Registers used s0,s1,s7,s8,s9
                 546     ;
09D 01140        547     sf_single_byte_write:   LOAD            s1, #0x40               ;command for single byte program
09E 200EA        548                             CALL            sf_byte_write
09F 00100        549                             LOAD            s1, s0                  ;write data to be programmed
0A0 200EA        550                             CALL            sf_byte_write
0A1 200F7        551                             CALL            wait_sf_ready           ;wait for program to complete
0A2 25000        552                             RETURN
                 553     ;
                 554     ;
                 555     ;**************************************************************************************
                 556     ;Read Command - Read one page of memory at specified address
                 557     ;**************************************************************************************
                 558     ;
0A3 202FE        559     read_command:           CALL            send_address            ;obtain 24-bit address 000000 to FFFFFF
0A4 2018D        560                             CALL            obtain_8bits            ;read value from UART
0A5 3A0A3        561                             JUMP            c, read_command         ;bad input address
0A6 00900        562                             LOAD            s9, s0
0A7 2018D        563                             CALL            obtain_8bits
0A8 3A0A3        564                             JUMP            c, read_command         ;bad input address
0A9 00800        565                             LOAD            s8, s0
0AA 2018D        566                             CALL            obtain_8bits
0AB 3A0A3        567                             JUMP            c, read_command         ;bad input address
0AC 00700        568                             LOAD            s7, s0
0AD 20193        569                             CALL            send_cr
0AE 200B1        570                             CALL            send_sf_page
0AF 2022C        571                             CALL            send_ok
0B0 22007        572                             JUMP            prompt
                 573     ;
                 574     ;The start address should be provided in register set [s9,s8,s7].
                 575     ;The display will be next 256 bytes displayed as 16 lines of 16 bytes
                 576     ;with each line commencing with the address of the first byte.
                 577     ;
0B1 01610        578     send_sf_page:           LOAD            s6, #0x10               ;16 lines to display
0B2 20193        579     send_sf_line:           CALL            send_cr
0B3 2016D        580                             CALL            send_hex_3bytes         ;display address
0B4 20196        581                             CALL            send_space
0B5 01510        582                             LOAD            s5, #0x10               ;16 bytes to display on a line
0B6 20196        583     send_sf_byte:           CALL            send_space
0B7 200E0        584                             CALL            sf_byte_read            ;read byte into s0
0B8 11701        585                             ADD             s7, #0x01               ;increment StrataFLASH address
0B9 13800        586                             ADDCY           s8, #0x00
0BA 13900        587                             ADDCY           s9, #0x00
0BB 20167        588                             CALL            send_hex_byte           ;display byte
0BC 19501        589                             SUB             s5, #0x01               ;count bytes per line
0BD 360B6        590                             JUMP            nz, send_sf_byte
0BE 19601        591                             SUB             s6, #0x01               ;count lines
0BF 360B2        592                             JUMP            nz, send_sf_line
0C0 20193        593                             CALL            send_cr
0C1 25000        594                             RETURN
                 595     ;
                 596     ;
                 597     ;**************************************************************************************
                 598     ; ID Command - Read and display the device information for the StrataFLASH FLASH memory
                 599     ;**************************************************************************************
                 600     ;
                 601     ; Normal response should be
                 602     ;   Device Manufacturer Code (Intel) = 89 hex
                 603     ;   Memory ID code for 128Mbit = 18 hex
                 604     ;
                 605     ; To read the device information the Read device information command (90)
                 606     ; must be written to the memory. The information is read back but assumes
                 607     ; that 16-bit words are being used and hence address bit0 is not really used.
                 608     ; hence addresses 000000 and 0000001 both return the Device Manufacturer Code and
                 609     ; addresses 000002 and 0000003 both return the Memory ID code.
                 610     ;
                 611     ; After reading the device information the read array command is written to the
                 612     ; device to put it back to normal read mode.
                 613     ;
                 614     ; Registers used s0,s7,s8,s9
                 615     ;
0C2 20193        616     sf_information:         CALL            send_cr                 ;send 'ID=' to terminal
0C3 202C6        617                             CALL            send_id
0C4 01F3D        618                             LOAD            uart_data, #character_equals
0C5 20131        619                             CALL            send_to_uart
0C6 20196        620                             CALL            send_space
0C7 01900        621                             LOAD            s9, #0x00               ;define base address 000000
0C8 01800        622                             LOAD            s8, #0x00
0C9 01700        623                             LOAD            s7, #0x00
0CA 01190        624                             LOAD            s1, #0x90               ;command to read device information
0CB 200EA        625                             CALL            sf_byte_write
0CC 200E0        626                             CALL            sf_byte_read            ;read Device Manufacturer Code into s0
0CD 20167        627                             CALL            send_hex_byte           ;display byte
0CE 20196        628                             CALL            send_space
0CF 01702        629                             LOAD            s7, #0x02               ;change address
0D0 200E0        630                             CALL            sf_byte_read            ;read Memory ID code into s0
0D1 20167        631                             CALL            send_hex_byte           ;display byte
0D2 20193        632                             CALL            send_cr
0D3 200F4        633                             CALL            set_sf_read_array_mode  ;restore normal read array mode
0D4 22007        634                             JUMP            prompt
                 635     ;
                 636     ;
                 637     ;**************************************************************************************
                 638     ; Read StrataFLASH status register
                 639     ;**************************************************************************************
                 640     ;
                 641     ; The main reason for reading the status register is to determine when the memory
                 642     ; is ready or busy. This information is provided by bit7 (0=busy and 1=ready).
                 643     ;
                 644     ; The lower bits all indicate errors of some kind and therefore the only desirable
                 645     ; response is 00 hex or 80 hex. In this program, no error checking or clearing
                 646     ; is performed and the way this routine is executed from the menu only 80 hex is
                 647     ; expected.
                 648     ;
                 649     ; To read the status register the read status register command must be written to
                 650     ; the device. All subsequent reads are then result in the return of the status
                 651     ; register. A different read command must be written to the device to stop this
                 652     ; mode.
                 653     ;
                 654     ; This mode is also entered automatically when performing program and erase operations.
                 655     ;
0D5 01900        656     sf_status:              LOAD            s9, #0x00               ;define base address 000000
0D6 01800        657                             LOAD            s8, #0x00
0D7 01700        658                             LOAD            s7, #0x00
0D8 01170        659                             LOAD            s1, #0x70               ;command to read status register
0D9 200EA        660                             CALL            sf_byte_write
0DA 20193        661                             CALL            send_cr
0DB 200E0        662                             CALL            sf_byte_read            ;read status register into s0
0DC 20167        663                             CALL            send_hex_byte           ;display byte
0DD 20193        664                             CALL            send_cr
0DE 200F4        665                             CALL            set_sf_read_array_mode
0DF 22007        666                             JUMP            prompt
                 667     ;
                 668     ;
                 669     ;**************************************************************************************
                 670     ; Read a byte from StrataFlash Memory
                 671     ;**************************************************************************************
                 672     ;
                 673     ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 674     ; Register s0 will return the byte data retrieved from the memory.
                 675     ;
                 676     ; To read a byte, the address needs to be set up on the address lines
                 677     ; and the controls set as follows
                 678     ;    SF_read = 1 - disable Spartan data outputs and enable StrataFlash outputs (OE=0)
                 679     ;      SF_ce = 0 - enable StrataFLASH memory
                 680     ;      SF_we = 1 - Write enable off
                 681     ;
                 682     ; The access time of the memory is 75ns. This is equivalent to 3.75 clock cycles at
                 683     ; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
                 684     ; provides adequate delay for the memory to be accessed.
                 685     ;
                 686     ; Registers used s0,s1,s7,s8,s9
                 687     ;
0E0 2D980        688     sf_byte_read:           OUTPUT          s9, sf_addr_hi_port     ;set 24-bit address
0E1 2D840        689                             OUTPUT          s8, sf_addr_mi_port
0E2 2D720        690                             OUTPUT          s7, sf_addr_lo_port
0E3 01105        691                             LOAD            s1, #0x05               ;set controls
0E4 2D108        692                             OUTPUT          s1, sf_control_port
0E5 01106        693                             LOAD            s1, #0x06               ;>75ns delay
0E6 01106        694                             LOAD            s1, #0x06               ;but do something useful!
0E7 09002        695                             INPUT           s0, sf_data_in_port     ;read data byte
0E8 2D108        696                             OUTPUT          s1, sf_control_port     ;clear controls
0E9 25000        697                             RETURN
                 698     ;
                 699     ;
                 700     ;**************************************************************************************
                 701     ; Write data or command byte to StrataFlash Memory
                 702     ;**************************************************************************************
                 703     ;
                 704     ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 705     ; Register s1 should contain the byte to be written to the memory.
                 706     ;
                 707     ; To write a byte, the address needs to be set up on the address lines
                 708     ; and the controls set as follows
                 709     ;    SF_read = 0 - enable Spartan data outputs and disable StrataFlash outputs (OE=1)
                 710     ;      SF_ce = 0 - enable StrataFLASH memory
                 711     ;      SF_we = 0 - Write enable on
                 712     ;
                 713     ; The setup time of the memory is 60ns. This is equivalent to 3 clock cycles at
                 714     ; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
                 715     ; provides adequate delay for the memory.
                 716     ;
                 717     ; Registers used s1,s7,s8,s9
                 718     ;
0EA 2D980        719     sf_byte_write:          OUTPUT          s9, sf_addr_hi_port     ;set 24-bit address
0EB 2D840        720                             OUTPUT          s8, sf_addr_mi_port
0EC 2D720        721                             OUTPUT          s7, sf_addr_lo_port
0ED 2D110        722                             OUTPUT          s1, sf_data_out_port    ;set data byte to be written
0EE 01100        723                             LOAD            s1, #0x00               ;set controls
0EF 2D108        724                             OUTPUT          s1, sf_control_port
0F0 01106        725                             LOAD            s1, #0x06               ;>60ns delay
0F1 01106        726                             LOAD            s1, #0x06               ;but do something useful!
0F2 2D108        727                             OUTPUT          s1, sf_control_port     ;clear controls
0F3 25000        728                             RETURN
                 729     ;
                 730     ;
                 731     ;**************************************************************************************
                 732     ; Set 'Read Array' mode on StrataFLASH
                 733     ;**************************************************************************************
                 734     ;
                 735     ; The read array mode is the default mode of the memory and allows the contents
                 736     ; of the memory to be read based on the supplied address.
                 737     ;
                 738     ; Read array is the default mode of the device, but it must also be placed back
                 739     ; into this mode after programming, erasing or reading the status register.
                 740     ;
                 741     ; The read array command (FF hex) is written to the Strata flash memory.
                 742     ;
                 743     ; Registers used s1,s7,s8,s9
                 744     ;
0F4 011FF        745     set_sf_read_array_mode: LOAD            s1, #0xff               ;command to read array
0F5 200EA        746                             CALL            sf_byte_write
0F6 25000        747                             RETURN
                 748     ;
                 749     ;
                 750     ;**************************************************************************************
                 751     ; Wait for StrataFLASH to be ready
                 752     ;**************************************************************************************
                 753     ;
                 754     ; This routine will typically be used after instigating a program or erase
                 755     ; command. It continuously reads the StrataFLASH status register and tests the
                 756     ; information provided by bit7 which indicates if the memory is busy(0) or ready(1).
                 757     ; The routine waits for the ready condition before sending a read array command
                 758     ; which puts the memory back to normal read mode.
                 759     ;
                 760     ; During the polling process, a counter formed by register pair [sE,sD] records
                 761     ; approximately how long the memory is busy. This can be used to evaluate programming
                 762     ; and erase times if required. The timing loop is 15 instructions which is equivalent
                 763     ; to 30 clock cycles (600ns at 50MHz)
                 764     ;
                 765     ; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
                 766     ;
                 767     ;
0F7 01E00        768     wait_sf_ready:          LOAD            se, #0x00               ;clear 16-bit counter timer
0F8 01D00        769                             LOAD            sd, #0x00
0F9 11D01        770     wait_sf_loop:           ADD             sd, #0x01               ;increment counter timer
0FA 13E00        771                             ADDCY           se, #0x00
0FB 200E0        772                             CALL            sf_byte_read            ;read status register into s0
0FC 0D080        773                             TEST            s0, #0x80               ;test ready/busy flag
0FD 320F9        774                             JUMP            z, wait_sf_loop
0FE 200F4        775                             CALL            set_sf_read_array_mode  ;restore normal read array mode
0FF 25000        776                             RETURN
                 777     ;
                 778     ;
                 779     ;**************************************************************************************
                 780     ; Send 16-bit value in register pair [sE,sD] to UART
                 781     ;**************************************************************************************
                 782     ;
                 783     ; In this program the register pair [sE,sD] indicates the programming time of the
                 784     ; StrataFLASH memory in 600ns increments. This routine can be used to display that
                 785     ; value if required.
                 786     ;
100 20193        787     send_counter_timer:     CALL            send_cr
101 000E0        788                             LOAD            s0, se
102 20167        789                             CALL            send_hex_byte
103 000D0        790                             LOAD            s0, sd
104 20167        791                             CALL            send_hex_byte
105 20193        792                             CALL            send_cr
106 25000        793                             RETURN
                 794     ;
                 795     ;
                 796     ;**************************************************************************************
                 797     ;Software delay routines
                 798     ;**************************************************************************************
                 799     ;
                 800     ;Delay of 1us.
                 801     ;
                 802     ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 803     ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 804     ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 805     ;
                 806     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 807     ;
                 808     ;Registers used s0
                 809     ;
107 0100B        810     delay_1us:              LOAD            s0, #delay_1us_constant
108 19001        811     wait_1us:               SUB             s0, #0x01
109 36108        812                             JUMP            nz, wait_1us
10A 25000        813                             RETURN
                 814     ;
                 815     ;Delay of 40us.
                 816     ;
                 817     ;Registers used s0, s1
                 818     ;
10B 01128        819     delay_40us:             LOAD            s1, #0x28               ;40 x 1us = 40us
10C 20107        820     wait_40us:              CALL            delay_1us
10D 19101        821                             SUB             s1, #0x01
10E 3610C        822                             JUMP            nz, wait_40us
10F 25000        823                             RETURN
                 824     ;
                 825     ;
                 826     ;Delay of 1ms.
                 827     ;
                 828     ;Registers used s0, s1, s2
                 829     ;
110 01219        830     delay_1ms:              LOAD            s2, #0x19               ;25 x 40us = 1ms
111 2010B        831     wait_1ms:               CALL            delay_40us
112 19201        832                             SUB             s2, #0x01
113 36111        833                             JUMP            nz, wait_1ms
114 25000        834                             RETURN
                 835     ;
                 836     ;Delay of 20ms.
                 837     ;
                 838     ;Delay of 20ms used during initialisation.
                 839     ;
                 840     ;Registers used s0, s1, s2, s3
                 841     ;
115 01314        842     delay_20ms:             LOAD            s3, #0x14               ;20 x 1ms = 20ms
116 20110        843     wait_20ms:              CALL            delay_1ms
117 19301        844                             SUB             s3, #0x01
118 36116        845                             JUMP            nz, wait_20ms
119 25000        846                             RETURN
                 847     ;
                 848     ;Delay of approximately 1 second.
                 849     ;
                 850     ;Registers used s0, s1, s2, s3, s4
                 851     ;
11A 01414        852     delay_1s:               LOAD            s4, #0x14               ;50 x 20ms = 1000ms
11B 20115        853     wait_1s:                CALL            delay_20ms
11C 19401        854                             SUB             s4, #0x01
11D 3611B        855                             JUMP            nz, wait_1s
11E 25000        856                             RETURN
                 857     ;
                 858     ;
                 859     ;**************************************************************************************
                 860     ;UART communication routines
                 861     ;**************************************************************************************
                 862     ;
                 863     ;Read one character from the UART
                 864     ;
                 865     ;Character read will be returned in a register called 'UART_data'.
                 866     ;
                 867     ;The routine first tests the receiver FIFO buffer to see if data is present.
                 868     ;If the FIFO is empty, the routine waits until there is a character to read.
                 869     ;As this could take any amount of time the wait loop could include a call to a
                 870     ;subroutine which performs a useful function.
                 871     ;
                 872     ;If the received character is an XOFF, then the routine will then wait
                 873     ;for an XON to be received. This means that the rest of the program is held
                 874     ;in suspense and therefore it can not transmit. Once an XON is received, it will
                 875     ;again wait for a normal character before returning.
                 876     ;
                 877     ;NOTE: Characters between the XOFF and XON will be ignored in this version of the
                 878     ;program!!!
                 879     ;
                 880     ;Interrupt is disabled during this routine to prevent a false situation. If the
                 881     ;receiver half-full flag went High it should result in an interrupt transmitting
                 882     ;an XOFF character. However, if this routine were able to read the receiver buffer
                 883     ;at just about the same as the hardware detects the half-full flag, then it could
                 884     ;think that an XON needs to be transmitted.
                 885     ;
                 886     ;
                 887     ;Registers used s0 and UART_data
                 888     ;
11F 28000        889     read_from_uart:         DISABLE         interrupt
120 09000        890     wait_rx_character:      INPUT           s0, status_port         ;test Rx_FIFO buffer
121 0D008        891                             TEST            s0, #rx_data_present
122 36124        892                             JUMP            nz, read_character
123 22120        893                             JUMP            wait_rx_character
124 09F01        894     read_character:         INPUT           uart_data, uart_read_port ;read from FIFO
125 1DF13        895                             COMPARE         uart_data, #character_xoff ;test for XOFF
126 32129        896                             JUMP            z, wait_xon
127 28001        897                             ENABLE          interrupt               ;normal finish
128 25000        898                             RETURN
129 09000        899     wait_xon:               INPUT           s0, status_port         ;test Rx_FIFO buffer
12A 0D008        900                             TEST            s0, #rx_data_present
12B 3612D        901                             JUMP            nz, read_xon
12C 22129        902                             JUMP            wait_xon
12D 09F01        903     read_xon:               INPUT           uart_data, uart_read_port ;read from FIFO
12E 1DF11        904                             COMPARE         uart_data, #character_xon ;test for XON
12F 32120        905                             JUMP            z, wait_rx_character    ;now wait for normal character
130 22129        906                             JUMP            wait_xon                ;continue to wait for XON
                 907     ;
                 908     ;
                 909     ;
                 910     ;Transmit one character to the UART
                 911     ;
                 912     ;Character supplied in register called 'UART_data'.
                 913     ;
                 914     ;The routine first tests the transmit FIFO buffer is empty.
                 915     ;If the FIFO currently has any data, the routine waits until it is empty.
                 916     ;Ultimately this means that only one character is sent at a time which
                 917     ;could be important if the PC at the other end of the link transmits
                 918     ;an XOFF and needs the flow of data to terminate as soon as possible.
                 919     ;
                 920     ;Registers used s0
                 921     ;
131 09000        922     send_to_uart:           INPUT           s0, status_port         ;test Tx_FIFO buffer
132 0D001        923                             TEST            s0, #tx_data_present
133 32135        924                             JUMP            z, uart_write
134 22131        925                             JUMP            send_to_uart
135 2DF04        926     uart_write:             OUTPUT          uart_data, uart_write_port
136 25000        927                             RETURN
                 928     ;
                 929     ;
                 930     ;**************************************************************************************
                 931     ;Useful ASCII conversion and handling routines
                 932     ;**************************************************************************************
                 933     ;
                 934     ;Convert value provided in register s0 into ASCII characters
                 935     ;
                 936     ;The value provided must in the range 0 to 99 and will be converted into
                 937     ;two ASCII characters.
                 938     ;     The number of 'tens' will be represented by an ASCII character returned in register s1.
                 939     ;     The number of 'units' will be represented by an ASCII character returned in register s0.
                 940     ;
                 941     ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex added to
                 942     ;the actual decimal value.
                 943     ;
                 944     ;Registers used s0 and s1.
                 945     ;
137 01130        946     decimal_to_ascii:       LOAD            s1, #0x30               ;load 'tens' counter with ASCII for '0'
138 11101        947     test_for_ten:           ADD             s1, #0x01               ;increment 'tens' value
139 1900A        948                             SUB             s0, #0x0a               ;try to subtract 10 from the supplied value
13A 3E138        949                             JUMP            nc, test_for_ten        ;repeat if subtraction was possible without underflow.
13B 19101        950                             SUB             s1, #0x01               ;'tens' value one less ten due to underflow
13C 1103A        951                             ADD             s0, #0x3a               ;restore units value (the remainder) and convert to ASCII
13D 25000        952                             RETURN
                 953     ;
                 954     ;
                 955     ;
                 956     ;Convert character to upper case
                 957     ;
                 958     ;The character supplied in register s0.
                 959     ;If the character is in the range 'a' to 'z', it is converted
                 960     ;to the equivalent upper case character in the range 'A' to 'Z'.
                 961     ;All other characters remain unchanged.
                 962     ;
                 963     ;Registers used s0.
                 964     ;
13E 1D061        965     upper_case:             COMPARE         s0, #0x61               ;eliminate character codes below 'a' (61 hex)
13F 39000        966                             RETURN          c
140 1D07B        967                             COMPARE         s0, #0x7b               ;eliminate character codes above 'z' (7A hex)
141 3D000        968                             RETURN          nc
142 030DF        969                             AND             s0, #0xdf               ;mask bit5 to convert to upper case
143 25000        970                             RETURN
                 971     ;
                 972     ;
                 973     ;Convert character '0' to '9' to numerical value in range 0 to 9
                 974     ;
                 975     ;The character supplied in register s0. If the character is in the
                 976     ;range '0' to '9', it is converted to the equivalent decimal value.
                 977     ;Characters not in the range '0' to '9' are signified by the return
                 978     ;with the CARRY flag set.
                 979     ;
                 980     ;Registers used s0.
                 981     ;
144 110C6        982     _1char_to_value:        ADD             s0, #0xc6               ;reject character codes above '9' (39 hex)
145 39000        983                             RETURN          c                       ;carry flag is set
146 190F6        984                             SUB             s0, #0xf6               ;reject character codes below '0' (30 hex)
147 25000        985                             RETURN                                  ;carry is set if value not in range
                 986     ;
                 987     ;
                 988     ;Determine the numerical value of a two character decimal string held in
                 989     ;scratch pad memory such the result is in the range 0 to 99 (00 to 63 hex).
                 990     ;
                 991     ;The string must be stored in two consecutive memory locations and the
                 992     ;location of the first (tens) character supplied in the s1 register.
                 993     ;The result is provided in register s2. Strings not using characters in the
                 994     ;range '0' to '9' are signified by the return with the CARRY flag set.
                 995     ;
                 996     ;Registers used s0, s1 and s2.
                 997     ;
148 0A010        998     _2char_to_value:        FETCH           s0, @s1                 ;read 'tens' character
149 20144        999                             CALL            _1char_to_value         ;convert to numerical value
14A 39000       1000                             RETURN          c                       ;bad character - CARRY set
14B 00200       1001                             LOAD            s2, s0
14C 14206       1002                             SL0             s2                      ;multiply 'tens' value by 10 (0A hex)
14D 14206       1003                             SL0             s2
14E 10200       1004                             ADD             s2, s0
14F 14206       1005                             SL0             s2
150 11101       1006                             ADD             s1, #0x01               ;read 'units' character
151 0A010       1007                             FETCH           s0, @s1
152 20144       1008                             CALL            _1char_to_value         ;convert to numerical value
153 39000       1009                             RETURN          c                       ;bad character - CARRY set
154 10200       1010                             ADD             s2, s0                  ;add units to result and clear CARRY flag
155 25000       1011                             RETURN
                1012     ;
                1013     ;
                1014     ;Convert hexadecimal value provided in register s0 into ASCII characters
                1015     ;
                1016     ;The value provided must can be any value in the range 00 to FF and will be converted into
                1017     ;two ASCII characters.
                1018     ;     The upper nibble will be represented by an ASCII character returned in register s2.
                1019     ;     The lower nibble will be represented by an ASCII character returned in register s1.
                1020     ;
                1021     ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                1022     ;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                1023     ;hexadecimal requiring a further addition of 07 to the 30 already added.
                1024     ;
                1025     ;Registers used s0, s1 and s2.
                1026     ;
156 00100       1027     hex_byte_to_ascii:      LOAD            s1, s0                  ;remember value supplied
157 1400E       1028                             SR0             s0                      ;isolate upper nibble
158 1400E       1029                             SR0             s0
159 1400E       1030                             SR0             s0
15A 1400E       1031                             SR0             s0
15B 20162       1032                             CALL            hex_to_ascii            ;convert
15C 00200       1033                             LOAD            s2, s0                  ;upper nibble value in s2
15D 00010       1034                             LOAD            s0, s1                  ;restore complete value
15E 0300F       1035                             AND             s0, #0x0f               ;isolate lower nibble
15F 20162       1036                             CALL            hex_to_ascii            ;convert
160 00100       1037                             LOAD            s1, s0                  ;lower nibble value in s1
161 25000       1038                             RETURN
                1039     ;
                1040     ;Convert hexadecimal value provided in register s0 into ASCII character
                1041     ;
                1042     ;Register used s0
                1043     ;
162 1900A       1044     hex_to_ascii:           SUB             s0, #0x0a               ;test if value is in range 0 to 9
163 3A165       1045                             JUMP            c, number_char
164 11007       1046                             ADD             s0, #0x07               ;ASCII char A to F in range 41 to 46
165 1103A       1047     number_char:            ADD             s0, #0x3a               ;ASCII char 0 to 9 in range 30 to 40
166 25000       1048                             RETURN
                1049     ;
                1050     ;
                1051     ;Send the two character HEX value of the register contents 's0' to the UART
                1052     ;
                1053     ;Registers used s0, s1, s2
                1054     ;
167 20156       1055     send_hex_byte:          CALL            hex_byte_to_ascii
168 00F20       1056                             LOAD            uart_data, s2
169 20131       1057                             CALL            send_to_uart
16A 00F10       1058                             LOAD            uart_data, s1
16B 20131       1059                             CALL            send_to_uart
16C 25000       1060                             RETURN
                1061     ;
                1062     ;
                1063     ;
                1064     ;Send the six character HEX value of the register contents [s9,s8,s7] to the UART
                1065     ;
                1066     ;Registers used s0, s1, s2
                1067     ;
16D 00090       1068     send_hex_3bytes:        LOAD            s0, s9
16E 20167       1069                             CALL            send_hex_byte
16F 00080       1070                             LOAD            s0, s8
170 20167       1071                             CALL            send_hex_byte
171 00070       1072                             LOAD            s0, s7
172 20167       1073                             CALL            send_hex_byte
173 25000       1074                             RETURN
                1075     ;
                1076     ;
                1077     ;Convert the HEX ASCII characters contained in 's3' and 's2' into
                1078     ;an equivalent hexadecimal value in register 's0'.
                1079     ;     The upper nibble is represented by an ASCII character in register s3.
                1080     ;     The lower nibble is represented by an ASCII character in register s2.
                1081     ;
                1082     ;Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
                1083     ;will be set on return.
                1084     ;
                1085     ;Registers used s0, s2 and s3.
                1086     ;
174 00030       1087     ascii_byte_to_hex:      LOAD            s0, s3                  ;Take upper nibble
175 20181       1088                             CALL            ascii_to_hex            ;convert to value
176 39000       1089                             RETURN          c                       ;reject if out of range
177 00300       1090                             LOAD            s3, s0                  ;remember value
178 14306       1091                             SL0             s3                      ;multiply value by 16 to put in upper nibble
179 14306       1092                             SL0             s3
17A 14306       1093                             SL0             s3
17B 14306       1094                             SL0             s3
17C 00020       1095                             LOAD            s0, s2                  ;Take lower nibble
17D 20181       1096                             CALL            ascii_to_hex            ;convert to value
17E 39000       1097                             RETURN          c                       ;reject if out of range
17F 04030       1098                             OR              s0, s3                  ;merge in the upper nibble with CARRY reset
180 25000       1099                             RETURN
                1100     ;
                1101     ;
                1102     ;Routine to convert ASCII data in 's0' to an equivalent HEX value.
                1103     ;
                1104     ;If character is not valid for hex, then CARRY is set on return.
                1105     ;
                1106     ;Register used s0
                1107     ;
181 110B9       1108     ascii_to_hex:           ADD             s0, #0xb9               ;test for above ASCII code 46 ('F')
182 39000       1109                             RETURN          c
183 190E9       1110                             SUB             s0, #0xe9               ;normalise 0 to 9 with A-F in 11 to 16 hex
184 39000       1111                             RETURN          c                       ;reject below ASCII code 30 ('0')
185 19011       1112                             SUB             s0, #0x11               ;isolate A-F down to 00 to 05 hex
186 3E18B       1113                             JUMP            nc, ascii_letter
187 11007       1114                             ADD             s0, #0x07               ;test for above ASCII code 46 ('F')
188 39000       1115                             RETURN          c
189 190F6       1116                             SUB             s0, #0xf6               ;convert to range 00 to 09
18A 25000       1117                             RETURN
18B 1100A       1118     ascii_letter:           ADD             s0, #0x0a               ;convert to range 0A to 0F
18C 25000       1119                             RETURN
                1120     ;
                1121     ;
                1122     ;Read two hex characters from UART and convert to single byte data
                1123     ;
18D 20022       1124     obtain_8bits:           CALL            read_upper_case         ;obtain one byte from UART
18E 00300       1125                             LOAD            s3, s0
18F 20022       1126                             CALL            read_upper_case
190 00200       1127                             LOAD            s2, s0
191 20174       1128                             CALL            ascii_byte_to_hex
192 25000       1129                             RETURN
                1130     ;
                1131     ;**************************************************************************************
                1132     ;Text messages
                1133     ;**************************************************************************************
                1134     ;
                1135     ;
                1136     ;Send Carriage Return to the UART
                1137     ;
193 01F0D       1138     send_cr:                LOAD            uart_data, #character_cr
194 20131       1139                             CALL            send_to_uart
195 25000       1140                             RETURN
                1141     ;
                1142     ;Send a space to the UART
                1143     ;
196 01F20       1144     send_space:             LOAD            uart_data, #character_space
197 20131       1145                             CALL            send_to_uart
198 25000       1146                             RETURN
                1147     ;
                1148     ;
                1149     ;Send 'PicoBlaze NOR FLASH Programmer' string to the UART
                1150     ;
199 20193       1151     send_welcome:           CALL            send_cr
19A 20193       1152                             CALL            send_cr
19B 01F50       1153                             LOAD            uart_data, #_character_p
19C 20131       1154                             CALL            send_to_uart
19D 01F69       1155                             LOAD            uart_data, #character_i
19E 20131       1156                             CALL            send_to_uart
19F 01F63       1157                             LOAD            uart_data, #character_c
1A0 20131       1158                             CALL            send_to_uart
1A1 01F6F       1159                             LOAD            uart_data, #character_o
1A2 20131       1160                             CALL            send_to_uart
1A3 01F42       1161                             LOAD            uart_data, #_character_b
1A4 20131       1162                             CALL            send_to_uart
1A5 01F6C       1163                             LOAD            uart_data, #character_l
1A6 20131       1164                             CALL            send_to_uart
1A7 01F61       1165                             LOAD            uart_data, #character_a
1A8 20131       1166                             CALL            send_to_uart
1A9 01F7A       1167                             LOAD            uart_data, #character_z
1AA 20131       1168                             CALL            send_to_uart
1AB 01F65       1169                             LOAD            uart_data, #character_e
1AC 20131       1170                             CALL            send_to_uart
1AD 20196       1171                             CALL            send_space
1AE 01F4E       1172                             LOAD            uart_data, #_character_n
1AF 20131       1173                             CALL            send_to_uart
1B0 01F4F       1174                             LOAD            uart_data, #_character_o
1B1 20131       1175                             CALL            send_to_uart
1B2 01F52       1176                             LOAD            uart_data, #_character_r
1B3 20131       1177                             CALL            send_to_uart
1B4 20196       1178                             CALL            send_space
1B5 01F46       1179                             LOAD            uart_data, #_character_f
1B6 20131       1180                             CALL            send_to_uart
1B7 01F4C       1181                             LOAD            uart_data, #_character_l
1B8 20131       1182                             CALL            send_to_uart
1B9 01F41       1183                             LOAD            uart_data, #_character_a
1BA 20131       1184                             CALL            send_to_uart
1BB 01F53       1185                             LOAD            uart_data, #_character_s
1BC 20131       1186                             CALL            send_to_uart
1BD 01F48       1187                             LOAD            uart_data, #_character_h
1BE 20131       1188                             CALL            send_to_uart
1BF 20196       1189                             CALL            send_space
1C0 01F50       1190                             LOAD            uart_data, #_character_p
1C1 20131       1191                             CALL            send_to_uart
1C2 01F72       1192                             LOAD            uart_data, #character_r
1C3 20131       1193                             CALL            send_to_uart
1C4 01F6F       1194                             LOAD            uart_data, #character_o
1C5 20131       1195                             CALL            send_to_uart
1C6 01F67       1196                             LOAD            uart_data, #character_g
1C7 20131       1197                             CALL            send_to_uart
1C8 01F72       1198                             LOAD            uart_data, #character_r
1C9 20131       1199                             CALL            send_to_uart
1CA 01F61       1200                             LOAD            uart_data, #character_a
1CB 20131       1201                             CALL            send_to_uart
1CC 01F6D       1202                             LOAD            uart_data, #character_m
1CD 20131       1203                             CALL            send_to_uart
1CE 01F6D       1204                             LOAD            uart_data, #character_m
1CF 20131       1205                             CALL            send_to_uart
1D0 01F65       1206                             LOAD            uart_data, #character_e
1D1 20131       1207                             CALL            send_to_uart
1D2 01F72       1208                             LOAD            uart_data, #character_r
1D3 20131       1209                             CALL            send_to_uart
1D4 20196       1210                             CALL            send_space
1D5 01F76       1211                             LOAD            uart_data, #character_v
1D6 20131       1212                             CALL            send_to_uart
1D7 01F31       1213                             LOAD            uart_data, #character_1
1D8 20131       1214                             CALL            send_to_uart
1D9 01F2E       1215                             LOAD            uart_data, #character_fullstop
1DA 20131       1216                             CALL            send_to_uart
1DB 01F30       1217                             LOAD            uart_data, #character_0
1DC 20131       1218                             CALL            send_to_uart
1DD 01F30       1219                             LOAD            uart_data, #character_0
1DE 20131       1220                             CALL            send_to_uart
1DF 20193       1221                             CALL            send_cr
1E0 20193       1222                             CALL            send_cr
1E1 25000       1223                             RETURN
                1224     ;
                1225     ;
                1226     ;
                1227     ;Send 'Waiting_MCS_file' string to the UART
                1228     ;
1E2 01F57       1229     send_waiting_mcs_file:  LOAD            uart_data, #_character_w
1E3 20131       1230                             CALL            send_to_uart
1E4 01F61       1231                             LOAD            uart_data, #character_a
1E5 20131       1232                             CALL            send_to_uart
1E6 01F69       1233                             LOAD            uart_data, #character_i
1E7 20131       1234                             CALL            send_to_uart
1E8 01F74       1235                             LOAD            uart_data, #character_t
1E9 20131       1236                             CALL            send_to_uart
1EA 01F69       1237                             LOAD            uart_data, #character_i
1EB 20131       1238                             CALL            send_to_uart
1EC 01F6E       1239                             LOAD            uart_data, #character_n
1ED 20131       1240                             CALL            send_to_uart
1EE 01F67       1241                             LOAD            uart_data, #character_g
1EF 20131       1242                             CALL            send_to_uart
1F0 20196       1243                             CALL            send_space
1F1 01F66       1244                             LOAD            uart_data, #character_f
1F2 20131       1245                             CALL            send_to_uart
1F3 01F6F       1246                             LOAD            uart_data, #character_o
1F4 20131       1247                             CALL            send_to_uart
1F5 01F72       1248                             LOAD            uart_data, #character_r
1F6 20131       1249                             CALL            send_to_uart
1F7 20196       1250     send_mcs_file:          CALL            send_space
1F8 01F4D       1251                             LOAD            uart_data, #_character_m
1F9 20131       1252                             CALL            send_to_uart
1FA 01F43       1253                             LOAD            uart_data, #_character_c
1FB 20131       1254                             CALL            send_to_uart
1FC 01F53       1255                             LOAD            uart_data, #_character_s
1FD 20131       1256                             CALL            send_to_uart
1FE 20196       1257                             CALL            send_space
1FF 01F46       1258                             LOAD            uart_data, #_character_f
200 20131       1259                             CALL            send_to_uart
201 01F69       1260                             LOAD            uart_data, #character_i
202 20131       1261                             CALL            send_to_uart
203 01F6C       1262                             LOAD            uart_data, #character_l
204 20131       1263                             CALL            send_to_uart
205 01F65       1264                             LOAD            uart_data, #character_e
206 20131       1265                             CALL            send_to_uart
207 20193       1266                             CALL            send_cr
208 25000       1267                             RETURN
                1268     ;
                1269     ;
                1270     ;Send 'Erase in progress' string to the UART
                1271     ;
209 20220       1272     send_erase_in_progress: CALL            send_erase
20A 01F69       1273                             LOAD            uart_data, #character_i
20B 20131       1274                             CALL            send_to_uart
20C 01F6E       1275                             LOAD            uart_data, #character_n
20D 20131       1276                             CALL            send_to_uart
20E 20196       1277                             CALL            send_space
20F 01F50       1278                             LOAD            uart_data, #_character_p
210 20131       1279                             CALL            send_to_uart
211 01F72       1280                             LOAD            uart_data, #character_r
212 20131       1281                             CALL            send_to_uart
213 01F6F       1282                             LOAD            uart_data, #character_o
214 20131       1283                             CALL            send_to_uart
215 01F67       1284                             LOAD            uart_data, #character_g
216 20131       1285                             CALL            send_to_uart
217 01F72       1286                             LOAD            uart_data, #character_r
218 20131       1287                             CALL            send_to_uart
219 01F65       1288                             LOAD            uart_data, #character_e
21A 20131       1289                             CALL            send_to_uart
21B 01F73       1290                             LOAD            uart_data, #character_s
21C 20131       1291                             CALL            send_to_uart
21D 20131       1292                             CALL            send_to_uart
21E 20193       1293                             CALL            send_cr
21F 25000       1294                             RETURN
                1295     ;
                1296     ;
                1297     ;Send 'Erase ' string to the UART
                1298     ;
220 01F45       1299     send_erase:             LOAD            uart_data, #_character_e
221 20131       1300                             CALL            send_to_uart
222 01F72       1301                             LOAD            uart_data, #character_r
223 20131       1302                             CALL            send_to_uart
224 01F61       1303                             LOAD            uart_data, #character_a
225 20131       1304                             CALL            send_to_uart
226 01F73       1305                             LOAD            uart_data, #character_s
227 20131       1306                             CALL            send_to_uart
228 01F65       1307                             LOAD            uart_data, #character_e
229 20131       1308                             CALL            send_to_uart
22A 20196       1309                             CALL            send_space
22B 25000       1310                             RETURN
                1311     ;
                1312     ;
                1313     ;Send carriage return, 'OK' and carriage return to the UART
                1314     ;
22C 20193       1315     send_ok:                CALL            send_cr
22D 01F4F       1316                             LOAD            uart_data, #_character_o
22E 20131       1317                             CALL            send_to_uart
22F 01F4B       1318                             LOAD            uart_data, #_character_k
230 20131       1319                             CALL            send_to_uart
231 20193       1320                             CALL            send_cr
232 25000       1321                             RETURN
                1322     ;
                1323     ;
                1324     ;
                1325     ;Send menu to the UART
                1326     ;
233 20193       1327     send_menu:              CALL            send_cr
234 01F45       1328                             LOAD            uart_data, #_character_e
235 20131       1329                             CALL            send_to_uart
236 01F2D       1330                             LOAD            uart_data, #character_minus
237 20131       1331                             CALL            send_to_uart
238 20220       1332                             CALL            send_erase
239 01F61       1333                             LOAD            uart_data, #character_a
23A 20131       1334                             CALL            send_to_uart
23B 01F6C       1335                             LOAD            uart_data, #character_l
23C 20131       1336                             CALL            send_to_uart
23D 20131       1337                             CALL            send_to_uart
23E 20193       1338                             CALL            send_cr
23F 01F42       1339                             LOAD            uart_data, #_character_b
240 20131       1340                             CALL            send_to_uart
241 01F2D       1341                             LOAD            uart_data, #character_minus
242 20131       1342                             CALL            send_to_uart
243 20220       1343                             CALL            send_erase
244 01F62       1344                             LOAD            uart_data, #character_b
245 20131       1345                             CALL            send_to_uart
246 01F6C       1346                             LOAD            uart_data, #character_l
247 20131       1347                             CALL            send_to_uart
248 01F6F       1348                             LOAD            uart_data, #character_o
249 20131       1349                             CALL            send_to_uart
24A 01F63       1350                             LOAD            uart_data, #character_c
24B 20131       1351                             CALL            send_to_uart
24C 01F6B       1352                             LOAD            uart_data, #character_k
24D 20131       1353                             CALL            send_to_uart
24E 01F73       1354                             LOAD            uart_data, #character_s
24F 20131       1355                             CALL            send_to_uart
250 20196       1356                             CALL            send_space
251 01F31       1357                             LOAD            uart_data, #character_1
252 20131       1358                             CALL            send_to_uart
253 01F2D       1359                             LOAD            uart_data, #character_minus
254 20131       1360                             CALL            send_to_uart
255 01F33       1361                             LOAD            uart_data, #character_3
256 20131       1362                             CALL            send_to_uart
257 20193       1363                             CALL            send_cr
258 01F50       1364                             LOAD            uart_data, #_character_p
259 20131       1365                             CALL            send_to_uart
25A 01F2D       1366                             LOAD            uart_data, #character_minus
25B 20131       1367                             CALL            send_to_uart
25C 01F50       1368                             LOAD            uart_data, #_character_p
25D 20131       1369                             CALL            send_to_uart
25E 01F72       1370                             LOAD            uart_data, #character_r
25F 20131       1371                             CALL            send_to_uart
260 01F6F       1372                             LOAD            uart_data, #character_o
261 20131       1373                             CALL            send_to_uart
262 01F67       1374                             LOAD            uart_data, #character_g
263 20131       1375                             CALL            send_to_uart
264 01F72       1376                             LOAD            uart_data, #character_r
265 20131       1377                             CALL            send_to_uart
266 01F61       1378                             LOAD            uart_data, #character_a
267 20131       1379                             CALL            send_to_uart
268 01F6D       1380                             LOAD            uart_data, #character_m
269 20131       1381                             CALL            send_to_uart
26A 201F7       1382                             CALL            send_mcs_file
26B 01F57       1383                             LOAD            uart_data, #_character_w
26C 20131       1384                             CALL            send_to_uart
26D 01F2D       1385                             LOAD            uart_data, #character_minus
26E 20131       1386                             CALL            send_to_uart
26F 01F57       1387                             LOAD            uart_data, #_character_w
270 20131       1388                             CALL            send_to_uart
271 01F72       1389                             LOAD            uart_data, #character_r
272 20131       1390                             CALL            send_to_uart
273 01F69       1391                             LOAD            uart_data, #character_i
274 20131       1392                             CALL            send_to_uart
275 01F74       1393                             LOAD            uart_data, #character_t
276 20131       1394                             CALL            send_to_uart
277 01F65       1395                             LOAD            uart_data, #character_e
278 20131       1396                             CALL            send_to_uart
279 20196       1397                             CALL            send_space
27A 202CB       1398                             CALL            send_byte
27B 20193       1399                             CALL            send_cr
27C 01F52       1400                             LOAD            uart_data, #_character_r
27D 20131       1401                             CALL            send_to_uart
27E 01F2D       1402                             LOAD            uart_data, #character_minus
27F 20131       1403                             CALL            send_to_uart
280 01F52       1404                             LOAD            uart_data, #_character_r
281 20131       1405                             CALL            send_to_uart
282 01F65       1406                             LOAD            uart_data, #character_e
283 20131       1407                             CALL            send_to_uart
284 01F61       1408                             LOAD            uart_data, #character_a
285 20131       1409                             CALL            send_to_uart
286 01F64       1410                             LOAD            uart_data, #character_d
287 20131       1411                             CALL            send_to_uart
288 20196       1412                             CALL            send_space
289 01F32       1413                             LOAD            uart_data, #character_2
28A 20131       1414                             CALL            send_to_uart
28B 01F35       1415                             LOAD            uart_data, #character_5
28C 20131       1416                             CALL            send_to_uart
28D 01F36       1417                             LOAD            uart_data, #character_6
28E 20131       1418                             CALL            send_to_uart
28F 20196       1419                             CALL            send_space
290 202CB       1420                             CALL            send_byte
291 01F73       1421                             LOAD            uart_data, #character_s
292 20131       1422                             CALL            send_to_uart
293 20193       1423                             CALL            send_cr
294 01F49       1424                             LOAD            uart_data, #_character_i
295 20131       1425                             CALL            send_to_uart
296 01F2D       1426                             LOAD            uart_data, #character_minus
297 20131       1427                             CALL            send_to_uart
298 01F44       1428                             LOAD            uart_data, #_character_d
299 20131       1429                             CALL            send_to_uart
29A 01F65       1430                             LOAD            uart_data, #character_e
29B 20131       1431                             CALL            send_to_uart
29C 01F76       1432                             LOAD            uart_data, #character_v
29D 20131       1433                             CALL            send_to_uart
29E 01F69       1434                             LOAD            uart_data, #character_i
29F 20131       1435                             CALL            send_to_uart
2A0 01F63       1436                             LOAD            uart_data, #character_c
2A1 20131       1437                             CALL            send_to_uart
2A2 01F65       1438                             LOAD            uart_data, #character_e
2A3 20131       1439                             CALL            send_to_uart
2A4 20196       1440                             CALL            send_space
2A5 202C6       1441                             CALL            send_id
2A6 20193       1442                             CALL            send_cr
2A7 01F48       1443                             LOAD            uart_data, #_character_h
2A8 20131       1444                             CALL            send_to_uart
2A9 01F2D       1445                             LOAD            uart_data, #character_minus
2AA 20131       1446                             CALL            send_to_uart
2AB 01F48       1447                             LOAD            uart_data, #_character_h
2AC 20131       1448                             CALL            send_to_uart
2AD 01F65       1449                             LOAD            uart_data, #character_e
2AE 20131       1450                             CALL            send_to_uart
2AF 01F6C       1451                             LOAD            uart_data, #character_l
2B0 20131       1452                             CALL            send_to_uart
2B1 01F70       1453                             LOAD            uart_data, #character_p
2B2 20131       1454                             CALL            send_to_uart
2B3 20193       1455                             CALL            send_cr
2B4 01F53       1456                             LOAD            uart_data, #_character_s
2B5 20131       1457                             CALL            send_to_uart
2B6 01F2D       1458                             LOAD            uart_data, #character_minus
2B7 20131       1459                             CALL            send_to_uart
2B8 01F53       1460                             LOAD            uart_data, #_character_s
2B9 20131       1461                             CALL            send_to_uart
2BA 01F74       1462                             LOAD            uart_data, #character_t
2BB 20131       1463                             CALL            send_to_uart
2BC 01F61       1464                             LOAD            uart_data, #character_a
2BD 20131       1465                             CALL            send_to_uart
2BE 01F74       1466                             LOAD            uart_data, #character_t
2BF 20131       1467                             CALL            send_to_uart
2C0 01F75       1468                             LOAD            uart_data, #character_u
2C1 20131       1469                             CALL            send_to_uart
2C2 01F73       1470                             LOAD            uart_data, #character_s
2C3 20131       1471                             CALL            send_to_uart
2C4 20193       1472                             CALL            send_cr
2C5 25000       1473                             RETURN
                1474     ;
                1475     ;
                1476     ;Send 'ID' to the UART
                1477     ;
2C6 01F49       1478     send_id:                LOAD            uart_data, #_character_i
2C7 20131       1479                             CALL            send_to_uart
2C8 01F44       1480                             LOAD            uart_data, #_character_d
2C9 20131       1481                             CALL            send_to_uart
2CA 25000       1482                             RETURN
                1483     ;
                1484     ;
                1485     ;Send 'byte' to the UART
                1486     ;
2CB 01F62       1487     send_byte:              LOAD            uart_data, #character_b
2CC 20131       1488                             CALL            send_to_uart
2CD 01F79       1489                             LOAD            uart_data, #character_y
2CE 20131       1490                             CALL            send_to_uart
2CF 01F74       1491                             LOAD            uart_data, #character_t
2D0 20131       1492                             CALL            send_to_uart
2D1 01F65       1493                             LOAD            uart_data, #character_e
2D2 20131       1494                             CALL            send_to_uart
2D3 25000       1495                             RETURN
                1496     ;
                1497     ;
                1498     ;Send 'Confirm Erase (Y/n) ' to the UART
                1499     ;
2D4 20193       1500     send_confirm:           CALL            send_cr
2D5 01F43       1501                             LOAD            uart_data, #_character_c
2D6 20131       1502                             CALL            send_to_uart
2D7 01F6F       1503                             LOAD            uart_data, #character_o
2D8 20131       1504                             CALL            send_to_uart
2D9 01F6E       1505                             LOAD            uart_data, #character_n
2DA 20131       1506                             CALL            send_to_uart
2DB 01F66       1507                             LOAD            uart_data, #character_f
2DC 20131       1508                             CALL            send_to_uart
2DD 01F69       1509                             LOAD            uart_data, #character_i
2DE 20131       1510                             CALL            send_to_uart
2DF 01F72       1511                             LOAD            uart_data, #character_r
2E0 20131       1512                             CALL            send_to_uart
2E1 01F6D       1513                             LOAD            uart_data, #character_m
2E2 20131       1514                             CALL            send_to_uart
2E3 20196       1515                             CALL            send_space
2E4 20220       1516                             CALL            send_erase
2E5 01F28       1517                             LOAD            uart_data, #character_open
2E6 20131       1518                             CALL            send_to_uart
2E7 01F59       1519                             LOAD            uart_data, #_character_y
2E8 20131       1520                             CALL            send_to_uart
2E9 01F2F       1521                             LOAD            uart_data, #character_divide
2EA 20131       1522                             CALL            send_to_uart
2EB 01F6E       1523                             LOAD            uart_data, #character_n
2EC 20131       1524                             CALL            send_to_uart
2ED 01F29       1525                             LOAD            uart_data, #character_close
2EE 20131       1526                             CALL            send_to_uart
2EF 20196       1527                             CALL            send_space
2F0 25000       1528                             RETURN
                1529     ;
                1530     ;
                1531     ;Send 'Abort' to the UART
                1532     ;
2F1 20193       1533     send_abort:             CALL            send_cr
2F2 01F41       1534                             LOAD            uart_data, #_character_a
2F3 20131       1535                             CALL            send_to_uart
2F4 01F62       1536                             LOAD            uart_data, #character_b
2F5 20131       1537                             CALL            send_to_uart
2F6 01F6F       1538                             LOAD            uart_data, #character_o
2F7 20131       1539                             CALL            send_to_uart
2F8 01F72       1540                             LOAD            uart_data, #character_r
2F9 20131       1541                             CALL            send_to_uart
2FA 01F74       1542                             LOAD            uart_data, #character_t
2FB 20131       1543                             CALL            send_to_uart
2FC 20193       1544                             CALL            send_cr
2FD 25000       1545                             RETURN
                1546     ;
                1547     ;Send 'address=' to the UART
                1548     ;
2FE 20193       1549     send_address:           CALL            send_cr
2FF 01F61       1550                             LOAD            uart_data, #character_a
300 20131       1551                             CALL            send_to_uart
301 01F64       1552                             LOAD            uart_data, #character_d
302 20131       1553                             CALL            send_to_uart
303 20131       1554                             CALL            send_to_uart
304 01F72       1555                             LOAD            uart_data, #character_r
305 20131       1556                             CALL            send_to_uart
306 01F65       1557                             LOAD            uart_data, #character_e
307 20131       1558                             CALL            send_to_uart
308 01F73       1559                             LOAD            uart_data, #character_s
309 20131       1560                             CALL            send_to_uart
30A 20131       1561                             CALL            send_to_uart
30B 01F3D       1562     send_equals:            LOAD            uart_data, #character_equals
30C 20131       1563                             CALL            send_to_uart
30D 25000       1564                             RETURN
                1565     ;
                1566     ;
                1567     ;Send 'data=' to the UART
                1568     ;
30E 20193       1569     send_data:              CALL            send_cr
30F 01F64       1570                             LOAD            uart_data, #character_d
310 20131       1571                             CALL            send_to_uart
311 01F61       1572                             LOAD            uart_data, #character_a
312 20131       1573                             CALL            send_to_uart
313 01F74       1574                             LOAD            uart_data, #character_t
314 20131       1575                             CALL            send_to_uart
315 01F61       1576                             LOAD            uart_data, #character_a
316 20131       1577                             CALL            send_to_uart
317 2230B       1578                             JUMP            send_equals
                1579     ;
                1580     ;
                1581     ;**************************************************************************************
                1582     ;Interrupt Service Routine (ISR)
                1583     ;**************************************************************************************
                1584     ;
                1585     ;An interrupt occurs whenever the status of the UART receiver FIFO 'half_full' flag
                1586     ;changes.
                1587     ;
                1588     ;A change from Low to High means that the buffer is becoming full and therefore
                1589     ;an XOFF character must be transmitted.
                1590     ;
                1591     ;A change from High to Low means that the buffer is starting to empty and therefore
                1592     ;an XON character can be transmitted to restart the flow of new characters.
                1593     ;
                1594     ;
  003F5         1595                             ORG             0x3f5                   ;place at end of memory to keep separate
3F5 2F000       1596     isr:                    STORE           s0, isr_preserve_s0     ;preserve register contents
3F6 09000       1597                             INPUT           s0, status_port         ;test 'half_full' status of receiver buffer.
3F7 0D010       1598                             TEST            s0, #rx_half_full
3F8 323FB       1599                             JUMP            z, isr_send_xon
3F9 01013       1600                             LOAD            s0, #character_xoff
3FA 223FC       1601                             JUMP            isr_send_character
3FB 01011       1602     isr_send_xon:           LOAD            s0, #character_xon
3FC 2D004       1603     isr_send_character:     OUTPUT          s0, uart_write_port
3FD 0B000       1604                             FETCH           s0, isr_preserve_s0     ;restore register contents
3FE 29001       1605                             RETURNI         enable
                1606     ;
                1607     ;
                1608     ;**************************************************************************************
                1609     ;Interrupt Vector
                1610     ;**************************************************************************************
                1611     ;
  003FF         1612                             ORG             0x3ff
3FF 223F5       1613                             JUMP            isr
                1614     ;
                1615     ;
                1616
