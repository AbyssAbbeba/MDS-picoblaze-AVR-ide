                   1     ;KCPSM3 Program - UART programming of StrataFLASH memory on the Spartan-3E Starter Kit.
                   2     device kcpsm1
                   3     ;Ken Chapman - Xilinx Ltd
                   4     ;
                   5     ;Version v1.00 - 28th March 2006
                   6     ;
                   7     ;This program uses a 115200 baud UART connection with XON/XOFF flow control
                   8     ;to allow a standard MCS file for the configuration of a Spartan-3E device to
                   9     ;be programmed into the Intel StrataFLASH device on the board.
                  10     ;
                  11     ;
                  12     ;
                  13     ;
                  14     ;**************************************************************************************
                  15     ; Port definitions
                  16     ;**************************************************************************************
                  17     ;
                  18     ;
  00000           19     status_port             EQU             0x00                    ;UART and filter status input
  00001           20     tx_data_present         EQU             0x01                    ;  Transmitter  data present - bit0
  00002           21     tx_half_full            EQU             0x02                    ;    FIFO          half full - bit1
  00004           22     tx_full                 EQU             0x04                    ;                       full - bit2
  00008           23     rx_data_present         EQU             0x08                    ;               data present - bit3
  00010           24     rx_half_full            EQU             0x10                    ;  Receiver        half full - bit4
  00020           25     rx_full                 EQU             0x20                    ;    FIFO               full - bit5
  00040           26     spare1                  EQU             0x40                    ;                  spare '0' - bit6
  00080           27     sf_sts                  EQU             0x80                    ;            StrataFLASH STS - bit7
                  28     ;
  00001           29     uart_read_port          EQU             0x01                    ;UART Rx data input
                  30     ;
  00004           31     uart_write_port         EQU             0x04                    ;UART Tx data output
                  32     ;
                  33     ;
  00002           34     sf_data_in_port         EQU             0x02                    ;Read data from StrataFLASH device
                  35     ;
  00010           36     sf_data_out_port        EQU             0x10                    ;Data to write into StrataFLASH device
                  37     ;
  00080           38     sf_addr_hi_port         EQU             0x80                    ;StrataFLASH address[23:16]
  00040           39     sf_addr_mi_port         EQU             0x40                    ;StrataFLASH address[15:8]
  00020           40     sf_addr_lo_port         EQU             0x20                    ;StrataFLASH address[7:0]
                  41     ;
  00008           42     sf_control_port         EQU             0x08                    ;StrataFLASH control
  00001           43     sf_read                 EQU             0x01                    ;         active High read - bit0
  00002           44     sf_ce                   EQU             0x02                    ; active Low device enable - bit1
  00004           45     sf_we                   EQU             0x04                    ;         active Low write - bit2
                  46     ;
                  47     ;
                  48     ;
                  49     ;**************************************************************************************
                  50     ; Special Register usage
                  51     ;**************************************************************************************
                  52     ;
  0000F           53     uart_data               REG             sf                      ;used to pass data to and from the UART
                  54     ;
                  55     ;
                  56     ;**************************************************************************************
                  57     ; Useful data constants
                  58     ;**************************************************************************************
                  59     ;
                  60     ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                  61     ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                  62     ;calculation highly predictable. The '6' in the following equation even allows for
                  63     ;'CALL delay_1us' instruction in the initiating code.
                  64     ;
                  65     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                  66     ;
                  67     ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                  68     ;For clock rates below 10MHz the value of 1 must be used and the operation will
                  69     ;become lower than intended.
                  70     ;
  0000B           71     delay_1us_constant      EQU             0x0b
                  72     ;
                  73     ;
                  74     ;
                  75     ;ASCII table
                  76     ;
  00061           77     character_a             EQU             0x61
  00062           78     character_b             EQU             0x62
  00063           79     character_c             EQU             0x63
  00064           80     character_d             EQU             0x64
  00065           81     character_e             EQU             0x65
  00066           82     character_f             EQU             0x66
  00067           83     character_g             EQU             0x67
  00068           84     character_h             EQU             0x68
  00069           85     character_i             EQU             0x69
  0006A           86     character_j             EQU             0x6a
  0006B           87     character_k             EQU             0x6b
  0006C           88     character_l             EQU             0x6c
  0006D           89     character_m             EQU             0x6d
  0006E           90     character_n             EQU             0x6e
  0006F           91     character_o             EQU             0x6f
  00070           92     character_p             EQU             0x70
  00071           93     character_q             EQU             0x71
  00072           94     character_r             EQU             0x72
  00073           95     character_s             EQU             0x73
  00074           96     character_t             EQU             0x74
  00075           97     character_u             EQU             0x75
  00076           98     character_v             EQU             0x76
  00077           99     character_w             EQU             0x77
  00078          100     character_x             EQU             0x78
  00079          101     character_y             EQU             0x79
  0007A          102     character_z             EQU             0x7a
  00041          103     _character_a            EQU             0x41
  00042          104     _character_b            EQU             0x42
  00043          105     _character_c            EQU             0x43
  00044          106     _character_d            EQU             0x44
  00045          107     _character_e            EQU             0x45
  00046          108     _character_f            EQU             0x46
  00047          109     _character_g            EQU             0x47
  00048          110     _character_h            EQU             0x48
  00049          111     _character_i            EQU             0x49
  0004A          112     _character_j            EQU             0x4a
  0004B          113     _character_k            EQU             0x4b
  0004C          114     _character_l            EQU             0x4c
  0004D          115     _character_m            EQU             0x4d
  0004E          116     _character_n            EQU             0x4e
  0004F          117     _character_o            EQU             0x4f
  00050          118     _character_p            EQU             0x50
  00051          119     _character_q            EQU             0x51
  00052          120     _character_r            EQU             0x52
  00053          121     _character_s            EQU             0x53
  00054          122     _character_t            EQU             0x54
  00055          123     _character_u            EQU             0x55
  00056          124     _character_v            EQU             0x56
  00057          125     _character_w            EQU             0x57
  00058          126     _character_x            EQU             0x58
  00059          127     _character_y            EQU             0x59
  0005A          128     _character_z            EQU             0x5a
  00030          129     character_0             EQU             0x30
  00031          130     character_1             EQU             0x31
  00032          131     character_2             EQU             0x32
  00033          132     character_3             EQU             0x33
  00034          133     character_4             EQU             0x34
  00035          134     character_5             EQU             0x35
  00036          135     character_6             EQU             0x36
  00037          136     character_7             EQU             0x37
  00038          137     character_8             EQU             0x38
  00039          138     character_9             EQU             0x39
  0003A          139     character_colon         EQU             0x3a
  0002E          140     character_fullstop      EQU             0x2e
  0003B          141     character_semi_colon    EQU             0x3b
  0002D          142     character_minus         EQU             0x2d
  0002B          143     character_plus          EQU             0x2b
  0002C          144     character_comma         EQU             0x2c
  0003C          145     character_less_than     EQU             0x3c                    ;'<'
  0003E          146     character_greater_than  EQU             0x3e                    ;'>'
  00028          147     character_open          EQU             0x28                    ;'('
  00029          148     character_close         EQU             0x29                    ;')'
  0002F          149     character_divide        EQU             0x2f                    ;'/'
  0003D          150     character_equals        EQU             0x3d
  00020          151     character_space         EQU             0x20
  0000D          152     character_cr            EQU             0x0d                    ;carriage return
  0000A          153     character_lf            EQU             0x0a                    ;line feed
  0003F          154     character_question      EQU             0x3f                    ;'?'
  00024          155     character_dollar        EQU             0x24
  00021          156     character_exclaim       EQU             0x21                    ;'!'
  00008          157     character_bs            EQU             0x08                    ;Back Space command character
  00011          158     character_xon           EQU             0x11                    ;Flow control ON
  00013          159     character_xoff          EQU             0x13                    ;Flow control OFF
                 160     ;
                 161     ;
                 162     ;**************************************************************************************
                 163     ; Scratch Pad Memory Locations
                 164     ;**************************************************************************************
                 165     ;
  00000          166     isr_preserve_s0         EQU             0x00                    ;preserve register during ISR
                 167     ;
                 168     ;
                 169     ;
                 170     ;Store up to one line of an MCS file as bytes
                 171     ;A typical data line consists of:-
                 172     ;:     Start character which is not stored
                 173     ;10    Number of data bytes included (16 in this case)
                 174     ;aaaa  Lower 16-bits of the storage address
                 175     ;00    Record type (data in this case)
                 176     ;dddd...   Data bytes (typically 16 which is the maximum)
                 177     ;cc    Checksum
                 178     ;CR/LF Line will end in carriage return and/or line feed which is not stored.
                 179     ;
                 180     ;So a total of 21 bytes could be stored before processing.
                 181     ;This is located at the end of scratch pad memory.
                 182     ;
  0002B          183     line_start              EQU             0x2b                    ;21 bytes until end of memory
  0002F          184     data_start              EQU             0x2f                    ;Start of data field if present
                 185     ;
                 186     ;
                 187     ;**************************************************************************************
                 188     ; Initialise the system and welcome message
                 189     ;**************************************************************************************
                 190     ;
000 08327        191     cold_start:             CALL            sf_init                 ;initialise StrataFLASH controls
001 0831A        192                             CALL            delay_1s                ;delay because UART is fast and JTAG startup sequence can be slow
W: value out of range: 0x11a, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1a.
002 08030        193                             ENABLE          interrupt               ;Interrupt is used for XON/XOFF flow control
003 08393        194     welcome_start:          CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
004 08399        195                             CALL            send_welcome            ;start up message and version number
W: value out of range: 0x199, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x99.
                 196     ;
                 197     ;
                 198     ;**************************************************************************************
                 199     ; Main menu and command selection
                 200     ;**************************************************************************************
                 201     ;
                 202     ;
005 08333        203     warm_start:             CALL            send_menu               ;Menu and command selection
W: value out of range: 0x233, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x33.
006 08393        204                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
                 205     ;
007 08393        206     prompt:                 CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
008 08393        207                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
009 00F3E        208                             LOAD            uart_data, #character_greater_than ;prompt for input
00A 08331        209                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
00B 08322        210                             CALL            read_upper_case
                 211                             COMPARE         s0, #_character_e       ;test for commands and execute as required
E: instruction not supported on the this device: COMPARE sX, kk.
00C 0912A        212                             JUMP            z, erase_command
                 213                             COMPARE         s0, #_character_b
E: instruction not supported on the this device: COMPARE sX, kk.
00D 0912C        214                             JUMP            z, block_erase_command
                 215                             COMPARE         s0, #_character_p
E: instruction not supported on the this device: COMPARE sX, kk.
00E 09147        216                             JUMP            z, program_command
                 217                             COMPARE         s0, #_character_w
E: instruction not supported on the this device: COMPARE sX, kk.
00F 0918C        218                             JUMP            z, write_command
                 219                             COMPARE         s0, #_character_r
E: instruction not supported on the this device: COMPARE sX, kk.
010 091A3        220                             JUMP            z, read_command
                 221                             COMPARE         s0, #_character_i
E: instruction not supported on the this device: COMPARE sX, kk.
011 091C2        222                             JUMP            z, sf_information
                 223                             COMPARE         s0, #_character_h
E: instruction not supported on the this device: COMPARE sX, kk.
012 09103        224                             JUMP            z, welcome_start
                 225                             COMPARE         s0, #_character_s
E: instruction not supported on the this device: COMPARE sX, kk.
013 091D5        226                             JUMP            z, sf_status
014 08393        227                             CALL            send_cr                 ;no valid command input
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
015 00F3F        228                             LOAD            uart_data, #character_question ;display ???
016 08331        229                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
017 08331        230                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
018 08331        231                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
019 08107        232                             JUMP            prompt                  ;Try again!
                 233     ;
                 234     ;
01A 0831F        235     read_upper_case:        CALL            read_from_uart          ;read command character from UART
W: value out of range: 0x11f, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1f.
01B 08331        236                             CALL            send_to_uart            ;echo character
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
01C 0C0F0        237                             LOAD            s0, uart_data           ;convert to upper case
01D 0833E        238                             CALL            upper_case
W: value out of range: 0x13e, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x3e.
01E 08080        239                             RETURN
                 240     ;
                 241     ;
                 242     ;**************************************************************************************
                 243     ; Initialise the StrataFlash Memory control signals.
                 244     ;**************************************************************************************
                 245     ;
                 246     ; SF_read = 0   - Output enable off
                 247     ; SF_ce = 1     - Deselect StrataFLASH memory
                 248     ; SF_we = 1     - Write enable off
                 249     ;
                 250     ; Register used s0
                 251     ;
01F 00006        252     sf_init:                LOAD            s0, #0x06
020 0E008        253                             OUTPUT          s0, sf_control_port
021 08080        254                             RETURN
                 255     ;
                 256     ;
                 257     ;**************************************************************************************
                 258     ; Erase Command - Perform bulk erase of the StrataFLASH memory
                 259     ;**************************************************************************************
                 260     ;
                 261     ; This routine executes the block erase command 128 times with a different base
                 262     ; address in each case.
                 263     ;
                 264     ; Note that this could take as long as 8 minutes 30 seconds
                 265     ; and even typical times will be approximately 2 minutes.
                 266     ;
                 267     ; Registers used s1,s7,s8,s9
                 268     ;
022 009FE        269     erase_command:          LOAD            s9, #0xfe               ;define base address of block 127 = FE0000
023 0812D        270                             JUMP            blocks_erase
                 271     ;
                 272     ;
                 273     ;**************************************************************************************
                 274     ; Block Erase Command - Performs erase of lowest 3 blocks of StrataFLASH memory which
                 275     ; covers the address range 000000 to 05FFFF in which the configuration for an XC3S500E
                 276     ; would be able to fit (000000 to 045470).
                 277     ;**************************************************************************************
                 278     ;
                 279     ; This routine executes the block erase command 3 times with a different base
                 280     ; address in each case.
                 281     ;
                 282     ; Each block is 128K bytes and therefore has an address range of 000000 to 01FFFF.
                 283     ; So each block is separated by 020000 hex.
                 284     ;
                 285     ; Registers used s0,s1,s7,s8,s9
                 286     ;
024 00904        287     block_erase_command:    LOAD            s9, #0x04               ;define base address of block 3 = 040000
025 08393        288     blocks_erase:           CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
026 083D4        289                             CALL            send_confirm            ;confirm command with a 'Y' which must be upper case
W: value out of range: 0x2d4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd4.
027 0831F        290                             CALL            read_from_uart          ;read command character from UART
W: value out of range: 0x11f, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1f.
028 08331        291                             CALL            send_to_uart            ;echo input
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
                 292                             COMPARE         uart_data, #_character_y
E: instruction not supported on the this device: COMPARE sX, kk.
029 0953F        293                             JUMP            nz, abort_erase
02A 08393        294                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
02B 08309        295                             CALL            send_erase_in_progress
W: value out of range: 0x209, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x9.
02C 08393        296                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
02D 00800        297                             LOAD            s8, #0x00               ;define lower address of each block = xx0000
02E 00700        298                             LOAD            s7, #0x00
02F 00F2E        299     blocks_erase_loop:      LOAD            uart_data, #character_fullstop ;progress dots
030 08331        300                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
031 08341        301                             CALL            sf_erase_block          ;erase block
032 06902        302                             SUB             s9, #0x02               ;decrement base address by 1 block
033 09D38        303                             JUMP            nc, blocks_erase_loop   ;repeat until block 0 is erased
034 0832C        304                             CALL            send_ok
W: value out of range: 0x22c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2c.
035 08107        305                             JUMP            prompt
                 306     ;
036 083F1        307     abort_erase:            CALL            send_abort
W: value out of range: 0x2f1, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xf1.
037 08107        308                             JUMP            prompt
                 309     ;
                 310     ;
                 311     ;**************************************************************************************
                 312     ; Erase a single 128K Byte block of the StrataFlash Memory
                 313     ;**************************************************************************************
                 314     ;
                 315     ; The 24-bit address of the block should be supplied in register set [s9,s8,s7].
                 316     ;
                 317     ; To erase a block the address must be set and then the block erase command (20 hex)
                 318     ; written to the memory followed by the write confirm command (D0 hex).
                 319     ;
                 320     ; The act of erasing a block may take up to 1 second to complete. This routine
                 321     ; waits for the memory to be ready before restoring the normal read array mode and
                 322     ; returning.
                 323     ;
                 324     ; Registers used s1,s7,s8,s9
                 325     ;
038 00120        326     sf_erase_block:         LOAD            s1, #0x20               ;block erase command
039 083EA        327                             CALL            sf_byte_write
03A 001D0        328                             LOAD            s1, #0xd0               ;write confirm command
03B 083EA        329                             CALL            sf_byte_write
03C 083F7        330                             CALL            wait_sf_ready           ;wait for erase to complete
03D 08080        331                             RETURN
                 332     ;
                 333     ;
                 334     ;**************************************************************************************
                 335     ; Program Command - Program StrataFLASH memory with data defined in an MCS file
                 336     ;**************************************************************************************
                 337     ;
03E 08393        338     program_command:        CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
03F 083E2        339                             CALL            send_waiting_mcs_file
W: value out of range: 0x1e2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xe2.
040 0834C        340                             CALL            program_mcs
041 0832C        341                             CALL            send_ok
W: value out of range: 0x22c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2c.
042 08107        342                             JUMP            prompt
                 343     ;
                 344     ;**************************************************************************************
                 345     ; Program StrataFLASH memory with data defined in an MCS file
                 346     ;**************************************************************************************
                 347     ;
                 348     ;Reads the MCS file from the UART and programs the Strata FLASH device at the locations.
                 349     ;specified by the file contents.
                 350     ;
                 351     ;This routine will continue until an end of file record is detected.
                 352     ;For each line of MCS received, the current address will be output so that
                 353     ;progress can be monitored.
                 354     ;
                 355     ;
043 08357        356     program_mcs:            CALL            read_mcs_line           ;read line from UART
044 08367        357                             CALL            mcs_address             ;find start address and record type
                 358                             COMPARE         sb, #0x01               ;test for end record
E: instruction not supported on the this device: COMPARE sX, kk.
045 09080        359                             RETURN          z                       ;end of programming
                 360                             COMPARE         sb, #0x04               ;test for extended address record
E: instruction not supported on the this device: COMPARE sX, kk.
046 0914C        361                             JUMP            z, program_mcs          ;no data with this record and upper address now correct
                 362     ;
                 363     ;Assume data record type 00 which is data so need to program specified number
                 364     ;of bytes into memory at correct address.
                 365     ;
047 0836D        366     write_spm_data:         CALL            send_hex_3bytes         ;send address to indicate progress
W: value out of range: 0x16d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x6d.
048 08393        367                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
                 368                             FETCH           sa, line_start          ;read number of data bytes to program
E: instruction not supported on the this device: FETCH sX, ss.
049 08377        369                             CALL            sf_buffer_write         ;write bytes to memory
04A 0814C        370                             JUMP            program_mcs
                 371     ;
                 372     ;
                 373     ;**************************************************************************************
                 374     ;Read one line of an MCS file into scratch pad memory
                 375     ;**************************************************************************************
                 376     ;
                 377     ;Reads one line of MCS file format into scratch pad memory starting at location 'line_start'.
                 378     ;
                 379     ;The routine detects the line start character ':' ignoring any preceding characters. This
                 380     ;will remove any additional CR or LF characters.
                 381     ;
                 382     ;It then reads each subsequent pair of ASCII characters, converts them to true hex in the
                 383     ;range 00 to FF and stores them in scratch pad memory.
                 384     ;
                 385     ;The end of the line is determined by either a CR or LF character.
                 386     ;
                 387     ;The value last returned in register 'sE' will be the pointer to the location in
                 388     ;scratch pad memory following the last byte for the line read.
                 389     ;
04B 00E2B        390     read_mcs_line:          LOAD            se, #line_start         ;initialise SPM memory pointer
04C 0831F        391     wait_mcs_line_start:    CALL            read_from_uart          ;read character
W: value out of range: 0x11f, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1f.
                 392                             COMPARE         uart_data, #character_colon ;test for start character
E: instruction not supported on the this device: COMPARE sX, kk.
04D 09558        393                             JUMP            nz, wait_mcs_line_start
04E 0831F        394     read_mcs_byte:          CALL            read_from_uart          ;read character
W: value out of range: 0x11f, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1f.
                 395                             COMPARE         uart_data, #character_cr ;test for end of line
E: instruction not supported on the this device: COMPARE sX, kk.
04F 09080        396                             RETURN          z
                 397                             COMPARE         uart_data, #character_lf ;test for end of line
E: instruction not supported on the this device: COMPARE sX, kk.
050 09080        398                             RETURN          z
051 0C3F0        399                             LOAD            s3, uart_data           ;upper nibble character
052 0831F        400                             CALL            read_from_uart          ;read character
W: value out of range: 0x11f, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1f.
053 0C2F0        401                             LOAD            s2, uart_data           ;lower nibble character
054 08374        402                             CALL            ascii_byte_to_hex       ;convert to true hex value
W: value out of range: 0x174, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x74.
                 403                             STORE           s0, @se                 ;write to SPM
E: instruction not supported on the this device: STORE sX, sY.
055 04E01        404                             ADD             se, #0x01               ;increment pointer
056 0815B        405                             JUMP            read_mcs_byte
                 406     ;
                 407     ;
                 408     ;**************************************************************************************
                 409     ;Determine the current address for the line of an MCS file in scratch pad memory
                 410     ;**************************************************************************************
                 411     ;
                 412     ;Checks the existing line data stored in scratch pad memory starting at location
                 413     ;'line_start' and determines the current address.
                 414     ;
                 415     ;The address is in the register set [s9,s8,s7] before and after this routine is
                 416     ;executed because not all address bits are defined by a given line of MCS and
                 417     ;the undefined bits remain constant.
                 418     ;
                 419     ;A record type of 04 will update [s9].
                 420     ;A record type of 00 will update [s8,s7].
                 421     ;
                 422     ;On return, the register sB will contain the record type and
                 423     ;register sC will indicate the number of data bytes stored.
                 424     ;
057 00D2B        425     mcs_address:            LOAD            sd, #line_start         ;initialise SPM memory pointer
                 426                             FETCH           sc, @sd                 ;read number of bytes on line
E: instruction not supported on the this device: FETCH sX, sY.
058 04D03        427                             ADD             sd, #0x03               ;move to record type
                 428                             FETCH           sb, @sd                 ;read record type
E: instruction not supported on the this device: FETCH sX, sY.
                 429                             COMPARE         sb, #0x00               ;test for data record
E: instruction not supported on the this device: COMPARE sX, kk.
059 09172        430                             JUMP            z, new_low_address
                 431                             COMPARE         sb, #0x04               ;test for data record
E: instruction not supported on the this device: COMPARE sX, kk.
05A 09480        432                             RETURN          nz
05B 04D02        433                             ADD             sd, #0x02               ;read upper 8-bits
                 434                             FETCH           s9, @sd
E: instruction not supported on the this device: FETCH sX, sY.
05C 08080        435                             RETURN
05D 06D01        436     new_low_address:        SUB             sd, #0x01               ;read lower 8-bits
                 437                             FETCH           s7, @sd
E: instruction not supported on the this device: FETCH sX, sY.
05E 06D01        438                             SUB             sd, #0x01               ;read middle 8-bits
                 439                             FETCH           s8, @sd
E: instruction not supported on the this device: FETCH sX, sY.
05F 08080        440                             RETURN
                 441     ;
                 442     ;
                 443     ;**************************************************************************************
                 444     ; Write to Buffer of StrataFlash Memory and program
                 445     ;**************************************************************************************
                 446     ;
                 447     ; Writing to the buffer allows faster operation than writing individual bytes.
                 448     ; The buffer size is limited to 32 locations. To perform a buffer write the process
                 449     ; is as follows:-
                 450     ;   Write command for buffer write to StrataFLASH memory (E8 hex).
                 451     ;      Base address for writing should also be set.
                 452     ;   Read Status register and if not ready repeat command until it is.
                 453     ;   Write a value specifying the number of bytes to be written LESS ONE.
                 454     ;      In this program the number of bytes will be specified in register sA
                 455     ;      and this value needs to be decremented before writing to the memory.
                 456     ;   Write the correct number of actual data bytes with appropriate addresses.
                 457     ;      Ideally the addresses do not cross the boundary of 32 locations
                 458     ;      such that LSBs are always in the range 00000 to 11111 binary.
                 459     ;      Crossing the boundary is OK but will take longer to program.
                 460     ;   Write command to confirm operation (D0 hex).
                 461     ;   Read Status register and wait for ready.
                 462     ;
                 463     ;   This routine additionally restores the normal read array mode before returning.
                 464     ;
                 465     ; The number of bytes to be written should be supplied in register sA and must be
                 466     ; a value between 1 and 32 (01 and 20 hex).
                 467     ;
                 468     ; The 24-bit base address should be supplied in register set [s9,s8,s7].
                 469     ; On return, this will be increased by the number of locations written.
                 470     ;
                 471     ; Scratch pad memory locations starting at location defined by constant
                 472     ; 'data_start' should contain the data bytes to be written.
                 473     ;
                 474     ; The act of writing the buffer to the memory array may take up to 654us to complete.
                 475     ; The time taken to program is recorded by register pair [sE,sD]. Each count
                 476     ; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
                 477     ;
                 478     ; Registers used s0,s1,s7,s8,s9,sA,sD,sE
                 479     ;
                 480     ;
060 001E8        481     sf_buffer_write:        LOAD            s1, #0xe8               ;command for buffer write
061 083EA        482                             CALL            sf_byte_write
062 083E0        483                             CALL            sf_byte_read            ;read status register into s0
                 484                             TEST            s0, #0x80               ;test ready/busy flag
E: instruction not supported on the this device: TEST sX, kk.
063 09177        485                             JUMP            z, sf_buffer_write      ;repeat command until ready
064 0C1A0        486                             LOAD            s1, sa                  ;Specify number of bytes to write
065 06101        487                             SUB             s1, #0x01               ;one less than actual number!
066 083EA        488                             CALL            sf_byte_write
067 0032F        489                             LOAD            s3, #data_start         ;point to data in scratch pad memory
  00080          490     write_buffer_loop:      FETCH           s1, @s3                 ;fetch data
E: instruction not supported on the this device: FETCH sX, sY.
068 083EA        491                             CALL            sf_byte_write           ;write to buffer
069 04701        492                             ADD             s7, #0x01               ;increment address
06A 05800        493                             ADDCY           s8, #0x00
06B 05900        494                             ADDCY           s9, #0x00
06C 04301        495                             ADD             s3, #0x01               ;increment SPM pointer
06D 06A01        496                             SUB             sa, #0x01               ;count bytes remaining
06E 09580        497                             JUMP            nz, write_buffer_loop
06F 001D0        498                             LOAD            s1, #0xd0               ;command to confirm write
070 083EA        499                             CALL            sf_byte_write
071 083F7        500                             CALL            wait_sf_ready           ;wait for program to complete and set read array mode
072 08080        501                             RETURN
                 502     ;
                 503     ;
                 504     ;**************************************************************************************
                 505     ; Write Command - Write one byte to specified address
                 506     ;**************************************************************************************
                 507     ;
073 083FE        508     write_command:          CALL            send_address            ;obtain 24-bit address 000000 to FFFFFF
W: value out of range: 0x2fe, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xfe.
074 0838D        509                             CALL            obtain_8bits
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
075 0998C        510                             JUMP            c, write_command        ;bad input address
076 0C900        511                             LOAD            s9, s0
077 0838D        512                             CALL            obtain_8bits
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
078 0998C        513                             JUMP            c, write_command        ;bad input address
079 0C800        514                             LOAD            s8, s0
07A 0838D        515                             CALL            obtain_8bits
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
07B 0998C        516                             JUMP            c, write_command        ;bad input address
07C 0C700        517                             LOAD            s7, s0
07D 0830E        518     get_data:               CALL            send_data               ;obtain 8-bit data 00 to FF into s0
W: value out of range: 0x30e, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xe.
07E 0838D        519                             CALL            obtain_8bits
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
07F 09996        520                             JUMP            c, get_data             ;bad input data
080 0839D        521                             CALL            sf_single_byte_write
081 08393        522                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
082 0832C        523                             CALL            send_ok
W: value out of range: 0x22c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2c.
083 08107        524                             JUMP            prompt
                 525     ;
                 526     ;
                 527     ;**************************************************************************************
                 528     ; Write a single byte to StrataFlash Memory
                 529     ;**************************************************************************************
                 530     ;
                 531     ; To write a single byte to StrataFLASH memory the address must be set and the
                 532     ; single-word/byte program command (40 hex) sent to the memory. Then the data byte can
                 533     ; be written to the memory using the same address.
                 534     ;
                 535     ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 536     ; Register s0 should contain the byte data to be written to the memory.
                 537     ;
                 538     ; The act of writing the memory array may take up to 175us to complete. This routine
                 539     ; waits for the memory to be ready before restoring the normal read array mode and
                 540     ; returning. The time taken to program is recorded by register pair [sE,sD]. Each count
                 541     ; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
                 542     ;
                 543     ; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
                 544     ;
                 545     ; Registers used s0,s1,s7,s8,s9
                 546     ;
084 00140        547     sf_single_byte_write:   LOAD            s1, #0x40               ;command for single byte program
085 083EA        548                             CALL            sf_byte_write
086 0C100        549                             LOAD            s1, s0                  ;write data to be programmed
087 083EA        550                             CALL            sf_byte_write
088 083F7        551                             CALL            wait_sf_ready           ;wait for program to complete
089 08080        552                             RETURN
                 553     ;
                 554     ;
                 555     ;**************************************************************************************
                 556     ;Read Command - Read one page of memory at specified address
                 557     ;**************************************************************************************
                 558     ;
08A 083FE        559     read_command:           CALL            send_address            ;obtain 24-bit address 000000 to FFFFFF
W: value out of range: 0x2fe, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xfe.
08B 0838D        560                             CALL            obtain_8bits            ;read value from UART
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
08C 099A3        561                             JUMP            c, read_command         ;bad input address
08D 0C900        562                             LOAD            s9, s0
08E 0838D        563                             CALL            obtain_8bits
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
08F 099A3        564                             JUMP            c, read_command         ;bad input address
090 0C800        565                             LOAD            s8, s0
091 0838D        566                             CALL            obtain_8bits
W: value out of range: 0x18d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8d.
092 099A3        567                             JUMP            c, read_command         ;bad input address
093 0C700        568                             LOAD            s7, s0
094 08393        569                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
095 083B1        570                             CALL            send_sf_page
096 0832C        571                             CALL            send_ok
W: value out of range: 0x22c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2c.
097 08107        572                             JUMP            prompt
                 573     ;
                 574     ;The start address should be provided in register set [s9,s8,s7].
                 575     ;The display will be next 256 bytes displayed as 16 lines of 16 bytes
                 576     ;with each line commencing with the address of the first byte.
                 577     ;
098 00610        578     send_sf_page:           LOAD            s6, #0x10               ;16 lines to display
099 08393        579     send_sf_line:           CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
09A 0836D        580                             CALL            send_hex_3bytes         ;display address
W: value out of range: 0x16d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x6d.
09B 08396        581                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
09C 00510        582                             LOAD            s5, #0x10               ;16 bytes to display on a line
09D 08396        583     send_sf_byte:           CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
09E 083E0        584                             CALL            sf_byte_read            ;read byte into s0
09F 04701        585                             ADD             s7, #0x01               ;increment StrataFLASH address
0A0 05800        586                             ADDCY           s8, #0x00
0A1 05900        587                             ADDCY           s9, #0x00
0A2 08367        588                             CALL            send_hex_byte           ;display byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
0A3 06501        589                             SUB             s5, #0x01               ;count bytes per line
0A4 095B6        590                             JUMP            nz, send_sf_byte
0A5 06601        591                             SUB             s6, #0x01               ;count lines
0A6 095B2        592                             JUMP            nz, send_sf_line
0A7 08393        593                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0A8 08080        594                             RETURN
                 595     ;
                 596     ;
                 597     ;**************************************************************************************
                 598     ; ID Command - Read and display the device information for the StrataFLASH FLASH memory
                 599     ;**************************************************************************************
                 600     ;
                 601     ; Normal response should be
                 602     ;   Device Manufacturer Code (Intel) = 89 hex
                 603     ;   Memory ID code for 128Mbit = 18 hex
                 604     ;
                 605     ; To read the device information the Read device information command (90)
                 606     ; must be written to the memory. The information is read back but assumes
                 607     ; that 16-bit words are being used and hence address bit0 is not really used.
                 608     ; hence addresses 000000 and 0000001 both return the Device Manufacturer Code and
                 609     ; addresses 000002 and 0000003 both return the Memory ID code.
                 610     ;
                 611     ; After reading the device information the read array command is written to the
                 612     ; device to put it back to normal read mode.
                 613     ;
                 614     ; Registers used s0,s7,s8,s9
                 615     ;
0A9 08393        616     sf_information:         CALL            send_cr                 ;send 'ID=' to terminal
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0AA 083C6        617                             CALL            send_id
W: value out of range: 0x2c6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc6.
0AB 00F3D        618                             LOAD            uart_data, #character_equals
0AC 08331        619                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
0AD 08396        620                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
0AE 00900        621                             LOAD            s9, #0x00               ;define base address 000000
0AF 00800        622                             LOAD            s8, #0x00
0B0 00700        623                             LOAD            s7, #0x00
0B1 00190        624                             LOAD            s1, #0x90               ;command to read device information
0B2 083EA        625                             CALL            sf_byte_write
0B3 083E0        626                             CALL            sf_byte_read            ;read Device Manufacturer Code into s0
0B4 08367        627                             CALL            send_hex_byte           ;display byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
0B5 08396        628                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
0B6 00702        629                             LOAD            s7, #0x02               ;change address
0B7 083E0        630                             CALL            sf_byte_read            ;read Memory ID code into s0
0B8 08367        631                             CALL            send_hex_byte           ;display byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
0B9 08393        632                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0BA 083F4        633                             CALL            set_sf_read_array_mode  ;restore normal read array mode
0BB 08107        634                             JUMP            prompt
                 635     ;
                 636     ;
                 637     ;**************************************************************************************
                 638     ; Read StrataFLASH status register
                 639     ;**************************************************************************************
                 640     ;
                 641     ; The main reason for reading the status register is to determine when the memory
                 642     ; is ready or busy. This information is provided by bit7 (0=busy and 1=ready).
                 643     ;
                 644     ; The lower bits all indicate errors of some kind and therefore the only desirable
                 645     ; response is 00 hex or 80 hex. In this program, no error checking or clearing
                 646     ; is performed and the way this routine is executed from the menu only 80 hex is
                 647     ; expected.
                 648     ;
                 649     ; To read the status register the read status register command must be written to
                 650     ; the device. All subsequent reads are then result in the return of the status
                 651     ; register. A different read command must be written to the device to stop this
                 652     ; mode.
                 653     ;
                 654     ; This mode is also entered automatically when performing program and erase operations.
                 655     ;
0BC 00900        656     sf_status:              LOAD            s9, #0x00               ;define base address 000000
0BD 00800        657                             LOAD            s8, #0x00
0BE 00700        658                             LOAD            s7, #0x00
0BF 00170        659                             LOAD            s1, #0x70               ;command to read status register
0C0 083EA        660                             CALL            sf_byte_write
0C1 08393        661                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0C2 083E0        662                             CALL            sf_byte_read            ;read status register into s0
0C3 08367        663                             CALL            send_hex_byte           ;display byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
0C4 08393        664                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0C5 083F4        665                             CALL            set_sf_read_array_mode
0C6 08107        666                             JUMP            prompt
                 667     ;
                 668     ;
                 669     ;**************************************************************************************
                 670     ; Read a byte from StrataFlash Memory
                 671     ;**************************************************************************************
                 672     ;
                 673     ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 674     ; Register s0 will return the byte data retrieved from the memory.
                 675     ;
                 676     ; To read a byte, the address needs to be set up on the address lines
                 677     ; and the controls set as follows
                 678     ;    SF_read = 1 - disable Spartan data outputs and enable StrataFlash outputs (OE=0)
                 679     ;      SF_ce = 0 - enable StrataFLASH memory
                 680     ;      SF_we = 1 - Write enable off
                 681     ;
                 682     ; The access time of the memory is 75ns. This is equivalent to 3.75 clock cycles at
                 683     ; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
                 684     ; provides adequate delay for the memory to be accessed.
                 685     ;
                 686     ; Registers used s0,s1,s7,s8,s9
                 687     ;
0C7 0E980        688     sf_byte_read:           OUTPUT          s9, sf_addr_hi_port     ;set 24-bit address
0C8 0E840        689                             OUTPUT          s8, sf_addr_mi_port
0C9 0E720        690                             OUTPUT          s7, sf_addr_lo_port
0CA 00105        691                             LOAD            s1, #0x05               ;set controls
0CB 0E108        692                             OUTPUT          s1, sf_control_port
0CC 00106        693                             LOAD            s1, #0x06               ;>75ns delay
0CD 00106        694                             LOAD            s1, #0x06               ;but do something useful!
0CE 0A002        695                             INPUT           s0, sf_data_in_port     ;read data byte
0CF 0E108        696                             OUTPUT          s1, sf_control_port     ;clear controls
0D0 08080        697                             RETURN
                 698     ;
                 699     ;
                 700     ;**************************************************************************************
                 701     ; Write data or command byte to StrataFlash Memory
                 702     ;**************************************************************************************
                 703     ;
                 704     ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 705     ; Register s1 should contain the byte to be written to the memory.
                 706     ;
                 707     ; To write a byte, the address needs to be set up on the address lines
                 708     ; and the controls set as follows
                 709     ;    SF_read = 0 - enable Spartan data outputs and disable StrataFlash outputs (OE=1)
                 710     ;      SF_ce = 0 - enable StrataFLASH memory
                 711     ;      SF_we = 0 - Write enable on
                 712     ;
                 713     ; The setup time of the memory is 60ns. This is equivalent to 3 clock cycles at
                 714     ; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
                 715     ; provides adequate delay for the memory.
                 716     ;
                 717     ; Registers used s1,s7,s8,s9
                 718     ;
0D1 0E980        719     sf_byte_write:          OUTPUT          s9, sf_addr_hi_port     ;set 24-bit address
0D2 0E840        720                             OUTPUT          s8, sf_addr_mi_port
0D3 0E720        721                             OUTPUT          s7, sf_addr_lo_port
0D4 0E110        722                             OUTPUT          s1, sf_data_out_port    ;set data byte to be written
0D5 00100        723                             LOAD            s1, #0x00               ;set controls
0D6 0E108        724                             OUTPUT          s1, sf_control_port
0D7 00106        725                             LOAD            s1, #0x06               ;>60ns delay
0D8 00106        726                             LOAD            s1, #0x06               ;but do something useful!
0D9 0E108        727                             OUTPUT          s1, sf_control_port     ;clear controls
0DA 08080        728                             RETURN
                 729     ;
                 730     ;
                 731     ;**************************************************************************************
                 732     ; Set 'Read Array' mode on StrataFLASH
                 733     ;**************************************************************************************
                 734     ;
                 735     ; The read array mode is the default mode of the memory and allows the contents
                 736     ; of the memory to be read based on the supplied address.
                 737     ;
                 738     ; Read array is the default mode of the device, but it must also be placed back
                 739     ; into this mode after programming, erasing or reading the status register.
                 740     ;
                 741     ; The read array command (FF hex) is written to the Strata flash memory.
                 742     ;
                 743     ; Registers used s1,s7,s8,s9
                 744     ;
0DB 001FF        745     set_sf_read_array_mode: LOAD            s1, #0xff               ;command to read array
0DC 083EA        746                             CALL            sf_byte_write
0DD 08080        747                             RETURN
                 748     ;
                 749     ;
                 750     ;**************************************************************************************
                 751     ; Wait for StrataFLASH to be ready
                 752     ;**************************************************************************************
                 753     ;
                 754     ; This routine will typically be used after instigating a program or erase
                 755     ; command. It continuously reads the StrataFLASH status register and tests the
                 756     ; information provided by bit7 which indicates if the memory is busy(0) or ready(1).
                 757     ; The routine waits for the ready condition before sending a read array command
                 758     ; which puts the memory back to normal read mode.
                 759     ;
                 760     ; During the polling process, a counter formed by register pair [sE,sD] records
                 761     ; approximately how long the memory is busy. This can be used to evaluate programming
                 762     ; and erase times if required. The timing loop is 15 instructions which is equivalent
                 763     ; to 30 clock cycles (600ns at 50MHz)
                 764     ;
                 765     ; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
                 766     ;
                 767     ;
0DE 00E00        768     wait_sf_ready:          LOAD            se, #0x00               ;clear 16-bit counter timer
0DF 00D00        769                             LOAD            sd, #0x00
0E0 04D01        770     wait_sf_loop:           ADD             sd, #0x01               ;increment counter timer
0E1 05E00        771                             ADDCY           se, #0x00
0E2 083E0        772                             CALL            sf_byte_read            ;read status register into s0
                 773                             TEST            s0, #0x80               ;test ready/busy flag
E: instruction not supported on the this device: TEST sX, kk.
0E3 091F9        774                             JUMP            z, wait_sf_loop
0E4 083F4        775                             CALL            set_sf_read_array_mode  ;restore normal read array mode
0E5 08080        776                             RETURN
                 777     ;
                 778     ;
                 779     ;**************************************************************************************
                 780     ; Send 16-bit value in register pair [sE,sD] to UART
                 781     ;**************************************************************************************
                 782     ;
                 783     ; In this program the register pair [sE,sD] indicates the programming time of the
                 784     ; StrataFLASH memory in 600ns increments. This routine can be used to display that
                 785     ; value if required.
                 786     ;
0E6 08393        787     send_counter_timer:     CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0E7 0C0E0        788                             LOAD            s0, se
0E8 08367        789                             CALL            send_hex_byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
0E9 0C0D0        790                             LOAD            s0, sd
0EA 08367        791                             CALL            send_hex_byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
0EB 08393        792                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
0EC 08080        793                             RETURN
                 794     ;
                 795     ;
                 796     ;**************************************************************************************
                 797     ;Software delay routines
                 798     ;**************************************************************************************
                 799     ;
                 800     ;Delay of 1us.
                 801     ;
                 802     ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 803     ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 804     ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 805     ;
                 806     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 807     ;
                 808     ;Registers used s0
                 809     ;
0ED 0000B        810     delay_1us:              LOAD            s0, #delay_1us_constant
0EE 06001        811     wait_1us:               SUB             s0, #0x01
0EF 09508        812                             JUMP            nz, wait_1us
W: value out of range: 0x108, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8.
0F0 08080        813                             RETURN
                 814     ;
                 815     ;Delay of 40us.
                 816     ;
                 817     ;Registers used s0, s1
                 818     ;
0F1 00128        819     delay_40us:             LOAD            s1, #0x28               ;40 x 1us = 40us
0F2 08307        820     wait_40us:              CALL            delay_1us
W: value out of range: 0x107, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x7.
0F3 06101        821                             SUB             s1, #0x01
0F4 0950C        822                             JUMP            nz, wait_40us
W: value out of range: 0x10c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc.
0F5 08080        823                             RETURN
                 824     ;
                 825     ;
                 826     ;Delay of 1ms.
                 827     ;
                 828     ;Registers used s0, s1, s2
                 829     ;
0F6 00219        830     delay_1ms:              LOAD            s2, #0x19               ;25 x 40us = 1ms
0F7 0830B        831     wait_1ms:               CALL            delay_40us
W: value out of range: 0x10b, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb.
0F8 06201        832                             SUB             s2, #0x01
0F9 09511        833                             JUMP            nz, wait_1ms
W: value out of range: 0x111, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x11.
0FA 08080        834                             RETURN
                 835     ;
                 836     ;Delay of 20ms.
                 837     ;
                 838     ;Delay of 20ms used during initialisation.
                 839     ;
                 840     ;Registers used s0, s1, s2, s3
                 841     ;
0FB 00314        842     delay_20ms:             LOAD            s3, #0x14               ;20 x 1ms = 20ms
0FC 08310        843     wait_20ms:              CALL            delay_1ms
W: value out of range: 0x110, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x10.
0FD 06301        844                             SUB             s3, #0x01
0FE 09516        845                             JUMP            nz, wait_20ms
W: value out of range: 0x116, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x16.
0FF 08080        846                             RETURN
                 847     ;
                 848     ;Delay of approximately 1 second.
                 849     ;
                 850     ;Registers used s0, s1, s2, s3, s4
                 851     ;
100 00414        852     delay_1s:               LOAD            s4, #0x14               ;50 x 20ms = 1000ms
101 08315        853     wait_1s:                CALL            delay_20ms
W: value out of range: 0x115, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x15.
102 06401        854                             SUB             s4, #0x01
103 0951B        855                             JUMP            nz, wait_1s
W: value out of range: 0x11b, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1b.
104 08080        856                             RETURN
                 857     ;
                 858     ;
                 859     ;**************************************************************************************
                 860     ;UART communication routines
                 861     ;**************************************************************************************
                 862     ;
                 863     ;Read one character from the UART
                 864     ;
                 865     ;Character read will be returned in a register called 'UART_data'.
                 866     ;
                 867     ;The routine first tests the receiver FIFO buffer to see if data is present.
                 868     ;If the FIFO is empty, the routine waits until there is a character to read.
                 869     ;As this could take any amount of time the wait loop could include a call to a
                 870     ;subroutine which performs a useful function.
                 871     ;
                 872     ;If the received character is an XOFF, then the routine will then wait
                 873     ;for an XON to be received. This means that the rest of the program is held
                 874     ;in suspense and therefore it can not transmit. Once an XON is received, it will
                 875     ;again wait for a normal character before returning.
                 876     ;
                 877     ;NOTE: Characters between the XOFF and XON will be ignored in this version of the
                 878     ;program!!!
                 879     ;
                 880     ;Interrupt is disabled during this routine to prevent a false situation. If the
                 881     ;receiver half-full flag went High it should result in an interrupt transmitting
                 882     ;an XOFF character. However, if this routine were able to read the receiver buffer
                 883     ;at just about the same as the hardware detects the half-full flag, then it could
                 884     ;think that an XON needs to be transmitted.
                 885     ;
                 886     ;
                 887     ;Registers used s0 and UART_data
                 888     ;
105 08010        889     read_from_uart:         DISABLE         interrupt
106 0A000        890     wait_rx_character:      INPUT           s0, status_port         ;test Rx_FIFO buffer
                 891                             TEST            s0, #rx_data_present
E: instruction not supported on the this device: TEST sX, kk.
107 09524        892                             JUMP            nz, read_character
W: value out of range: 0x124, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x24.
108 08120        893                             JUMP            wait_rx_character
W: value out of range: 0x120, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x20.
109 0AF01        894     read_character:         INPUT           uart_data, uart_read_port ;read from FIFO
                 895                             COMPARE         uart_data, #character_xoff ;test for XOFF
E: instruction not supported on the this device: COMPARE sX, kk.
10A 09129        896                             JUMP            z, wait_xon
W: value out of range: 0x129, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x29.
10B 08030        897                             ENABLE          interrupt               ;normal finish
10C 08080        898                             RETURN
10D 0A000        899     wait_xon:               INPUT           s0, status_port         ;test Rx_FIFO buffer
                 900                             TEST            s0, #rx_data_present
E: instruction not supported on the this device: TEST sX, kk.
10E 0952D        901                             JUMP            nz, read_xon
W: value out of range: 0x12d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x2d.
10F 08129        902                             JUMP            wait_xon
W: value out of range: 0x129, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x29.
110 0AF01        903     read_xon:               INPUT           uart_data, uart_read_port ;read from FIFO
                 904                             COMPARE         uart_data, #character_xon ;test for XON
E: instruction not supported on the this device: COMPARE sX, kk.
111 09120        905                             JUMP            z, wait_rx_character    ;now wait for normal character
W: value out of range: 0x120, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x20.
112 08129        906                             JUMP            wait_xon                ;continue to wait for XON
W: value out of range: 0x129, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x29.
                 907     ;
                 908     ;
                 909     ;
                 910     ;Transmit one character to the UART
                 911     ;
                 912     ;Character supplied in register called 'UART_data'.
                 913     ;
                 914     ;The routine first tests the transmit FIFO buffer is empty.
                 915     ;If the FIFO currently has any data, the routine waits until it is empty.
                 916     ;Ultimately this means that only one character is sent at a time which
                 917     ;could be important if the PC at the other end of the link transmits
                 918     ;an XOFF and needs the flow of data to terminate as soon as possible.
                 919     ;
                 920     ;Registers used s0
                 921     ;
113 0A000        922     send_to_uart:           INPUT           s0, status_port         ;test Tx_FIFO buffer
                 923                             TEST            s0, #tx_data_present
E: instruction not supported on the this device: TEST sX, kk.
114 09135        924                             JUMP            z, uart_write
W: value out of range: 0x135, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x35.
115 08131        925                             JUMP            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
116 0EF04        926     uart_write:             OUTPUT          uart_data, uart_write_port
117 08080        927                             RETURN
                 928     ;
                 929     ;
                 930     ;**************************************************************************************
                 931     ;Useful ASCII conversion and handling routines
                 932     ;**************************************************************************************
                 933     ;
                 934     ;Convert value provided in register s0 into ASCII characters
                 935     ;
                 936     ;The value provided must in the range 0 to 99 and will be converted into
                 937     ;two ASCII characters.
                 938     ;     The number of 'tens' will be represented by an ASCII character returned in register s1.
                 939     ;     The number of 'units' will be represented by an ASCII character returned in register s0.
                 940     ;
                 941     ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex added to
                 942     ;the actual decimal value.
                 943     ;
                 944     ;Registers used s0 and s1.
                 945     ;
118 00130        946     decimal_to_ascii:       LOAD            s1, #0x30               ;load 'tens' counter with ASCII for '0'
119 04101        947     test_for_ten:           ADD             s1, #0x01               ;increment 'tens' value
11A 0600A        948                             SUB             s0, #0x0a               ;try to subtract 10 from the supplied value
11B 09D38        949                             JUMP            nc, test_for_ten        ;repeat if subtraction was possible without underflow.
W: value out of range: 0x138, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x38.
11C 06101        950                             SUB             s1, #0x01               ;'tens' value one less ten due to underflow
11D 0403A        951                             ADD             s0, #0x3a               ;restore units value (the remainder) and convert to ASCII
11E 08080        952                             RETURN
                 953     ;
                 954     ;
                 955     ;
                 956     ;Convert character to upper case
                 957     ;
                 958     ;The character supplied in register s0.
                 959     ;If the character is in the range 'a' to 'z', it is converted
                 960     ;to the equivalent upper case character in the range 'A' to 'Z'.
                 961     ;All other characters remain unchanged.
                 962     ;
                 963     ;Registers used s0.
                 964     ;
  0013E          965     upper_case:             COMPARE         s0, #0x61               ;eliminate character codes below 'a' (61 hex)
E: instruction not supported on the this device: COMPARE sX, kk.
11F 09880        966                             RETURN          c
                 967                             COMPARE         s0, #0x7b               ;eliminate character codes above 'z' (7A hex)
E: instruction not supported on the this device: COMPARE sX, kk.
120 09C80        968                             RETURN          nc
121 010DF        969                             AND             s0, #0xdf               ;mask bit5 to convert to upper case
122 08080        970                             RETURN
                 971     ;
                 972     ;
                 973     ;Convert character '0' to '9' to numerical value in range 0 to 9
                 974     ;
                 975     ;The character supplied in register s0. If the character is in the
                 976     ;range '0' to '9', it is converted to the equivalent decimal value.
                 977     ;Characters not in the range '0' to '9' are signified by the return
                 978     ;with the CARRY flag set.
                 979     ;
                 980     ;Registers used s0.
                 981     ;
123 040C6        982     _1char_to_value:        ADD             s0, #0xc6               ;reject character codes above '9' (39 hex)
124 09880        983                             RETURN          c                       ;carry flag is set
125 060F6        984                             SUB             s0, #0xf6               ;reject character codes below '0' (30 hex)
126 08080        985                             RETURN                                  ;carry is set if value not in range
                 986     ;
                 987     ;
                 988     ;Determine the numerical value of a two character decimal string held in
                 989     ;scratch pad memory such the result is in the range 0 to 99 (00 to 63 hex).
                 990     ;
                 991     ;The string must be stored in two consecutive memory locations and the
                 992     ;location of the first (tens) character supplied in the s1 register.
                 993     ;The result is provided in register s2. Strings not using characters in the
                 994     ;range '0' to '9' are signified by the return with the CARRY flag set.
                 995     ;
                 996     ;Registers used s0, s1 and s2.
                 997     ;
  00148          998     _2char_to_value:        FETCH           s0, @s1                 ;read 'tens' character
E: instruction not supported on the this device: FETCH sX, sY.
127 08344        999                             CALL            _1char_to_value         ;convert to numerical value
W: value out of range: 0x144, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x44.
128 09880       1000                             RETURN          c                       ;bad character - CARRY set
129 0C200       1001                             LOAD            s2, s0
12A 0D206       1002                             SL0             s2                      ;multiply 'tens' value by 10 (0A hex)
12B 0D206       1003                             SL0             s2
12C 0C204       1004                             ADD             s2, s0
12D 0D206       1005                             SL0             s2
12E 04101       1006                             ADD             s1, #0x01               ;read 'units' character
                1007                             FETCH           s0, @s1
E: instruction not supported on the this device: FETCH sX, sY.
12F 08344       1008                             CALL            _1char_to_value         ;convert to numerical value
W: value out of range: 0x144, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x44.
130 09880       1009                             RETURN          c                       ;bad character - CARRY set
131 0C204       1010                             ADD             s2, s0                  ;add units to result and clear CARRY flag
132 08080       1011                             RETURN
                1012     ;
                1013     ;
                1014     ;Convert hexadecimal value provided in register s0 into ASCII characters
                1015     ;
                1016     ;The value provided must can be any value in the range 00 to FF and will be converted into
                1017     ;two ASCII characters.
                1018     ;     The upper nibble will be represented by an ASCII character returned in register s2.
                1019     ;     The lower nibble will be represented by an ASCII character returned in register s1.
                1020     ;
                1021     ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                1022     ;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                1023     ;hexadecimal requiring a further addition of 07 to the 30 already added.
                1024     ;
                1025     ;Registers used s0, s1 and s2.
                1026     ;
133 0C100       1027     hex_byte_to_ascii:      LOAD            s1, s0                  ;remember value supplied
134 0D00E       1028                             SR0             s0                      ;isolate upper nibble
135 0D00E       1029                             SR0             s0
136 0D00E       1030                             SR0             s0
137 0D00E       1031                             SR0             s0
138 08362       1032                             CALL            hex_to_ascii            ;convert
W: value out of range: 0x162, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x62.
139 0C200       1033                             LOAD            s2, s0                  ;upper nibble value in s2
13A 0C010       1034                             LOAD            s0, s1                  ;restore complete value
13B 0100F       1035                             AND             s0, #0x0f               ;isolate lower nibble
13C 08362       1036                             CALL            hex_to_ascii            ;convert
W: value out of range: 0x162, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x62.
13D 0C100       1037                             LOAD            s1, s0                  ;lower nibble value in s1
13E 08080       1038                             RETURN
                1039     ;
                1040     ;Convert hexadecimal value provided in register s0 into ASCII character
                1041     ;
                1042     ;Register used s0
                1043     ;
13F 0600A       1044     hex_to_ascii:           SUB             s0, #0x0a               ;test if value is in range 0 to 9
140 09965       1045                             JUMP            c, number_char
W: value out of range: 0x165, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x65.
141 04007       1046                             ADD             s0, #0x07               ;ASCII char A to F in range 41 to 46
142 0403A       1047     number_char:            ADD             s0, #0x3a               ;ASCII char 0 to 9 in range 30 to 40
143 08080       1048                             RETURN
                1049     ;
                1050     ;
                1051     ;Send the two character HEX value of the register contents 's0' to the UART
                1052     ;
                1053     ;Registers used s0, s1, s2
                1054     ;
144 08356       1055     send_hex_byte:          CALL            hex_byte_to_ascii
W: value out of range: 0x156, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x56.
145 0CF20       1056                             LOAD            uart_data, s2
146 08331       1057                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
147 0CF10       1058                             LOAD            uart_data, s1
148 08331       1059                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
149 08080       1060                             RETURN
                1061     ;
                1062     ;
                1063     ;
                1064     ;Send the six character HEX value of the register contents [s9,s8,s7] to the UART
                1065     ;
                1066     ;Registers used s0, s1, s2
                1067     ;
14A 0C090       1068     send_hex_3bytes:        LOAD            s0, s9
14B 08367       1069                             CALL            send_hex_byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
14C 0C080       1070                             LOAD            s0, s8
14D 08367       1071                             CALL            send_hex_byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
14E 0C070       1072                             LOAD            s0, s7
14F 08367       1073                             CALL            send_hex_byte
W: value out of range: 0x167, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x67.
150 08080       1074                             RETURN
                1075     ;
                1076     ;
                1077     ;Convert the HEX ASCII characters contained in 's3' and 's2' into
                1078     ;an equivalent hexadecimal value in register 's0'.
                1079     ;     The upper nibble is represented by an ASCII character in register s3.
                1080     ;     The lower nibble is represented by an ASCII character in register s2.
                1081     ;
                1082     ;Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
                1083     ;will be set on return.
                1084     ;
                1085     ;Registers used s0, s2 and s3.
                1086     ;
151 0C030       1087     ascii_byte_to_hex:      LOAD            s0, s3                  ;Take upper nibble
152 08381       1088                             CALL            ascii_to_hex            ;convert to value
W: value out of range: 0x181, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x81.
153 09880       1089                             RETURN          c                       ;reject if out of range
154 0C300       1090                             LOAD            s3, s0                  ;remember value
155 0D306       1091                             SL0             s3                      ;multiply value by 16 to put in upper nibble
156 0D306       1092                             SL0             s3
157 0D306       1093                             SL0             s3
158 0D306       1094                             SL0             s3
159 0C020       1095                             LOAD            s0, s2                  ;Take lower nibble
15A 08381       1096                             CALL            ascii_to_hex            ;convert to value
W: value out of range: 0x181, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x81.
15B 09880       1097                             RETURN          c                       ;reject if out of range
15C 0C032       1098                             OR              s0, s3                  ;merge in the upper nibble with CARRY reset
15D 08080       1099                             RETURN
                1100     ;
                1101     ;
                1102     ;Routine to convert ASCII data in 's0' to an equivalent HEX value.
                1103     ;
                1104     ;If character is not valid for hex, then CARRY is set on return.
                1105     ;
                1106     ;Register used s0
                1107     ;
15E 040B9       1108     ascii_to_hex:           ADD             s0, #0xb9               ;test for above ASCII code 46 ('F')
15F 09880       1109                             RETURN          c
160 060E9       1110                             SUB             s0, #0xe9               ;normalise 0 to 9 with A-F in 11 to 16 hex
161 09880       1111                             RETURN          c                       ;reject below ASCII code 30 ('0')
162 06011       1112                             SUB             s0, #0x11               ;isolate A-F down to 00 to 05 hex
163 09D8B       1113                             JUMP            nc, ascii_letter
W: value out of range: 0x18b, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x8b.
164 04007       1114                             ADD             s0, #0x07               ;test for above ASCII code 46 ('F')
165 09880       1115                             RETURN          c
166 060F6       1116                             SUB             s0, #0xf6               ;convert to range 00 to 09
167 08080       1117                             RETURN
168 0400A       1118     ascii_letter:           ADD             s0, #0x0a               ;convert to range 0A to 0F
169 08080       1119                             RETURN
                1120     ;
                1121     ;
                1122     ;Read two hex characters from UART and convert to single byte data
                1123     ;
16A 08322       1124     obtain_8bits:           CALL            read_upper_case         ;obtain one byte from UART
16B 0C300       1125                             LOAD            s3, s0
16C 08322       1126                             CALL            read_upper_case
16D 0C200       1127                             LOAD            s2, s0
16E 08374       1128                             CALL            ascii_byte_to_hex
W: value out of range: 0x174, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x74.
16F 08080       1129                             RETURN
                1130     ;
                1131     ;**************************************************************************************
                1132     ;Text messages
                1133     ;**************************************************************************************
                1134     ;
                1135     ;
                1136     ;Send Carriage Return to the UART
                1137     ;
170 00F0D       1138     send_cr:                LOAD            uart_data, #character_cr
171 08331       1139                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
172 08080       1140                             RETURN
                1141     ;
                1142     ;Send a space to the UART
                1143     ;
173 00F20       1144     send_space:             LOAD            uart_data, #character_space
174 08331       1145                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
175 08080       1146                             RETURN
                1147     ;
                1148     ;
                1149     ;Send 'PicoBlaze NOR FLASH Programmer' string to the UART
                1150     ;
176 08393       1151     send_welcome:           CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
177 08393       1152                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
178 00F50       1153                             LOAD            uart_data, #_character_p
179 08331       1154                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
17A 00F69       1155                             LOAD            uart_data, #character_i
17B 08331       1156                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
17C 00F63       1157                             LOAD            uart_data, #character_c
17D 08331       1158                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
17E 00F6F       1159                             LOAD            uart_data, #character_o
17F 08331       1160                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
180 00F42       1161                             LOAD            uart_data, #_character_b
181 08331       1162                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
182 00F6C       1163                             LOAD            uart_data, #character_l
183 08331       1164                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
184 00F61       1165                             LOAD            uart_data, #character_a
185 08331       1166                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
186 00F7A       1167                             LOAD            uart_data, #character_z
187 08331       1168                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
188 00F65       1169                             LOAD            uart_data, #character_e
189 08331       1170                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
18A 08396       1171                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
18B 00F4E       1172                             LOAD            uart_data, #_character_n
18C 08331       1173                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
18D 00F4F       1174                             LOAD            uart_data, #_character_o
18E 08331       1175                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
18F 00F52       1176                             LOAD            uart_data, #_character_r
190 08331       1177                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
191 08396       1178                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
192 00F46       1179                             LOAD            uart_data, #_character_f
193 08331       1180                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
194 00F4C       1181                             LOAD            uart_data, #_character_l
195 08331       1182                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
196 00F41       1183                             LOAD            uart_data, #_character_a
197 08331       1184                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
198 00F53       1185                             LOAD            uart_data, #_character_s
199 08331       1186                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
19A 00F48       1187                             LOAD            uart_data, #_character_h
19B 08331       1188                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
19C 08396       1189                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
19D 00F50       1190                             LOAD            uart_data, #_character_p
19E 08331       1191                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
19F 00F72       1192                             LOAD            uart_data, #character_r
1A0 08331       1193                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1A1 00F6F       1194                             LOAD            uart_data, #character_o
1A2 08331       1195                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1A3 00F67       1196                             LOAD            uart_data, #character_g
1A4 08331       1197                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1A5 00F72       1198                             LOAD            uart_data, #character_r
1A6 08331       1199                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1A7 00F61       1200                             LOAD            uart_data, #character_a
1A8 08331       1201                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1A9 00F6D       1202                             LOAD            uart_data, #character_m
1AA 08331       1203                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1AB 00F6D       1204                             LOAD            uart_data, #character_m
1AC 08331       1205                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1AD 00F65       1206                             LOAD            uart_data, #character_e
1AE 08331       1207                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1AF 00F72       1208                             LOAD            uart_data, #character_r
1B0 08331       1209                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1B1 08396       1210                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
1B2 00F76       1211                             LOAD            uart_data, #character_v
1B3 08331       1212                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1B4 00F31       1213                             LOAD            uart_data, #character_1
1B5 08331       1214                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1B6 00F2E       1215                             LOAD            uart_data, #character_fullstop
1B7 08331       1216                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1B8 00F30       1217                             LOAD            uart_data, #character_0
1B9 08331       1218                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1BA 00F30       1219                             LOAD            uart_data, #character_0
1BB 08331       1220                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1BC 08393       1221                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
1BD 08393       1222                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
1BE 08080       1223                             RETURN
                1224     ;
                1225     ;
                1226     ;
                1227     ;Send 'Waiting_MCS_file' string to the UART
                1228     ;
1BF 00F57       1229     send_waiting_mcs_file:  LOAD            uart_data, #_character_w
1C0 08331       1230                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1C1 00F61       1231                             LOAD            uart_data, #character_a
1C2 08331       1232                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1C3 00F69       1233                             LOAD            uart_data, #character_i
1C4 08331       1234                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1C5 00F74       1235                             LOAD            uart_data, #character_t
1C6 08331       1236                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1C7 00F69       1237                             LOAD            uart_data, #character_i
1C8 08331       1238                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1C9 00F6E       1239                             LOAD            uart_data, #character_n
1CA 08331       1240                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1CB 00F67       1241                             LOAD            uart_data, #character_g
1CC 08331       1242                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1CD 08396       1243                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
1CE 00F66       1244                             LOAD            uart_data, #character_f
1CF 08331       1245                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1D0 00F6F       1246                             LOAD            uart_data, #character_o
1D1 08331       1247                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1D2 00F72       1248                             LOAD            uart_data, #character_r
1D3 08331       1249                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1D4 08396       1250     send_mcs_file:          CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
1D5 00F4D       1251                             LOAD            uart_data, #_character_m
1D6 08331       1252                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1D7 00F43       1253                             LOAD            uart_data, #_character_c
1D8 08331       1254                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1D9 00F53       1255                             LOAD            uart_data, #_character_s
1DA 08331       1256                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1DB 08396       1257                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
1DC 00F46       1258                             LOAD            uart_data, #_character_f
1DD 08331       1259                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1DE 00F69       1260                             LOAD            uart_data, #character_i
1DF 08331       1261                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1E0 00F6C       1262                             LOAD            uart_data, #character_l
1E1 08331       1263                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1E2 00F65       1264                             LOAD            uart_data, #character_e
1E3 08331       1265                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1E4 08393       1266                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
1E5 08080       1267                             RETURN
                1268     ;
                1269     ;
                1270     ;Send 'Erase in progress' string to the UART
                1271     ;
1E6 08320       1272     send_erase_in_progress: CALL            send_erase
W: value out of range: 0x220, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x20.
1E7 00F69       1273                             LOAD            uart_data, #character_i
1E8 08331       1274                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1E9 00F6E       1275                             LOAD            uart_data, #character_n
1EA 08331       1276                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1EB 08396       1277                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
1EC 00F50       1278                             LOAD            uart_data, #_character_p
1ED 08331       1279                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1EE 00F72       1280                             LOAD            uart_data, #character_r
1EF 08331       1281                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1F0 00F6F       1282                             LOAD            uart_data, #character_o
1F1 08331       1283                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1F2 00F67       1284                             LOAD            uart_data, #character_g
1F3 08331       1285                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1F4 00F72       1286                             LOAD            uart_data, #character_r
1F5 08331       1287                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1F6 00F65       1288                             LOAD            uart_data, #character_e
1F7 08331       1289                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1F8 00F73       1290                             LOAD            uart_data, #character_s
1F9 08331       1291                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1FA 08331       1292                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1FB 08393       1293                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
1FC 08080       1294                             RETURN
                1295     ;
                1296     ;
                1297     ;Send 'Erase ' string to the UART
                1298     ;
1FD 00F45       1299     send_erase:             LOAD            uart_data, #_character_e
1FE 08331       1300                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
1FF 00F72       1301                             LOAD            uart_data, #character_r
200 08331       1302                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
201 00F61       1303                             LOAD            uart_data, #character_a
202 08331       1304                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
203 00F73       1305                             LOAD            uart_data, #character_s
204 08331       1306                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
205 00F65       1307                             LOAD            uart_data, #character_e
206 08331       1308                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
207 08396       1309                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
208 08080       1310                             RETURN
                1311     ;
                1312     ;
                1313     ;Send carriage return, 'OK' and carriage return to the UART
                1314     ;
209 08393       1315     send_ok:                CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
20A 00F4F       1316                             LOAD            uart_data, #_character_o
20B 08331       1317                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
20C 00F4B       1318                             LOAD            uart_data, #_character_k
20D 08331       1319                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
20E 08393       1320                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
20F 08080       1321                             RETURN
                1322     ;
                1323     ;
                1324     ;
                1325     ;Send menu to the UART
                1326     ;
210 08393       1327     send_menu:              CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
211 00F45       1328                             LOAD            uart_data, #_character_e
212 08331       1329                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
213 00F2D       1330                             LOAD            uart_data, #character_minus
214 08331       1331                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
215 08320       1332                             CALL            send_erase
W: value out of range: 0x220, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x20.
216 00F61       1333                             LOAD            uart_data, #character_a
217 08331       1334                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
218 00F6C       1335                             LOAD            uart_data, #character_l
219 08331       1336                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
21A 08331       1337                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
21B 08393       1338                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
21C 00F42       1339                             LOAD            uart_data, #_character_b
21D 08331       1340                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
21E 00F2D       1341                             LOAD            uart_data, #character_minus
21F 08331       1342                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
220 08320       1343                             CALL            send_erase
W: value out of range: 0x220, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x20.
221 00F62       1344                             LOAD            uart_data, #character_b
222 08331       1345                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
223 00F6C       1346                             LOAD            uart_data, #character_l
224 08331       1347                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
225 00F6F       1348                             LOAD            uart_data, #character_o
226 08331       1349                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
227 00F63       1350                             LOAD            uart_data, #character_c
228 08331       1351                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
229 00F6B       1352                             LOAD            uart_data, #character_k
22A 08331       1353                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
22B 00F73       1354                             LOAD            uart_data, #character_s
22C 08331       1355                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
22D 08396       1356                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
22E 00F31       1357                             LOAD            uart_data, #character_1
22F 08331       1358                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
230 00F2D       1359                             LOAD            uart_data, #character_minus
231 08331       1360                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
232 00F33       1361                             LOAD            uart_data, #character_3
233 08331       1362                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
234 08393       1363                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
235 00F50       1364                             LOAD            uart_data, #_character_p
236 08331       1365                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
237 00F2D       1366                             LOAD            uart_data, #character_minus
238 08331       1367                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
239 00F50       1368                             LOAD            uart_data, #_character_p
23A 08331       1369                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
23B 00F72       1370                             LOAD            uart_data, #character_r
23C 08331       1371                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
23D 00F6F       1372                             LOAD            uart_data, #character_o
23E 08331       1373                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
23F 00F67       1374                             LOAD            uart_data, #character_g
240 08331       1375                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
241 00F72       1376                             LOAD            uart_data, #character_r
242 08331       1377                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
243 00F61       1378                             LOAD            uart_data, #character_a
244 08331       1379                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
245 00F6D       1380                             LOAD            uart_data, #character_m
246 08331       1381                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
247 083F7       1382                             CALL            send_mcs_file
W: value out of range: 0x1f7, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xf7.
248 00F57       1383                             LOAD            uart_data, #_character_w
249 08331       1384                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
24A 00F2D       1385                             LOAD            uart_data, #character_minus
24B 08331       1386                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
24C 00F57       1387                             LOAD            uart_data, #_character_w
24D 08331       1388                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
24E 00F72       1389                             LOAD            uart_data, #character_r
24F 08331       1390                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
250 00F69       1391                             LOAD            uart_data, #character_i
251 08331       1392                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
252 00F74       1393                             LOAD            uart_data, #character_t
253 08331       1394                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
254 00F65       1395                             LOAD            uart_data, #character_e
255 08331       1396                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
256 08396       1397                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
257 083CB       1398                             CALL            send_byte
W: value out of range: 0x2cb, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xcb.
258 08393       1399                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
259 00F52       1400                             LOAD            uart_data, #_character_r
25A 08331       1401                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
25B 00F2D       1402                             LOAD            uart_data, #character_minus
25C 08331       1403                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
25D 00F52       1404                             LOAD            uart_data, #_character_r
25E 08331       1405                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
25F 00F65       1406                             LOAD            uart_data, #character_e
260 08331       1407                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
261 00F61       1408                             LOAD            uart_data, #character_a
262 08331       1409                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
263 00F64       1410                             LOAD            uart_data, #character_d
264 08331       1411                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
265 08396       1412                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
266 00F32       1413                             LOAD            uart_data, #character_2
267 08331       1414                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
268 00F35       1415                             LOAD            uart_data, #character_5
269 08331       1416                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
26A 00F36       1417                             LOAD            uart_data, #character_6
26B 08331       1418                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
26C 08396       1419                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
26D 083CB       1420                             CALL            send_byte
W: value out of range: 0x2cb, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xcb.
26E 00F73       1421                             LOAD            uart_data, #character_s
26F 08331       1422                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
270 08393       1423                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
271 00F49       1424                             LOAD            uart_data, #_character_i
272 08331       1425                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
273 00F2D       1426                             LOAD            uart_data, #character_minus
274 08331       1427                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
275 00F44       1428                             LOAD            uart_data, #_character_d
276 08331       1429                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
277 00F65       1430                             LOAD            uart_data, #character_e
278 08331       1431                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
279 00F76       1432                             LOAD            uart_data, #character_v
27A 08331       1433                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
27B 00F69       1434                             LOAD            uart_data, #character_i
27C 08331       1435                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
27D 00F63       1436                             LOAD            uart_data, #character_c
27E 08331       1437                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
27F 00F65       1438                             LOAD            uart_data, #character_e
280 08331       1439                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
281 08396       1440                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
282 083C6       1441                             CALL            send_id
W: value out of range: 0x2c6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc6.
283 08393       1442                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
284 00F48       1443                             LOAD            uart_data, #_character_h
285 08331       1444                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
286 00F2D       1445                             LOAD            uart_data, #character_minus
287 08331       1446                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
288 00F48       1447                             LOAD            uart_data, #_character_h
289 08331       1448                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
28A 00F65       1449                             LOAD            uart_data, #character_e
28B 08331       1450                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
28C 00F6C       1451                             LOAD            uart_data, #character_l
28D 08331       1452                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
28E 00F70       1453                             LOAD            uart_data, #character_p
28F 08331       1454                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
290 08393       1455                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
291 00F53       1456                             LOAD            uart_data, #_character_s
292 08331       1457                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
293 00F2D       1458                             LOAD            uart_data, #character_minus
294 08331       1459                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
295 00F53       1460                             LOAD            uart_data, #_character_s
296 08331       1461                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
297 00F74       1462                             LOAD            uart_data, #character_t
298 08331       1463                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
299 00F61       1464                             LOAD            uart_data, #character_a
29A 08331       1465                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
29B 00F74       1466                             LOAD            uart_data, #character_t
29C 08331       1467                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
29D 00F75       1468                             LOAD            uart_data, #character_u
29E 08331       1469                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
29F 00F73       1470                             LOAD            uart_data, #character_s
2A0 08331       1471                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2A1 08393       1472                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
2A2 08080       1473                             RETURN
                1474     ;
                1475     ;
                1476     ;Send 'ID' to the UART
                1477     ;
2A3 00F49       1478     send_id:                LOAD            uart_data, #_character_i
2A4 08331       1479                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2A5 00F44       1480                             LOAD            uart_data, #_character_d
2A6 08331       1481                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2A7 08080       1482                             RETURN
                1483     ;
                1484     ;
                1485     ;Send 'byte' to the UART
                1486     ;
2A8 00F62       1487     send_byte:              LOAD            uart_data, #character_b
2A9 08331       1488                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2AA 00F79       1489                             LOAD            uart_data, #character_y
2AB 08331       1490                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2AC 00F74       1491                             LOAD            uart_data, #character_t
2AD 08331       1492                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2AE 00F65       1493                             LOAD            uart_data, #character_e
2AF 08331       1494                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2B0 08080       1495                             RETURN
                1496     ;
                1497     ;
                1498     ;Send 'Confirm Erase (Y/n) ' to the UART
                1499     ;
2B1 08393       1500     send_confirm:           CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
2B2 00F43       1501                             LOAD            uart_data, #_character_c
2B3 08331       1502                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2B4 00F6F       1503                             LOAD            uart_data, #character_o
2B5 08331       1504                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2B6 00F6E       1505                             LOAD            uart_data, #character_n
2B7 08331       1506                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2B8 00F66       1507                             LOAD            uart_data, #character_f
2B9 08331       1508                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2BA 00F69       1509                             LOAD            uart_data, #character_i
2BB 08331       1510                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2BC 00F72       1511                             LOAD            uart_data, #character_r
2BD 08331       1512                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2BE 00F6D       1513                             LOAD            uart_data, #character_m
2BF 08331       1514                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2C0 08396       1515                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
2C1 08320       1516                             CALL            send_erase
W: value out of range: 0x220, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x20.
2C2 00F28       1517                             LOAD            uart_data, #character_open
2C3 08331       1518                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2C4 00F59       1519                             LOAD            uart_data, #_character_y
2C5 08331       1520                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2C6 00F2F       1521                             LOAD            uart_data, #character_divide
2C7 08331       1522                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2C8 00F6E       1523                             LOAD            uart_data, #character_n
2C9 08331       1524                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2CA 00F29       1525                             LOAD            uart_data, #character_close
2CB 08331       1526                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2CC 08396       1527                             CALL            send_space
W: value out of range: 0x196, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x96.
2CD 08080       1528                             RETURN
                1529     ;
                1530     ;
                1531     ;Send 'Abort' to the UART
                1532     ;
2CE 08393       1533     send_abort:             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
2CF 00F41       1534                             LOAD            uart_data, #_character_a
2D0 08331       1535                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2D1 00F62       1536                             LOAD            uart_data, #character_b
2D2 08331       1537                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2D3 00F6F       1538                             LOAD            uart_data, #character_o
2D4 08331       1539                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2D5 00F72       1540                             LOAD            uart_data, #character_r
2D6 08331       1541                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2D7 00F74       1542                             LOAD            uart_data, #character_t
2D8 08331       1543                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2D9 08393       1544                             CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
2DA 08080       1545                             RETURN
                1546     ;
                1547     ;Send 'address=' to the UART
                1548     ;
2DB 08393       1549     send_address:           CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
2DC 00F61       1550                             LOAD            uart_data, #character_a
2DD 08331       1551                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2DE 00F64       1552                             LOAD            uart_data, #character_d
2DF 08331       1553                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2E0 08331       1554                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2E1 00F72       1555                             LOAD            uart_data, #character_r
2E2 08331       1556                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2E3 00F65       1557                             LOAD            uart_data, #character_e
2E4 08331       1558                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2E5 00F73       1559                             LOAD            uart_data, #character_s
2E6 08331       1560                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2E7 08331       1561                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2E8 00F3D       1562     send_equals:            LOAD            uart_data, #character_equals
2E9 08331       1563                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2EA 08080       1564                             RETURN
                1565     ;
                1566     ;
                1567     ;Send 'data=' to the UART
                1568     ;
2EB 08393       1569     send_data:              CALL            send_cr
W: value out of range: 0x193, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x93.
2EC 00F64       1570                             LOAD            uart_data, #character_d
2ED 08331       1571                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2EE 00F61       1572                             LOAD            uart_data, #character_a
2EF 08331       1573                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2F0 00F74       1574                             LOAD            uart_data, #character_t
2F1 08331       1575                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2F2 00F61       1576                             LOAD            uart_data, #character_a
2F3 08331       1577                             CALL            send_to_uart
W: value out of range: 0x131, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x31.
2F4 0810B       1578                             JUMP            send_equals
W: value out of range: 0x30b, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb.
                1579     ;
                1580     ;
                1581     ;**************************************************************************************
                1582     ;Interrupt Service Routine (ISR)
                1583     ;**************************************************************************************
                1584     ;
                1585     ;An interrupt occurs whenever the status of the UART receiver FIFO 'half_full' flag
                1586     ;changes.
                1587     ;
                1588     ;A change from Low to High means that the buffer is becoming full and therefore
                1589     ;an XOFF character must be transmitted.
                1590     ;
                1591     ;A change from High to Low means that the buffer is starting to empty and therefore
                1592     ;an XON character can be transmitted to restart the flow of new characters.
                1593     ;
                1594     ;
  003F5         1595                             ORG             0x3f5                   ;place at end of memory to keep separate
  003F5         1596     isr:                    STORE           s0, isr_preserve_s0     ;preserve register contents
E: instruction not supported on the this device: STORE sX, ss.
3F5 0A000       1597                             INPUT           s0, status_port         ;test 'half_full' status of receiver buffer.
                1598                             TEST            s0, #rx_half_full
E: instruction not supported on the this device: TEST sX, kk.
3F6 091FB       1599                             JUMP            z, isr_send_xon
W: value out of range: 0x3fb, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xfb.
3F7 00013       1600                             LOAD            s0, #character_xoff
3F8 081FC       1601                             JUMP            isr_send_character
W: value out of range: 0x3fc, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xfc.
3F9 00011       1602     isr_send_xon:           LOAD            s0, #character_xon
3FA 0E004       1603     isr_send_character:     OUTPUT          s0, uart_write_port
                1604                             FETCH           s0, isr_preserve_s0     ;restore register contents
E: instruction not supported on the this device: FETCH sX, ss.
3FB 080F0       1605                             RETURNI         enable
                1606     ;
                1607     ;
                1608     ;**************************************************************************************
                1609     ;Interrupt Vector
                1610     ;**************************************************************************************
                1611     ;
  003FF         1612                             ORG             0x3ff
3FF 081F5       1613                             JUMP            isr
W: value out of range: 0x3f5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xf5.
                1614     ;
                1615     ;
                1616
