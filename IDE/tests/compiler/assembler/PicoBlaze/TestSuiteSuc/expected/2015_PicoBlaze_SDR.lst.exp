                   1     device kcpsm2
                   2     ;
                   3     ; PicoBlaze kód pro počáteční inicializaci A/D převodníku ADS6445 a zdroje hodin LMK4011
                   4
                   5     ; A/D převodník - 16bit registry
                   6     ;				  Max 20 MHz
                   7     ;				  A4-A0 + D10-D0	
                   8     ;
                   9     ; LMK4011 -		  32bit registry
                  10     ; 				  Max 20 MHz
                  11     ;				  D27-D0 + A3-A0
                  12     ;
                  13     ; Martin Madron 30.4.2013
                  14     ;
                  15     ;
                  16
                  17     ; Start
                  18     ;##############################################################################;
                  19     ; Přiřazení jmen registrům
  00000           20     	NAMEREG		s0,temp1              ; temporary EQU register
  00001           21     	NAMEREG		s1,temp2              ; temporary EQU register
  00002           22     	NAMEREG		s2,temp3              ; temporary EQU register
  00003           23     	NAMEREG		s3,RXEQU             ; temporary EQU register
  00004           24     	NAMEREG		s4,TXEQU             ; temporary EQU register
                  25
                  26     ; PORT_IDs
  00001           27     	CONSTANT	TX_EQU_01, 01          ;  EQU register port ID
  00002           28     	CONSTANT	TX_EQU_02, 02          ;  EQU register port ID
  00004           29     	CONSTANT	TX_EQU_03, 04          ;  EQU register port ID
  00008           30     	CONSTANT	TX_EQU_04, 08          ;  EQU register port ID
  0000C           31     	CONSTANT	Read_EQU, 12           ;  EQU register port ID
                  32
  00004           33     CHREG                   equ             4
  00004           34     SWITCH                   equ             4
  00004           35     UART_STAT                   equ             4
  00004           36     UART_EQU                   equ             4
                  37
                  38     	
                  39     ; Inicializace
                  40     ;##############################################################################;
  00000           41     	ADDRESS	000
000 34001         42     	JUMP	Start
                  43     ; Čekání 1s pro inicializaci obvodů
001 3602B         44     Start:              CALL      wait_1s             ; wait for 1s
                  45     ; end of initialization
                  46
                  47     ;  Main
002 3600D         48     main_loop:          CALL      GetChar             ; get (wait for) new character
003 00414         49                         load      chreg,#20           ; Space character received?
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
004 35402         50                         JUMP      NZ,main_loop        ; If not space, get another character
005 20404         51                         IN        chreg,Switch        ; If yes, read content of switches
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
006 36008         52                         CALL      SendChar            ; And send it via UART
007 34002         53                         JUMP      main_loop
                  54
                  55     ;##############################################################################;
                  56     ;  General purpose procedures
                  57     ;##############################################################################;
                  58
                  59     ; Basic UART text output procedures (CALLs)
                  60
                  61     ;==============================================================================;
                  62     ; Send character loadd in chreg via UART
                  63     ; Registers used: Temp1, chreg
                  64     ;==============================================================================;
008 20004         65     SendChar:           IN        Temp1, UART_stat    ; checking UART status
009 10020         66                         load      Temp1, 4            ; load bit 2 (is Tx ready?)
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00A 35008         67                         JUMP      Z, SendChar         ; wait until Tx is ready
00B 22404         68                         OUT       chreg, UART_EQU    ; Send the character
W: instruction `OUTPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
00C 24000         69                         RET                           ; Return from procedure
                  70
                  71     ;==============================================================================;
                  72     ; Reads a single character from UART (waits on receive when none is prepared)
                  73     ; Registers used: Temp1, chreg
                  74     ;==============================================================================;
00D 20004         75     GetChar:            IN        Temp1, UART_stat    ; checking UART status
00E 10040         76                         load      Temp1, 8            ; load bit 3 (new Rx EQU?)
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00F 3500D         77                         JUMP      Z, GetChar          ; wait for new Rx EQU
010 20404         78                         IN        chreg, UART_EQU    ; Read the character
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
011 24000         79                         RET                           ; Return from procedure
                  80
                  81     ;==============================================================================;
                  82     ; Procedure for sending content of "chreg" register in hexadecimal ASCII format
                  83     ;   (two characters, one for each nibble)
                  84     ; Reister used: Temp1, Temp2, chreg
                  85     ; Procedures used: SendChar
                  86     ;==============================================================================;
012 10120         87     SendByte:           LOAD      Temp2, chreg        ; make a backup of chreg
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
013 2840E         88                         SR0       chreg               ; move upper nibble to lower nibble
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
014 2840E         89                         SR0       chreg
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
015 2840E         90                         SR0       chreg
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
016 2840E         91                         SR0       chreg
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
017 10450         92                         load      chreg, 10           ; if not greater than 9, than it is a number
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
018 3581B         93                         JUMP      C, SendBNum1        ; C is set when Temp < 10 (Temp-10)
019 08425         94                         ADD       chreg, #37          ; when letter, add #37; letter conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01A 3401C         95                         JUMP      SendB1
01B 0841E         96     SendBNum1:          ADD       chreg, #30          ; when number, add #30; number conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01C 36008         97     SendB1:             CALL      SendChar            ; Send Character
                  98
01D 10408         99                         LOAD      chreg, Temp2        ; load the whole byte again
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01E 0240F        100                         AND       chreg, #0Fh          ; select second character
W: instruction `AND sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01F 10450        101                         load      chreg, 10           ; if not greater than 9, than number
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
020 35823        102                         JUMP      C, SendBNum2        ; C is set when Temp < 10 (Temp-10 under 0)
021 08425        103                         ADD       chreg, #37          ; when letter, add #37; letter conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
022 34024        104                         JUMP      SendB2
023 0841E        105     SendBNum2:          ADD       chreg, #30          ; when number, add #30; number conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
024 36008        106     SendB2:             CALL      SendChar            ; Send character
025 24000        107                         RET
                 108
                 109     ;==============================================================================;
                 110     ; Send 0D and 0A character pair via UART
                 111     ; Registers used: Temp1, chreg
                 112     ; Procedures used: SendChar
                 113     ;==============================================================================;
026 00400        114     SendCRLF:           LOAD      chreg, #0D          ; CR character
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
027 36008        115                         CALL      SendChar            ; Send character
028 0040A        116                         LOAD      chreg, #0Ah          ; Load LF character
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
029 36008        117                         CALL      SendChar            ; Send character
02A 24000        118                         RET                           ; Return from procedure
                 119
                 120     ;==============================================================================;
                 121     ; Procedures for waiting for specified time
                 122     ; Duration is set in registers Temp1, Temp2 and Temp3
                 123     ;
                 124     ;   clock           instruction execution time
                 125     ;   10.00 MHz              200.00 ns
                 126     ;   19.44 MHz              102.88 ns
                 127     ;   38.88 MHz               51.44 ns
                 128     ;   50.00 MHz               40.00 ns
                 129     ;  100.00 MHz               20.00 ns
                 130     ;
                 131     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                 132     ;   1s # (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                 133     ;
                 134     ; ČEKACÍ SMYČKY
                 135     ;==============================================================================;
02B 100D0        136     wait_1s:            LOAD      Temp1, 250          ; Load Temp1 register
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xfa, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x1a.
02C 101C8        137                         LOAD      Temp2, 249          ; Load Temp2 register
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xf9, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x19.
02D 10240        138                         LOAD      Temp3, 200          ; Load Temp3 register
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xc8, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x8.
02E 1C008        139     wait_1s_i:          SUB       Temp1, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
02F 3542E        140                         JUMP      NZ, wait_1s_i
030 1C108        141                         SUB       Temp2, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
031 3542E        142                         JUMP      NZ, wait_1s_i
032 1C208        143                         SUB       Temp3, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
033 3542E        144                         JUMP      NZ, wait_1s_i
034 24000        145                         RET
                 146
035 100D0        147     wait_100ms:         LOAD      Temp1, 250          ; Load Temp1 register
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xfa, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x1a.
036 101C8        148                         LOAD      Temp2, 249          ; Load Temp2 register
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xf9, allowed range is [0x0,0x1f] (trimmed to 5 bits) which makes it 0x19.
037 102A0        149                         LOAD      Temp3, 20           ; Load Temp3 register
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
038 1C008        150     wait_100ms_i:       SUB       Temp1, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
039 35438        151                         JUMP      NZ, wait_100ms_i
03A 1C108        152                         SUB       Temp2, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
03B 35438        153                         JUMP      NZ, wait_100ms_i
03C 1C208        154                         SUB       Temp3, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
03D 35438        155                         JUMP      NZ, wait_100ms_i
03E 24000        156                         RET
                 157
                 158     ;##############################################################################;
