                   1     ;##############################################################################;
                   2     ; Description of code
                   3     ;##############################################################################;
                   4     ;
                   5     ; Tutorial code for MPLD 2010/11
                   6     ; Michal Kubicek 17.4.2011
                   7     device kcpsm6
                   8     ;
                   9     ;##############################################################################;
                  10     ; Start of code
                  11     ;##############################################################################;
                  12     ; Register name assignment
  00000           13     temp1               EQU       s0                  ; temporary data register
  00001           14     temp2               EQU       s1                  ; temporary data register
  00002           15     temp3               EQU       s2                  ; temporary data register
  00003           16     chreg               EQU       s3                  ; character register
  00004           17     RxDat               EQU       s4                  ; received character register
  00005           18     addr                EQU       s5                  ; address register
                  19
                  20     ; Peripherals
  00001           21     UART_data           EQU        01h                 ; UART data register port ID
  00002           22     UART_stat           EQU        02h                 ; UART control register port ID
                  23     ; UART Status register:
                  24     ;  [2] Tx ready
                  25     ;  [3] new Rx data
                  26     ;  [4] Rx buffer overflow
                  27
  00004           28     BCD_01              EQU        04h                 ; 7 segment, upper two segments
  00008           29     BCD_23              EQU        08h                 ; 7 segment, lower two segments
  00010           30     LED                 EQU        10h                 ; LEDs
  00020           31     Switch              EQU        20h                 ; Switches
  00040           32     Button              EQU        40h                 ; Buttons (3:0)
                  33
                  34     ;##############################################################################;
                  35
                  36
                  37     ;##############################################################################;
                  38     ; Initialization
                  39     ;##############################################################################;
                  40
                  41     ; initial wait
000 2002C         42     Start:              CALL      wait_1s             ; wait for peripheral startup
001 01000         43     	                LOAD      Temp1,#00           ; LEDs OFF at startup
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
002 2D010         44     	                OUT       Temp1,LED           ; write valu to LED register
W: instruction `OUTPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
                  45
                  46     ; end of initialization
                  47
                  48     ;##############################################################################;
                  49     ;  Main loop
                  50     ;##############################################################################;
003 2000E         51     main_loop:          CALL      GetChar             ; get (wait for) new character
004 2D304         52                         OUT       chreg,BCD_01        ; Store value on 7-segment
W: instruction `OUTPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
005 10310         53                         ADD       chreg,1             ; Increment chreg
W: instruction `ADD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `ADD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
006 2D308         54                         OUT       chreg,BCD_23        ; Store new value on 7-segment
W: instruction `OUTPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
007 20009         55                         CALL      SendChar            ; And send it via UART
008 22003         56                         JUMP      main_loop
                  57
                  58     ;##############################################################################;
                  59     ;  General purpose procedures
                  60     ;##############################################################################;
                  61
                  62     ; Basic UART text output procedures (CALLs)
                  63
                  64     ;==============================================================================;
                  65     ; Send character stored in chreg via UART
                  66     ; Registers used: Temp1, chreg
                  67     ;==============================================================================;
009 09002         68     SendChar:           IN        Temp1, UART_stat    ; checking UART status
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
00A 0C040         69                         TEST      Temp1, 4            ; test bit 2 (is Tx ready?)
W: instruction `TEST sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `TEST sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00B 32009         70                         JUMP      Z, SendChar         ; wait until Tx is ready
00C 2D301         71                         OUT       chreg, UART_data    ; Send the character
W: instruction `OUTPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
00D 25000         72                         RET                           ; Return from procedure
                  73
                  74     ;==============================================================================;
                  75     ; Reads a single character from UART (waits on receive when none is prepared)
                  76     ; Registers used: Temp1, chreg
                  77     ;==============================================================================;
00E 09002         78     GetChar:            IN        Temp1, UART_stat    ; checking UART status
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
00F 0C080         79                         TEST      Temp1, 8            ; test bit 3 (new Rx data?)
W: instruction `TEST sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `TEST sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
010 3200E         80                         JUMP      Z, GetChar          ; wait for new Rx data
011 09301         81                         IN        chreg, UART_data    ; Read the character
W: instruction `INPUT sX, pp' requires operand #1 to be of type(s): register; while the given operand is of type: number.
012 25000         82                         RET                           ; Return from procedure
                  83
                  84     ;==============================================================================;
                  85     ; Procedure for sending content of "chreg" register in hexadecimal ASCII format
                  86     ;   (two characters, one for each nibble)
                  87     ; Reister used: Temp1, Temp2, chreg
                  88     ; Procedures used: SendChar
                  89     ;==============================================================================;
013 00130         90     SendByte:           LOAD      Temp2, chreg        ; make a backup of chreg
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
014 1430E         91                         SR0       chreg               ; move upper nibble to lower nibble
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
015 1430E         92                         SR0       chreg
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
016 1430E         93                         SR0       chreg
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
017 1430E         94                         SR0       chreg
W: instruction `SR0 sX' requires operand #1 to be of type(s): register; while the given operand is of type: number.
018 1C3A0         95                         CMP      chreg, 10           ; if not greater than 9, than it is a number
W: instruction `COMPARE sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `COMPARE sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
019 3A01C         96                         JUMP      C, SendBNum1        ; C is set when Temp < 10 (Temp-10)
01A 11325         97                         ADD       chreg, #37          ; when letter, add #37; letter conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01B 2201D         98                         JUMP      SendB1
01C 1131E         99     SendBNum1:          ADD       chreg, #30          ; when number, add #30; number conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
01D 20009        100     SendB1:             CALL      SendChar            ; Send Character
                 101
01E 00310        102                         LOAD      chreg, Temp2        ; load the whole byte again
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
01F 0330F        103                         AND       chreg, #0Fh          ; select second character
W: instruction `AND sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
020 1C3A0        104                         CMP      chreg, 10           ; if not greater than 9, than number
W: instruction `COMPARE sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `COMPARE sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
021 3A024        105                         JUMP      C, SendBNum2        ; C is set when Temp < 10 (Temp-10 under 0)
022 11325        106                         ADD       chreg, #37          ; when letter, add #37; letter conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
023 22025        107                         JUMP      SendB2
024 1131E        108     SendBNum2:          ADD       chreg, #30          ; when number, add #30; number conversion
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
025 20009        109     SendB2:             CALL      SendChar            ; Send character
026 25000        110                         RET
                 111
                 112     ;==============================================================================;
                 113     ; Send 0D and 0A character pair via UART
                 114     ; Registers used: Temp1, chreg
                 115     ; Procedures used: SendChar
                 116     ;==============================================================================;
027 01300        117     SendCRLF:           LOAD      chreg, #0D          ; CR character
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
028 20009        118                         CALL      SendChar            ; Send character
029 0130A        119                         LOAD      chreg, #0Ah          ; Load LF character
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
02A 20009        120                         CALL      SendChar            ; Send character
02B 25000        121                         RET                           ; Return from procedure
                 122
                 123     ;==============================================================================;
                 124     ; Procedures for waiting for specified time
                 125     ; Duration is set in registers Temp1, Temp2 and Temp3
                 126     ;
                 127     ;   clock           instruction execution time
                 128     ;   10.00 MHz              200.00 ns
                 129     ;   19.44 MHz              102.88 ns
                 130     ;   38.88 MHz               51.44 ns
                 131     ;   50.00 MHz               40.00 ns
                 132     ;  100.00 MHz               20.00 ns
                 133     ;
                 134     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                 135     ;   1s @ (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                 136     ;==============================================================================;
02C 000A0        137     wait_1s:            LOAD      Temp1, 250          ; Load Temp1 register
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xfa, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
02D 00190        138                         LOAD      Temp2, 249          ; Load Temp2 register
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xf9, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
02E 00280        139                         LOAD      Temp3, 200          ; Load Temp3 register
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xc8, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
02F 18010        140     wait_1s_i:          SUB       Temp1, 1
W: instruction `SUB sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
030 3602F        141                         JUMP      NZ, wait_1s_i
031 18110        142                         SUB       Temp2, 1
W: instruction `SUB sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
032 3602F        143                         JUMP      NZ, wait_1s_i
033 18210        144                         SUB       Temp3, 1
W: instruction `SUB sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
034 3602F        145                         JUMP      NZ, wait_1s_i
035 25000        146                         RET
                 147
036 000A0        148     wait_100ms:         LOAD      Temp1, 250          ; Load Temp1 register
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xfa, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
037 00190        149                         LOAD      Temp2, 249          ; Load Temp2 register
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0xf9, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
038 00240        150                         LOAD      Temp3, 20           ; Load Temp3 register
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
039 18010        151     wait_100ms_i:       SUB       Temp1, 1
W: instruction `SUB sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
03A 36039        152                         JUMP      NZ, wait_100ms_i
03B 18110        153                         SUB       Temp2, 1
W: instruction `SUB sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
03C 36039        154                         JUMP      NZ, wait_100ms_i
03D 18210        155                         SUB       Temp3, 1
W: instruction `SUB sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
03E 36039        156                         JUMP      NZ, wait_100ms_i
03F 25000        157                         RET
                 158
                 159     ;##############################################################################;
                 160
