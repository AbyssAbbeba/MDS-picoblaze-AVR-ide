                   1     ;KCPSM3 Program - FC_CTRL
                   2     ;Frequency Generator Control
                   3     ;Calculates and displays results on the 16x2 LCD display.
                   4     device kcpsm1
                   5     ;
                   6     ; Version : 1.12
                   7     ; Date : 28th February 2006
                   8     ;
                   9     ; Ken Chapman
                  10     ; Xilinx Ltd
                  11     ;
                  12     ; chapman@xilinx.com
                  13     ;
                  14     ;
                  15     ;
                  16     ;**************************************************************************************
                  17     ;Port definitions
                  18     ;**************************************************************************************
                  19     ;
  00000           20     a_count0_port           EQU             0x00                    ;32-bit A-counter (LSByte first)
  00010           21     a_count1_port           EQU             0x10
  00020           22     a_count2_port           EQU             0x20
  00030           23     a_count3_port           EQU             0x30
                  24     ;
  00040           25     b_count0_port           EQU             0x40                    ;32-bit B-counter (LSByte first)
  00050           26     b_count1_port           EQU             0x50
  00060           27     b_count2_port           EQU             0x60
  00070           28     b_count3_port           EQU             0x70
                  29     ;
  00080           30     status_port             EQU             0x80                    ;4 switches and counter status
  00001           31     switch0                 EQU             0x01                    ;  Switches      SW0 - bit0
  00002           32     switch1                 EQU             0x02                    ; active High    SW1 - bit1
  00004           33     switch2                 EQU             0x04                    ;                SW2 - bit2
  00008           34     switch3                 EQU             0x08                    ;                SW3 - bit3
  00010           35     ab_switch               EQU             0x10                    ;  0=A-count enabled 1=B-count enabled
                  36     ;
                  37     ;
  00002           38     count_resetport         EQU             0x02                    ;Reset frequency counter controls
  00001           39     a_count_reset           EQU             0x01                    ;  A-count = bit0
  00002           40     b_count_reset           EQU             0x02                    ;  B-count = bit1
                  41     ;
  00001           42     led_port                EQU             0x01                    ;8 simple LEDs - active high
                  43     ;
                  44     ;
  00008           45     source_control_port     EQU             0x08                    ;Select and control test sources
  00001           46     source_sel0             EQU             0x01                    ;  00 = SMA clock  01=50MHz
  00002           47     source_sel1             EQU             0x02                    ;  10 = DCM Osc    11=Ring Osc
  00040           48     ring_reset              EQU             0x40                    ; active High rest of ring osc - bit6
  00080           49     dcm_kick                EQU             0x80                    ; DCM kick start signal - bit7
                  50     ;
                  51     ;
                  52     ;LCD interface ports
                  53     ;
                  54     ;The master enable signal is not used by the LCD display itself
                  55     ;but may be required to confirm that LCD communication is active.
                  56     ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  57     ;is used because it shares the same data pins and conflicts must be avoided.
                  58     ;
  00004           59     lcd_output_port         EQU             0x04                    ;LCD character module output data and control
  00001           60     lcd_e                   EQU             0x01                    ;   active High Enable        E - bit0
  00002           61     lcd_rw                  EQU             0x02                    ;   Read=1 Write=0           RW - bit1
  00004           62     lcd_rs                  EQU             0x04                    ;   Instruction=0 Data=1     RS - bit2
  00008           63     lcd_drive               EQU             0x08                    ;   Master enable (active High) - bit3
  00010           64     lcd_db4                 EQU             0x10                    ;   4-bit              Data DB4 - bit4
  00020           65     lcd_db5                 EQU             0x20                    ;   interface          Data DB5 - bit5
  00040           66     lcd_db6                 EQU             0x40                    ;                      Data DB6 - bit6
  00080           67     lcd_db7                 EQU             0x80                    ;                      Data DB7 - bit7
                  68     ;
                  69     ;
  00009           70     lcd_input_port          EQU             0x09                    ;LCD character module input data
  00001           71     lcd_read_spare0         EQU             0x01                    ;    Spare bits               - bit0
  00002           72     lcd_read_spare1         EQU             0x02                    ;    are zero                 - bit1
  00004           73     lcd_read_spare2         EQU             0x04                    ;                             - bit2
  00008           74     lcd_read_spare3         EQU             0x08                    ;                             - bit3
  00010           75     lcd_read_db4            EQU             0x10                    ;    4-bit           Data DB4 - bit4
  00020           76     lcd_read_db5            EQU             0x20                    ;    interface       Data DB5 - bit5
  00040           77     lcd_read_db6            EQU             0x40                    ;                    Data DB6 - bit6
  00080           78     lcd_read_db7            EQU             0x80                    ;                    Data DB7 - bit7
                  79     ;
                  80     ;
                  81     ;
                  82     ;Special Register usage
                  83     ;
                  84     ;
                  85     ;
                  86     ;**************************************************************************************
                  87     ;Scratch Pad Memory Locations
                  88     ;**************************************************************************************
                  89     ;
                  90     ;
  00000           91     count0                  EQU             0x00                    ;last 32-bit counter value (LSByte first)
  00001           92     count1                  EQU             0x01
  00002           93     count2                  EQU             0x02
  00003           94     count3                  EQU             0x03
                  95     ;
  00004           96     isr_count               EQU             0x04                    ;count number of interrupts for a clean start
                  97     ;
  00011           98     decimal0                EQU             0x11                    ;10 digit decimal value up to 4,294,967,295
  00012           99     decimal1                EQU             0x12
  00013          100     decimal2                EQU             0x13
  00014          101     decimal3                EQU             0x14
  00015          102     decimal4                EQU             0x15
  00016          103     decimal5                EQU             0x16
  00017          104     decimal6                EQU             0x17
  00018          105     decimal7                EQU             0x18
  00019          106     decimal8                EQU             0x19
  0001A          107     decimal9                EQU             0x1a
                 108     ;
                 109     ;
                 110     ;
  00030          111     preserve_s0             EQU             0x30                    ;place to save register contents
  00031          112     preserve_s1             EQU             0x31
  00032          113     preserve_s2             EQU             0x32
  00033          114     preserve_s3             EQU             0x33
  00034          115     preserve_s4             EQU             0x34
  00035          116     preserve_s5             EQU             0x35
  00036          117     preserve_s6             EQU             0x36
  00037          118     preserve_s7             EQU             0x37
  00038          119     preserve_s8             EQU             0x38
  00039          120     preserve_s9             EQU             0x39
  0003A          121     preserve_sa             EQU             0x3a
  0003B          122     preserve_sb             EQU             0x3b
  0003C          123     preserve_sc             EQU             0x3c
  0003D          124     preserve_sd             EQU             0x3d
  0003E          125     preserve_se             EQU             0x3e
  0003F          126     preserve_sf             EQU             0x3f
                 127     ;
                 128     ;
                 129     ;
                 130     ;**************************************************************************************
                 131     ;Useful data constants
                 132     ;**************************************************************************************
                 133     ;
                 134     ;
                 135     ;
                 136     ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                 137     ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                 138     ;calculation highly predictable. The '6' in the following equation even allows for
                 139     ;'CALL delay_1us' instruction in the initiating code.
                 140     ;
                 141     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 142     ;
                 143     ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 144     ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 145     ;become lower than intended.
                 146     ;
  0000B          147     delay_1us_constant      EQU             0x0b
                 148     ;
                 149     ;
                 150     ;
                 151     ;ASCII table
                 152     ;
  00061          153     character_a             EQU             0x61
  00062          154     character_b             EQU             0x62
  00063          155     character_c             EQU             0x63
  00064          156     character_d             EQU             0x64
  00065          157     character_e             EQU             0x65
  00066          158     character_f             EQU             0x66
  00067          159     character_g             EQU             0x67
  00068          160     character_h             EQU             0x68
  00069          161     character_i             EQU             0x69
  0006A          162     character_j             EQU             0x6a
  0006B          163     character_k             EQU             0x6b
  0006C          164     character_l             EQU             0x6c
  0006D          165     character_m             EQU             0x6d
  0006E          166     character_n             EQU             0x6e
  0006F          167     character_o             EQU             0x6f
  00070          168     character_p             EQU             0x70
  00071          169     character_q             EQU             0x71
  00072          170     character_r             EQU             0x72
  00073          171     character_s             EQU             0x73
  00074          172     character_t             EQU             0x74
  00075          173     character_u             EQU             0x75
  00076          174     character_v             EQU             0x76
  00077          175     character_w             EQU             0x77
  00078          176     character_x             EQU             0x78
  00079          177     character_y             EQU             0x79
  0007A          178     character_z             EQU             0x7a
  00041          179     _character_a            EQU             0x41
  00042          180     _character_b            EQU             0x42
  00043          181     _character_c            EQU             0x43
  00044          182     _character_d            EQU             0x44
  00045          183     _character_e            EQU             0x45
  00046          184     _character_f            EQU             0x46
  00047          185     _character_g            EQU             0x47
  00048          186     _character_h            EQU             0x48
  00049          187     _character_i            EQU             0x49
  0004A          188     _character_j            EQU             0x4a
  0004B          189     _character_k            EQU             0x4b
  0004C          190     _character_l            EQU             0x4c
  0004D          191     _character_m            EQU             0x4d
  0004E          192     _character_n            EQU             0x4e
  0004F          193     _character_o            EQU             0x4f
  00050          194     _character_p            EQU             0x50
  00051          195     _character_q            EQU             0x51
  00052          196     _character_r            EQU             0x52
  00053          197     _character_s            EQU             0x53
  00054          198     _character_t            EQU             0x54
  00055          199     _character_u            EQU             0x55
  00056          200     _character_v            EQU             0x56
  00057          201     _character_w            EQU             0x57
  00058          202     _character_x            EQU             0x58
  00059          203     _character_y            EQU             0x59
  0005A          204     _character_z            EQU             0x5a
  00030          205     character_0             EQU             0x30
  00031          206     character_1             EQU             0x31
  00032          207     character_2             EQU             0x32
  00033          208     character_3             EQU             0x33
  00034          209     character_4             EQU             0x34
  00035          210     character_5             EQU             0x35
  00036          211     character_6             EQU             0x36
  00037          212     character_7             EQU             0x37
  00038          213     character_8             EQU             0x38
  00039          214     character_9             EQU             0x39
  0003A          215     character_colon         EQU             0x3a
  0002E          216     character_stop          EQU             0x2e
  0003B          217     character_semi_colon    EQU             0x3b
  0002D          218     character_minus         EQU             0x2d
  0002F          219     character_divide        EQU             0x2f                    ;'/'
  0002B          220     character_plus          EQU             0x2b
  0002C          221     character_comma         EQU             0x2c
  0003C          222     character_less_than     EQU             0x3c
  0003E          223     character_greater_than  EQU             0x3e
  0003D          224     character_equals        EQU             0x3d
  00020          225     character_space         EQU             0x20
  0000D          226     character_cr            EQU             0x0d                    ;carriage return
  0003F          227     character_question      EQU             0x3f                    ;'?'
  00024          228     character_dollar        EQU             0x24
  00021          229     character_exclaim       EQU             0x21                    ;'!'
  00008          230     character_bs            EQU             0x08                    ;Back Space command character
                 231     ;
                 232     ;
                 233     ;
                 234     ;
                 235     ;
                 236     ;**************************************************************************************
                 237     ;Initialise the system
                 238     ;**************************************************************************************
                 239     ;
000 083FD        240     cold_start:             CALL            lcd_reset               ;initialise LCD display
W: value out of range: 0x1fd, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xfd.
001 00000        241                             LOAD            s0, #0x00               ;Turn off LEDs
002 0E001        242                             OUTPUT          s0, led_port
                 243     ;
                 244     ;
                 245     ;Write welcome message to LCD display
                 246     ;
003 00510        247                             LOAD            s5, #0x10               ;Line 1 position 0
004 08313        248                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
005 083C0        249                             CALL            disp_picoblaze          ;Display 'PicoBlaze Inside'
006 083B5        250                             CALL            delay_1s                ;wait 3 seconds
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
007 083B5        251                             CALL            delay_1s
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
008 083B5        252                             CALL            delay_1s
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
009 00510        253                             LOAD            s5, #0x10               ;Line 1 position 0
00A 08313        254                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
00B 083D3        255                             CALL            disp_frequency          ;Display 'Frequency Counter V1.00'
00C 00521        256                             LOAD            s5, #0x21               ;Line 2 position 1
00D 08313        257                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
00E 083E6        258                             CALL            disp_counter
00F 0052B        259                             LOAD            s5, #0x2b               ;Line 2 position 11
010 08313        260                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
011 083F5        261                             CALL            disp_version
012 083B5        262                             CALL            delay_1s                ;wait 5 seconds
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
013 083B5        263                             CALL            delay_1s
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
014 083B5        264                             CALL            delay_1s
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
015 083B5        265                             CALL            delay_1s
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
016 083B5        266                             CALL            delay_1s
W: value out of range: 0x1b5, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb5.
017 0830E        267                             CALL            lcd_clear               ;Clear display
W: value out of range: 0x20e, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xe.
                 268     ;
                 269     ;Kick start the DCM oscillator.
                 270     ; Just requires a few cyles of activity
                 271     ;
018 000FF        272                             LOAD            s0, #0xff
019 00100        273                             LOAD            s1, #0x00
01A 0E108        274     kick_loop:              OUTPUT          s1, source_control_port
01B 03180        275                             XOR             s1, #dcm_kick           ;toggle kick start signal
01C 06001        276                             SUB             s0, #0x01
01D 0951A        277                             JUMP            nz, kick_loop
                 278     ;
                 279     ;clear all scratch pad memory locations
                 280     ;
01E 0013F        281                             LOAD            s1, #0x3f
01F 00000        282                             LOAD            s0, #0x00
  00020          283     clear_spm:              STORE           s0, @s1
E: instruction not supported on the this device: STORE sX, sY.
020 06101        284                             SUB             s1, #0x01
021 09D20        285                             JUMP            nc, clear_spm
                 286     ;
022 08030        287                             ENABLE          interrupt
                 288     ;
                 289     ;**************************************************************************************
                 290     ;Main Program
                 291     ;**************************************************************************************
                 292     ;
                 293     ;The task of the main program is just to read the most recent values from
                 294     ;scratch pad memory and display them as fast as it can.
                 295     ;
                 296     ;It also reads the slide switches controls the selection of the source frequency to
                 297     ;be measured.
                 298     ;
023 00521        299     warm_start:             LOAD            s5, #0x21               ;Line 2 position 1
024 08313        300                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
025 0AF80        301                             INPUT           sf, status_port         ;select source based on switches
                 302                             COMPARE         sf, #0x00               ;test for no switches active
E: instruction not supported on the this device: COMPARE sX, kk.
026 01F0F        303                             AND             sf, #0x0f               ;isolate switches
027 0952C        304                             JUMP            nz, test_sma
028 0835D        305                             CALL            disp_menu
W: value out of range: 0x15d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x5d.
029 08124        306                             JUMP            warm_start
  0002C          307     test_sma:               COMPARE         sf, #switch0
E: instruction not supported on the this device: COMPARE sX, kk.
02A 09531        308                             JUMP            nz, test_50m
02B 08300        309                             CALL            disp_sma_input
W: value out of range: 0x100, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x0.
02C 00F00        310                             LOAD            sf, #0x00
02D 08141        311                             JUMP            select_source
  00031          312     test_50m:               COMPARE         sf, #switch1
E: instruction not supported on the this device: COMPARE sX, kk.
02E 09536        313                             JUMP            nz, test_dcm
02F 08314        314                             CALL            disp_50mhz_crystal
W: value out of range: 0x114, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x14.
030 00F01        315                             LOAD            sf, #0x01
031 08141        316                             JUMP            select_source
  00036          317     test_dcm:               COMPARE         sf, #switch2
E: instruction not supported on the this device: COMPARE sX, kk.
032 0953B        318                             JUMP            nz, test_ring
033 08330        319                             CALL            disp_dcm_oscillator
W: value out of range: 0x130, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x30.
034 00F02        320                             LOAD            sf, #0x02
035 08141        321                             JUMP            select_source
  0003B          322     test_ring:              COMPARE         sf, #switch3
E: instruction not supported on the this device: COMPARE sX, kk.
036 0913F        323                             JUMP            z, ring_select
037 0835D        324                             CALL            disp_menu               ;more than one switch is set
W: value out of range: 0x15d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x5d.
038 08124        325                             JUMP            warm_start
039 0834E        326     ring_select:            CALL            disp_ring_oscillator
W: value out of range: 0x14e, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x4e.
03A 00F03        327                             LOAD            sf, #0x03
03B 0EF08        328     select_source:          OUTPUT          sf, source_control_port ;select source control
                 329     ;
                 330     ;Read the most recent values from display on LCD.
                 331     ;
                 332     ;Interrupts will be disabled during the reading of values to ensure a clean
                 333     ;value is obtained when reading multi-byte values.
                 334     ;
                 335     ;
                 336     ;Display the count value in the top right of the LCD display
                 337     ;Up to 999,999,999
                 338     ;
03C 08010        339                             DISABLE         interrupt               ;copy cycle count to register set [s5,s4,s3,s2]
                 340                             FETCH           s2, count0
E: instruction not supported on the this device: FETCH sX, ss.
                 341                             FETCH           s3, count1
E: instruction not supported on the this device: FETCH sX, ss.
                 342                             FETCH           s4, count2
E: instruction not supported on the this device: FETCH sX, ss.
                 343                             FETCH           s5, count3
E: instruction not supported on the this device: FETCH sX, ss.
03D 08030        344                             ENABLE          interrupt
03E 08394        345                             CALL            integer_to_bcd          ;convert last 32-bit value to BCD digits
03F 00510        346                             LOAD            s5, #0x10               ;Line 1 position 0
040 08313        347                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
041 00619        348                             LOAD            s6, #decimal8           ;up to 999,999,999 Hz
042 0834E        349                             CALL            disp_digits
043 08124        350                             JUMP            warm_start
                 351     ;
                 352     ;
                 353     ;
                 354     ;**************************************************************************************
                 355     ; Display frequency value on LCD display
                 356     ;**************************************************************************************
                 357     ;
                 358     ;
                 359     ;Display value on the LCD display at current position.
                 360     ;The values to be displayed must be stored in scratch pad memory
                 361     ;locations 'decimal0' to 'decimal9' which must be in ascending locations.
                 362     ;
                 363     ;The routing performs leading zero suppression and scales to Hz, KHz or MHz ranges.
                 364     ;
                 365     ;Registers used s0,s1,s4,s5,sE,sF
                 366     ;
044 00FFF        367     disp_digits:            LOAD            sf, #0xff               ;set blanking flag
045 00E20        368                             LOAD            se, #character_space    ;scaling character for MHz, KHz or Hz
                 369                             FETCH           s5, decimal8            ;100MHz digit
E: instruction not supported on the this device: FETCH sX, ss.
046 08388        370                             CALL            zero_test
047 0838C        371                             CALL            disp_digit
                 372                             FETCH           s5, decimal7            ;10MHz digit
E: instruction not supported on the this device: FETCH sX, ss.
048 08388        373                             CALL            zero_test
049 0838C        374                             CALL            disp_digit
                 375                             FETCH           s5, decimal6            ;1MHz digit
E: instruction not supported on the this device: FETCH sX, ss.
04A 08388        376                             CALL            zero_test
04B 0838C        377                             CALL            disp_digit
                 378                             COMPARE         sf, #0xff               ;check if any MHz were active
E: instruction not supported on the this device: COMPARE sX, kk.
04C 0915F        379                             JUMP            z, khz_space
04D 0052E        380                             LOAD            s5, #character_stop
04E 083D3        381                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
04F 00E4D        382                             LOAD            se, #_character_m
050 08161        383                             JUMP            khz_digits
051 00520        384     khz_space:              LOAD            s5, #character_space
052 083D3        385                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
  00061          386     khz_digits:             FETCH           s5, decimal5            ;100KHz digit
E: instruction not supported on the this device: FETCH sX, ss.
053 08388        387                             CALL            zero_test
054 0838C        388                             CALL            disp_digit
                 389                             FETCH           s5, decimal4            ;10KHz digit
E: instruction not supported on the this device: FETCH sX, ss.
055 08388        390                             CALL            zero_test
056 0838C        391                             CALL            disp_digit
                 392                             FETCH           s5, decimal3            ;1KHz digit
E: instruction not supported on the this device: FETCH sX, ss.
057 08388        393                             CALL            zero_test
058 0838C        394                             CALL            disp_digit
                 395                             COMPARE         se, #_character_m       ;check if any MHz were active
E: instruction not supported on the this device: COMPARE sX, kk.
059 09172        396                             JUMP            z, hz_space
                 397                             COMPARE         sf, #0xff               ;check if any KHz were active
E: instruction not supported on the this device: COMPARE sX, kk.
05A 09172        398                             JUMP            z, hz_space
05B 0052E        399                             LOAD            s5, #character_stop
05C 083D3        400                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
05D 00E4B        401                             LOAD            se, #_character_k
05E 08174        402                             JUMP            hz_digits
05F 00520        403     hz_space:               LOAD            s5, #character_space
060 083D3        404                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
  00074          405     hz_digits:              FETCH           s5, decimal2            ;100KHz digit
E: instruction not supported on the this device: FETCH sX, ss.
061 08388        406                             CALL            zero_test
062 0838C        407                             CALL            disp_digit
                 408                             FETCH           s5, decimal1            ;10KHz digit
E: instruction not supported on the this device: FETCH sX, ss.
063 08388        409                             CALL            zero_test
064 0838C        410                             CALL            disp_digit
                 411                             FETCH           s5, decimal0            ;1KHz digit (always displayed)
E: instruction not supported on the this device: FETCH sX, ss.
065 04530        412                             ADD             s5, #character_0        ;convert number to ASCII
066 083D3        413                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
067 00520        414                             LOAD            s5, #character_space
068 083D3        415                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
069 0C5E0        416                             LOAD            s5, se
06A 083D3        417                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
06B 00548        418                             LOAD            s5, #_character_h
06C 083D3        419                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
06D 0057A        420                             LOAD            s5, #character_z
06E 083D3        421                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
06F 00520        422                             LOAD            s5, #character_space    ;ensure end of line is clear
070 083D3        423                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
071 08080        424                             RETURN
                 425     ;
                 426     ;Check digit for zero. If not zero then clear
                 427     ;blanking flag (sF=00)
  00088          428     zero_test:              COMPARE         s5, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
072 09080        429                             RETURN          z
073 00F00        430                             LOAD            sf, #0x00
074 08080        431                             RETURN
                 432     ;
                 433     ;Display single digit at current position
                 434     ;or space if blanking (sF=FF) is active
                 435     ;
  0008C          436     disp_digit:             COMPARE         sf, #0xff
E: instruction not supported on the this device: COMPARE sX, kk.
075 09191        437                             JUMP            z, blank_digit
076 04530        438                             ADD             s5, #character_0        ;convert number to ASCII
077 083D3        439                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
078 08080        440                             RETURN
079 00520        441     blank_digit:            LOAD            s5, #character_space
07A 083D3        442                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
07B 08080        443                             RETURN
                 444     ;
                 445     ;
                 446     ;
                 447     ;**************************************************************************************
                 448     ; 32-bit integer to BCD conversion
                 449     ;**************************************************************************************
                 450     ;
                 451     ;Convert the 32 bit value in register set [s5,s4,s3,s2]
                 452     ;into the BCD decimal equivalent located in the scratch pad memory
                 453     ;locations 'decimal0' to 'decimal9' which must be in ascending locations.
                 454     ;
                 455     ;Each digit is formed in turn starting with the least significant.
                 456     ;
                 457     ;Registers used s0,s2,s3,s4,s5,s6,s7,s8,s9,sA,sB,sC,sD,sE,sF
                 458     ;
07C 00E0A        459     integer_to_bcd:         LOAD            se, #0x0a               ;10 digits to be formed from value upto 4294967295
07D 00F11        460                             LOAD            sf, #decimal0           ;pointer for LS-Digit
07E 0839C        461     int_to_bcd_loop:        CALL            divide_32bit_by_10
                 462                             STORE           s1, @sf                 ;remainder becomes digit value
E: instruction not supported on the this device: STORE sX, sY.
07F 04F01        463                             ADD             sf, #0x01               ;move to next most significant digit
080 06E01        464                             SUB             se, #0x01               ;one less digit to compute
081 09596        465                             JUMP            nz, int_to_bcd_loop
082 08080        466                             RETURN
                 467     ;
                 468     ;Divide 32-bit binary integer by 10
                 469     ;
                 470     ;The value to be divided is held in register set [s5,s4,s3,s2]
                 471     ;and this is where the result is returned to.
                 472     ;
                 473     ;At then end of the integer division the remainder in the range 0 to 9
                 474     ;will be in register s1.
                 475     ;
                 476     ;Registers used s0, s2,s3,s4,s5,s6,s7,s8,s9,sA,sB,sC,sD
                 477     ;
083 0CA20        478     divide_32bit_by_10:     LOAD            sa, s2                  ;copy input value to set [sD,sC,sB,sA]
084 0CB30        479                             LOAD            sb, s3
085 0CC40        480                             LOAD            sc, s4
086 0CD50        481                             LOAD            sd, s5
087 00200        482                             LOAD            s2, #0x00               ;clear result
088 00300        483                             LOAD            s3, #0x00
089 00400        484                             LOAD            s4, #0x00
08A 00500        485                             LOAD            s5, #0x00
08B 009A0        486                             LOAD            s9, #0xa0               ;initialise '10' value into msb's of set [s9,s8,s7,s6]
08C 00800        487                             LOAD            s8, #0x00
08D 00700        488                             LOAD            s7, #0x00
08E 00600        489                             LOAD            s6, #0x00
08F 0001D        490                             LOAD            s0, #0x1d               ;29 subtract and shift iterations to be performed
090 0CA66        491     div10_loop:             SUB             sa, s6                  ;perform 32-bit subtract [sD,sC,sB,sA]-[s9,s8,s7,s6]
091 0CB77        492                             SUBCY           sb, s7
092 0CC87        493                             SUBCY           sc, s8
093 0CD97        494                             SUBCY           sd, s9
094 099B0        495                             JUMP            c, div10_restore
095 0D207        496                             SL1             s2                      ;shift '1' into result
096 081B5        497                             JUMP            div10_shifts
097 0CA64        498     div10_restore:          ADD             sa, s6                  ;perform 32-bit addition [sD,sC,sB,sA]+[s9,s8,s7,s6]
098 0CB75        499                             ADDCY           sb, s7
099 0CC85        500                             ADDCY           sc, s8
09A 0CD95        501                             ADDCY           sd, s9
09B 0D206        502                             SL0             s2                      ;shift '0' into result
09C 0D300        503     div10_shifts:           SLA             s3                      ;complete 32-bit shift left
09D 0D400        504                             SLA             s4
09E 0D500        505                             SLA             s5
09F 0D90E        506                             SR0             s9                      ;divide '10' value by 2 (shift right 1 place)
0A0 0D808        507                             SRA             s8
0A1 0D708        508                             SRA             s7
0A2 0D608        509                             SRA             s6
0A3 06001        510                             SUB             s0, #0x01               ;count iterations
0A4 095A9        511                             JUMP            nz, div10_loop
0A5 0C1A0        512                             LOAD            s1, sa                  ;remainder of division
0A6 08080        513                             RETURN
                 514     ;
                 515     ;
                 516     ;
                 517     ;
                 518     ;**************************************************************************************
                 519     ;LCD text messages
                 520     ;**************************************************************************************
                 521     ;
                 522     ;
                 523     ;Display 'PicoBlaze' on LCD at current cursor position
                 524     ;
                 525     ;
0A7 00550        526     disp_picoblaze:         LOAD            s5, #_character_p
0A8 083D3        527                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0A9 00569        528                             LOAD            s5, #character_i
0AA 083D3        529                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0AB 00563        530                             LOAD            s5, #character_c
0AC 083D3        531                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0AD 0056F        532                             LOAD            s5, #character_o
0AE 083D3        533                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0AF 00542        534                             LOAD            s5, #_character_b
0B0 083D3        535                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0B1 0056C        536                             LOAD            s5, #character_l
0B2 083D3        537                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0B3 00561        538                             LOAD            s5, #character_a
0B4 083D3        539                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0B5 0057A        540                             LOAD            s5, #character_z
0B6 083D3        541                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0B7 00565        542                             LOAD            s5, #character_e
0B8 083D3        543                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0B9 08080        544                             RETURN
                 545     ;
                 546     ;
                 547     ;Display 'Frequency' on LCD at current cursor position
                 548     ;
                 549     ;
0BA 00546        550     disp_frequency:         LOAD            s5, #_character_f
0BB 083D3        551                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0BC 00572        552                             LOAD            s5, #character_r
0BD 083D3        553                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0BE 00565        554                             LOAD            s5, #character_e
0BF 083D3        555                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0C0 00571        556                             LOAD            s5, #character_q
0C1 083D3        557                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0C2 00575        558                             LOAD            s5, #character_u
0C3 083D3        559                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0C4 00565        560                             LOAD            s5, #character_e
0C5 083D3        561                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0C6 0056E        562                             LOAD            s5, #character_n
0C7 083D3        563                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0C8 00563        564                             LOAD            s5, #character_c
0C9 083D3        565                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0CA 00579        566                             LOAD            s5, #character_y
0CB 083D3        567                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0CC 08080        568                             RETURN
                 569     ;
                 570     ;
                 571     ;Display 'Counter' on LCD at current cursor position
                 572     ;
                 573     ;
0CD 00543        574     disp_counter:           LOAD            s5, #_character_c
0CE 083D3        575                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0CF 0056F        576                             LOAD            s5, #character_o
0D0 083D3        577                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0D1 00575        578                             LOAD            s5, #character_u
0D2 083D3        579                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0D3 0056E        580                             LOAD            s5, #character_n
0D4 083D3        581                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0D5 00574        582                             LOAD            s5, #character_t
0D6 083D3        583                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0D7 00565        584                             LOAD            s5, #character_e
0D8 083D3        585                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0D9 00572        586                             LOAD            s5, #character_r
0DA 083D3        587                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0DB 08080        588                             RETURN
                 589     ;
                 590     ;Display version number on LCD at current cursor position
                 591     ;
                 592     ;
0DC 00576        593     disp_version:           LOAD            s5, #character_v
0DD 083D3        594                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0DE 00531        595                             LOAD            s5, #character_1
0DF 083D3        596                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0E0 0052E        597                             LOAD            s5, #character_stop
0E1 083D3        598                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0E2 00530        599                             LOAD            s5, #character_0
0E3 083D3        600                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0E4 00530        601                             LOAD            s5, #character_0
0E5 083D3        602                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0E6 08080        603                             RETURN
                 604     ;
                 605     ;
                 606     ;Display 'SMA input' at current cursor position
                 607     ;
                 608     ;
0E7 00553        609     disp_sma_input:         LOAD            s5, #_character_s
0E8 083D3        610                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0E9 0054D        611                             LOAD            s5, #_character_m
0EA 083D3        612                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0EB 00541        613                             LOAD            s5, #_character_a
0EC 083D3        614                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0ED 00520        615                             LOAD            s5, #character_space
0EE 083D3        616                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0EF 00569        617                             LOAD            s5, #character_i
0F0 083D3        618                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0F1 0056E        619                             LOAD            s5, #character_n
0F2 083D3        620                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0F3 00570        621                             LOAD            s5, #character_p
0F4 083D3        622                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0F5 00575        623                             LOAD            s5, #character_u
0F6 083D3        624                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0F7 00574        625                             LOAD            s5, #character_t
0F8 083D3        626                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0F9 00F06        627                             LOAD            sf, #0x06
0FA 08157        628                             JUMP            disp_spaces
W: value out of range: 0x157, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x57.
                 629     ;
                 630     ;
                 631     ;
                 632     ;Display '50MHz Crystal' at current cursor position
                 633     ;
                 634     ;
0FB 00535        635     disp_50mhz_crystal:     LOAD            s5, #character_5
0FC 083D3        636                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0FD 00530        637                             LOAD            s5, #character_0
0FE 083D3        638                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
0FF 0054D        639                             LOAD            s5, #_character_m
100 083D3        640                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
101 00548        641                             LOAD            s5, #_character_h
102 083D3        642                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
103 0057A        643                             LOAD            s5, #character_z
104 083D3        644                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
105 00520        645                             LOAD            s5, #character_space
106 083D3        646                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
107 00543        647                             LOAD            s5, #_character_c
108 083D3        648                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
109 00572        649                             LOAD            s5, #character_r
10A 083D3        650                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
10B 00579        651                             LOAD            s5, #character_y
10C 083D3        652                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
10D 00573        653                             LOAD            s5, #character_s
10E 083D3        654                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
10F 00574        655                             LOAD            s5, #character_t
110 083D3        656                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
111 00561        657                             LOAD            s5, #character_a
112 083D3        658                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
113 0056C        659                             LOAD            s5, #character_l
114 083D3        660                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
115 00F02        661                             LOAD            sf, #0x02
116 08157        662                             JUMP            disp_spaces
W: value out of range: 0x157, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x57.
                 663     ;
                 664     ;
                 665     ;
                 666     ;Display 'DCM oscillator' at current cursor position
                 667     ;
                 668     ;
117 00544        669     disp_dcm_oscillator:    LOAD            s5, #_character_d
118 083D3        670                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
119 00543        671                             LOAD            s5, #_character_c
11A 083D3        672                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
11B 0054D        673                             LOAD            s5, #_character_m
11C 083D3        674                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
11D 00520        675     disp_oscillator:        LOAD            s5, #character_space
11E 083D3        676                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
11F 0054F        677                             LOAD            s5, #_character_o
120 083D3        678                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
121 00573        679                             LOAD            s5, #character_s
122 083D3        680                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
123 00563        681                             LOAD            s5, #character_c
124 083D3        682                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
125 00569        683                             LOAD            s5, #character_i
126 083D3        684                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
127 0056C        685                             LOAD            s5, #character_l
128 083D3        686                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
129 083D3        687                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
12A 00561        688                             LOAD            s5, #character_a
12B 083D3        689                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
12C 00574        690                             LOAD            s5, #character_t
12D 083D3        691                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
12E 0056F        692                             LOAD            s5, #character_o
12F 083D3        693                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
130 00572        694                             LOAD            s5, #character_r
131 083D3        695                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
132 00520        696                             LOAD            s5, #character_space
133 083D3        697                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
134 08080        698                             RETURN
                 699     ;
                 700     ;
                 701     ;
                 702     ;Display 'Ring oscillator' at current cursor position
                 703     ;
                 704     ;
135 00552        705     disp_ring_oscillator:   LOAD            s5, #_character_r
136 083D3        706                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
137 00569        707                             LOAD            s5, #character_i
138 083D3        708                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
139 0056E        709                             LOAD            s5, #character_n
13A 083D3        710                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
13B 00567        711                             LOAD            s5, #character_g
13C 083D3        712                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
13D 08136        713                             JUMP            disp_oscillator
W: value out of range: 0x136, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x36.
                 714     ;
                 715     ;
                 716     ;Display spaces at current cursor position
                 717     ;Number of spaces to be specified in register sF
                 718     ;
  00157          719     disp_spaces:            COMPARE         sf, #0x00
E: instruction not supported on the this device: COMPARE sX, kk.
13E 09080        720                             RETURN          z
13F 00520        721                             LOAD            s5, #character_space
140 083D3        722                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
141 06F01        723                             SUB             sf, #0x01
142 08157        724                             JUMP            disp_spaces
W: value out of range: 0x157, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x57.
                 725     ;
                 726     ;Display switch setting menu on entire display.
                 727     ;
143 00510        728     disp_menu:              LOAD            s5, #0x10               ;Line 1 position 0
144 08313        729                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
145 00552        730                             LOAD            s5, #_character_r
146 083D3        731                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
147 00569        732                             LOAD            s5, #character_i
148 083D3        733                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
149 0056E        734                             LOAD            s5, #character_n
14A 083D3        735                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
14B 00567        736                             LOAD            s5, #character_g
14C 083D3        737                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
14D 00520        738                             LOAD            s5, #character_space
14E 083D3        739                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
14F 00544        740                             LOAD            s5, #_character_d
150 083D3        741                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
151 00543        742                             LOAD            s5, #_character_c
152 083D3        743                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
153 0054D        744                             LOAD            s5, #_character_m
154 083D3        745                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
155 00520        746                             LOAD            s5, #character_space
156 083D3        747                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
157 00535        748                             LOAD            s5, #character_5
158 083D3        749                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
159 00530        750                             LOAD            s5, #character_0
15A 083D3        751                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
15B 0054D        752                             LOAD            s5, #_character_m
15C 083D3        753                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
15D 00520        754                             LOAD            s5, #character_space
15E 083D3        755                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
15F 00553        756                             LOAD            s5, #_character_s
160 083D3        757                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
161 0054D        758                             LOAD            s5, #_character_m
162 083D3        759                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
163 00541        760                             LOAD            s5, #_character_a
164 083D3        761                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
165 00520        762                             LOAD            s5, #0x20               ;Line 2 position 0
166 08313        763                             CALL            lcd_cursor
W: value out of range: 0x213, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x13.
167 00520        764                             LOAD            s5, #character_space
168 083D3        765                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
169 00553        766                             LOAD            s5, #_character_s
16A 083D3        767                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
16B 00557        768                             LOAD            s5, #_character_w
16C 083D3        769                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
16D 00533        770                             LOAD            s5, #character_3
16E 083D3        771                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
16F 00520        772                             LOAD            s5, #character_space
170 083D3        773                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
171 00553        774                             LOAD            s5, #_character_s
172 083D3        775                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
173 00557        776                             LOAD            s5, #_character_w
174 083D3        777                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
175 00532        778                             LOAD            s5, #character_2
176 083D3        779                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
177 00520        780                             LOAD            s5, #character_space
178 083D3        781                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
179 00553        782                             LOAD            s5, #_character_s
17A 083D3        783                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
17B 00557        784                             LOAD            s5, #_character_w
17C 083D3        785                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
17D 00531        786                             LOAD            s5, #character_1
17E 083D3        787                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
17F 00520        788                             LOAD            s5, #character_space
180 083D3        789                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
181 00553        790                             LOAD            s5, #_character_s
182 083D3        791                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
183 00557        792                             LOAD            s5, #_character_w
184 083D3        793                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
185 00530        794                             LOAD            s5, #character_0
186 083D3        795                             CALL            lcd_write_data
W: value out of range: 0x1d3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xd3.
187 08080        796                             RETURN
                 797     ;
                 798     ;
                 799     ;
                 800     ;
                 801     ;**************************************************************************************
                 802     ;Software delay routines
                 803     ;**************************************************************************************
                 804     ;
                 805     ;
                 806     ;
                 807     ;Delay of 1us.
                 808     ;
                 809     ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 810     ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 811     ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 812     ;
                 813     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 814     ;
                 815     ;Registers used s0
                 816     ;
188 0000B        817     delay_1us:              LOAD            s0, #delay_1us_constant
189 06001        818     wait_1us:               SUB             s0, #0x01
18A 095A3        819                             JUMP            nz, wait_1us
W: value out of range: 0x1a3, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa3.
18B 08080        820                             RETURN
                 821     ;
                 822     ;Delay of 40us.
                 823     ;
                 824     ;Registers used s0, s1
                 825     ;
18C 00128        826     delay_40us:             LOAD            s1, #0x28               ;40 x 1us = 40us
18D 083A2        827     wait_40us:              CALL            delay_1us
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
18E 06101        828                             SUB             s1, #0x01
18F 095A7        829                             JUMP            nz, wait_40us
W: value out of range: 0x1a7, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa7.
190 08080        830                             RETURN
                 831     ;
                 832     ;
                 833     ;Delay of 1ms.
                 834     ;
                 835     ;Registers used s0, s1, s2
                 836     ;
191 00219        837     delay_1ms:              LOAD            s2, #0x19               ;25 x 40us = 1ms
192 083A6        838     wait_1ms:               CALL            delay_40us
W: value out of range: 0x1a6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa6.
193 06201        839                             SUB             s2, #0x01
194 095AC        840                             JUMP            nz, wait_1ms
W: value out of range: 0x1ac, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xac.
195 08080        841                             RETURN
                 842     ;
                 843     ;Delay of 20ms.
                 844     ;
                 845     ;Delay of 20ms used during initialisation.
                 846     ;
                 847     ;Registers used s0, s1, s2, s3
                 848     ;
196 00314        849     delay_20ms:             LOAD            s3, #0x14               ;20 x 1ms = 20ms
197 083AB        850     wait_20ms:              CALL            delay_1ms
W: value out of range: 0x1ab, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xab.
198 06301        851                             SUB             s3, #0x01
199 095B1        852                             JUMP            nz, wait_20ms
W: value out of range: 0x1b1, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb1.
19A 08080        853                             RETURN
                 854     ;
                 855     ;Delay of approximately 1 second.
                 856     ;
                 857     ;Registers used s0, s1, s2, s3, s4
                 858     ;
19B 00432        859     delay_1s:               LOAD            s4, #0x32               ;50 x 20ms = 1000ms
19C 083B0        860     wait_1s:                CALL            delay_20ms
W: value out of range: 0x1b0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb0.
19D 06401        861                             SUB             s4, #0x01
19E 095B6        862                             JUMP            nz, wait_1s
W: value out of range: 0x1b6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb6.
19F 08080        863                             RETURN
                 864     ;
                 865     ;
                 866     ;
                 867     ;**************************************************************************************
                 868     ;LCD Character Module Routines
                 869     ;**************************************************************************************
                 870     ;
                 871     ;LCD module is a 16 character by 2 line display but all displays are very similar
                 872     ;The 4-wire data interface will be used (DB4 to DB7).
                 873     ;
                 874     ;The LCD modules are relatively slow and software delay loops are used to slow down
                 875     ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                 876     ;a different section (see above in this case).
                 877     ;
                 878     ;
                 879     ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                 880     ;
                 881     ;Register s4 should define the current state of the LCD output port.
                 882     ;
                 883     ;Registers used s0, s4
                 884     ;
1A0 03401        885     lcd_pulse_e:            XOR             s4, #lcd_e              ;E=1
1A1 0E404        886                             OUTPUT          s4, lcd_output_port
1A2 083A2        887                             CALL            delay_1us
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
1A3 03401        888                             XOR             s4, #lcd_e              ;E=0
1A4 0E404        889                             OUTPUT          s4, lcd_output_port
1A5 08080        890                             RETURN
                 891     ;
                 892     ;Write 4-bit instruction to LCD display.
                 893     ;
                 894     ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                 895     ;Note that this routine does not release the master enable but as it is only
                 896     ;used during initialisation and as part of the 8-bit instruction write it
                 897     ;should be acceptable.
                 898     ;
                 899     ;Registers used s4
                 900     ;
1A6 014F8        901     lcd_write_inst4:        AND             s4, #0xf8               ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
1A7 0E404        902                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
1A8 083BA        903                             CALL            lcd_pulse_e
W: value out of range: 0x1ba, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xba.
1A9 08080        904                             RETURN
                 905     ;
                 906     ;
                 907     ;Write 8-bit instruction to LCD display.
                 908     ;
                 909     ;The 8-bit instruction should be provided in register s5.
                 910     ;Instructions are written using the following sequence
                 911     ; Upper nibble
                 912     ; wait >1us
                 913     ; Lower nibble
                 914     ; wait >40us
                 915     ;
                 916     ;Registers used s0, s1, s4, s5
                 917     ;
1AA 0C450        918     lcd_write_inst8:        LOAD            s4, s5
1AB 014F0        919                             AND             s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
1AC 02408        920                             OR              s4, #lcd_drive          ;Enable=1
1AD 083C0        921                             CALL            lcd_write_inst4         ;write upper nibble
W: value out of range: 0x1c0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc0.
1AE 083A2        922                             CALL            delay_1us               ;wait >1us
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
1AF 0C450        923                             LOAD            s4, s5                  ;select lower nibble with
1B0 0D407        924                             SL1             s4                      ;Enable=1
1B1 0D406        925                             SL0             s4                      ;RS=0 Instruction
1B2 0D406        926                             SL0             s4                      ;RW=0 Write
1B3 0D406        927                             SL0             s4                      ;E=0
1B4 083C0        928                             CALL            lcd_write_inst4         ;write lower nibble
W: value out of range: 0x1c0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc0.
1B5 083A6        929                             CALL            delay_40us              ;wait >40us
W: value out of range: 0x1a6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa6.
1B6 004F0        930                             LOAD            s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
1B7 0E404        931                             OUTPUT          s4, lcd_output_port     ;Release master enable
1B8 08080        932                             RETURN
                 933     ;
                 934     ;
                 935     ;
                 936     ;Write 8-bit data to LCD display.
                 937     ;
                 938     ;The 8-bit data should be provided in register s5.
                 939     ;Data bytes are written using the following sequence
                 940     ; Upper nibble
                 941     ; wait >1us
                 942     ; Lower nibble
                 943     ; wait >40us
                 944     ;
                 945     ;Registers used s0, s1, s4, s5
                 946     ;
1B9 0C450        947     lcd_write_data:         LOAD            s4, s5
1BA 014F0        948                             AND             s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
1BB 0240C        949                             OR              s4, #0x0c               ;Enable=1 RS=1 Data, RW=0 Write, E=0
1BC 0E404        950                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
1BD 083BA        951                             CALL            lcd_pulse_e             ;write upper nibble
W: value out of range: 0x1ba, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xba.
1BE 083A2        952                             CALL            delay_1us               ;wait >1us
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
1BF 0C450        953                             LOAD            s4, s5                  ;select lower nibble with
1C0 0D407        954                             SL1             s4                      ;Enable=1
1C1 0D407        955                             SL1             s4                      ;RS=1 Data
1C2 0D406        956                             SL0             s4                      ;RW=0 Write
1C3 0D406        957                             SL0             s4                      ;E=0
1C4 0E404        958                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
1C5 083BA        959                             CALL            lcd_pulse_e             ;write lower nibble
W: value out of range: 0x1ba, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xba.
1C6 083A6        960                             CALL            delay_40us              ;wait >40us
W: value out of range: 0x1a6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa6.
1C7 004F0        961                             LOAD            s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
1C8 0E404        962                             OUTPUT          s4, lcd_output_port     ;Release master enable
1C9 08080        963                             RETURN
                 964     ;
                 965     ;
                 966     ;
                 967     ;
                 968     ;Read 8-bit data from LCD display.
                 969     ;
                 970     ;The 8-bit data will be read from the current LCD memory address
                 971     ;and will be returned in register s5.
                 972     ;It is advisable to set the LCD address (cursor position) before
                 973     ;using the data read for the first time otherwise the display may
                 974     ;generate invalid data on the first read.
                 975     ;
                 976     ;Data bytes are read using the following sequence
                 977     ; Upper nibble
                 978     ; wait >1us
                 979     ; Lower nibble
                 980     ; wait >40us
                 981     ;
                 982     ;Registers used s0, s1, s4, s5
                 983     ;
1CA 0040E        984     lcd_read_data8:         LOAD            s4, #0x0e               ;Enable=1 RS=1 Data, RW=1 Read, E=0
1CB 0E404        985                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
1CC 03401        986                             XOR             s4, #lcd_e              ;E=1
1CD 0E404        987                             OUTPUT          s4, lcd_output_port
1CE 083A2        988                             CALL            delay_1us               ;wait >260ns to access data
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
1CF 0A509        989                             INPUT           s5, lcd_input_port      ;read upper nibble
1D0 03401        990                             XOR             s4, #lcd_e              ;E=0
1D1 0E404        991                             OUTPUT          s4, lcd_output_port
1D2 083A2        992                             CALL            delay_1us               ;wait >1us
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
1D3 03401        993                             XOR             s4, #lcd_e              ;E=1
1D4 0E404        994                             OUTPUT          s4, lcd_output_port
1D5 083A2        995                             CALL            delay_1us               ;wait >260ns to access data
W: value out of range: 0x1a2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa2.
1D6 0A009        996                             INPUT           s0, lcd_input_port      ;read lower nibble
1D7 03401        997                             XOR             s4, #lcd_e              ;E=0
1D8 0E404        998                             OUTPUT          s4, lcd_output_port
1D9 015F0        999                             AND             s5, #0xf0               ;merge upper and lower nibbles
1DA 0D00E       1000                             SR0             s0
1DB 0D00E       1001                             SR0             s0
1DC 0D00E       1002                             SR0             s0
1DD 0D00E       1003                             SR0             s0
1DE 0C502       1004                             OR              s5, s0
1DF 00404       1005                             LOAD            s4, #0x04               ;Enable=0 RS=1 Data, RW=0 Write, E=0
1E0 0E404       1006                             OUTPUT          s4, lcd_output_port     ;Stop reading 5V device and release master enable
1E1 083A6       1007                             CALL            delay_40us              ;wait >40us
W: value out of range: 0x1a6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa6.
1E2 08080       1008                             RETURN
                1009     ;
                1010     ;
                1011     ;Reset and initialise display to communicate using 4-bit data mode
                1012     ;Includes routine to clear the display.
                1013     ;
                1014     ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                1015     ;following by the 8-bit instructions to set up the display.
                1016     ;
                1017     ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                1018     ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
                1019     ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                1020     ;  01 = '00000001' Display clear
                1021     ;
                1022     ;Registers used s0, s1, s2, s3, s4
                1023     ;
1E3 083B0       1024     lcd_reset:              CALL            delay_20ms              ;wait more that 15ms for display to be ready
W: value out of range: 0x1b0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb0.
1E4 00430       1025                             LOAD            s4, #0x30
1E5 083C0       1026                             CALL            lcd_write_inst4         ;send '3'
W: value out of range: 0x1c0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc0.
1E6 083B0       1027                             CALL            delay_20ms              ;wait >4.1ms
W: value out of range: 0x1b0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb0.
1E7 083C0       1028                             CALL            lcd_write_inst4         ;send '3'
W: value out of range: 0x1c0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc0.
1E8 083AB       1029                             CALL            delay_1ms               ;wait >100us
W: value out of range: 0x1ab, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xab.
1E9 083C0       1030                             CALL            lcd_write_inst4         ;send '3'
W: value out of range: 0x1c0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc0.
1EA 083A6       1031                             CALL            delay_40us              ;wait >40us
W: value out of range: 0x1a6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa6.
1EB 00420       1032                             LOAD            s4, #0x20
1EC 083C0       1033                             CALL            lcd_write_inst4         ;send '2'
W: value out of range: 0x1c0, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc0.
1ED 083A6       1034                             CALL            delay_40us              ;wait >40us
W: value out of range: 0x1a6, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xa6.
1EE 00528       1035                             LOAD            s5, #0x28               ;Function set
1EF 083C4       1036                             CALL            lcd_write_inst8
W: value out of range: 0x1c4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc4.
1F0 00506       1037                             LOAD            s5, #0x06               ;Entry mode
1F1 083C4       1038                             CALL            lcd_write_inst8
W: value out of range: 0x1c4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc4.
1F2 0050C       1039                             LOAD            s5, #0x0c               ;Display control
1F3 083C4       1040                             CALL            lcd_write_inst8
W: value out of range: 0x1c4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc4.
1F4 00501       1041     lcd_clear:              LOAD            s5, #0x01               ;Display clear
1F5 083C4       1042                             CALL            lcd_write_inst8
W: value out of range: 0x1c4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc4.
1F6 083AB       1043                             CALL            delay_1ms               ;wait >1.64ms for display to clear
W: value out of range: 0x1ab, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xab.
1F7 083AB       1044                             CALL            delay_1ms
W: value out of range: 0x1ab, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xab.
1F8 08080       1045                             RETURN
                1046     ;
                1047     ;Position the cursor ready for characters to be written.
                1048     ;The display is formed of 2 lines of 16 characters and each
                1049     ;position has a corresponding address as indicated below.
                1050     ;
                1051     ;                   Character position
                1052     ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                1053     ;
                1054     ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                1055     ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                1056     ;
                1057     ;This routine will set the cursor position using the value provided
                1058     ;in register s5. The upper nibble will define the line and the lower
                1059     ;nibble the character position on the line.
                1060     ; Example s5 = 2B will position the cursor on line 2 position 11
                1061     ;
                1062     ;Registers used s0, s1, s2, s3, s4
                1063     ;
  00213         1064     lcd_cursor:             TEST            s5, #0x10               ;test for line 1
E: instruction not supported on the this device: TEST sX, kk.
1F9 09119       1065                             JUMP            z, set_line2
W: value out of range: 0x219, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x19.
1FA 0150F       1066                             AND             s5, #0x0f               ;make address in range 80 to 8F for line 1
1FB 02580       1067                             OR              s5, #0x80
1FC 083C4       1068                             CALL            lcd_write_inst8         ;instruction write to set cursor
W: value out of range: 0x1c4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc4.
1FD 08080       1069                             RETURN
1FE 0150F       1070     set_line2:              AND             s5, #0x0f               ;make address in range C0 to CF for line 2
1FF 025C0       1071                             OR              s5, #0xc0
200 083C4       1072                             CALL            lcd_write_inst8         ;instruction write to set cursor
W: value out of range: 0x1c4, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc4.
201 08080       1073                             RETURN
                1074     ;
                1075     ;
                1076     ;
                1077     ;**************************************************************************************
                1078     ;Interrupt Service Routine
                1079     ;**************************************************************************************
                1080     ;
                1081     ;
                1082     ;Each interrupt means that there is a new count value to be read.
                1083     ;However the first 4 interrupts are ignored other than to clear the counter to
                1084     ;ensure that even the first reading is for one complete period.
                1085     ;
                1086     ;After reading the active counter, all calculations are performed and values stored
                1087     ;in scratch pad memory are updated to reflect the new values.
                1088     ;
                1089     ;Registers are preserved and restored by the ISR so main program is unaffected.
                1090     ;
  0021D         1091     isr:                    STORE           s0, preserve_s0         ;preserve registers
E: instruction not supported on the this device: STORE sX, ss.
                1092                             STORE           s1, preserve_s1
E: instruction not supported on the this device: STORE sX, ss.
                1093                             STORE           s2, preserve_s2
E: instruction not supported on the this device: STORE sX, ss.
                1094                             STORE           s3, preserve_s3
E: instruction not supported on the this device: STORE sX, ss.
                1095                             STORE           s4, preserve_s4
E: instruction not supported on the this device: STORE sX, ss.
                1096                             STORE           s5, preserve_s5
E: instruction not supported on the this device: STORE sX, ss.
                1097                             STORE           s6, preserve_s6
E: instruction not supported on the this device: STORE sX, ss.
                1098                             STORE           s7, preserve_s7
E: instruction not supported on the this device: STORE sX, ss.
                1099                             STORE           s8, preserve_s8
E: instruction not supported on the this device: STORE sX, ss.
                1100                             STORE           s9, preserve_s9
E: instruction not supported on the this device: STORE sX, ss.
                1101                             STORE           sa, preserve_sa
E: instruction not supported on the this device: STORE sX, ss.
                1102                             STORE           sb, preserve_sb
E: instruction not supported on the this device: STORE sX, ss.
                1103                             STORE           sc, preserve_sc
E: instruction not supported on the this device: STORE sX, ss.
                1104                             STORE           sd, preserve_sd
E: instruction not supported on the this device: STORE sX, ss.
                1105                             STORE           se, preserve_se
E: instruction not supported on the this device: STORE sX, ss.
                1106                             STORE           sf, preserve_sf
E: instruction not supported on the this device: STORE sX, ss.
                1107     ;
                1108     ;Ignore the first 4 interrupts except to clear the counter.
                1109     ;This will ensure a clean start up after reset.
                1110     ;
                1111                             FETCH           s0, isr_count           ;test to see if more that 4 interrupts have occurred
E: instruction not supported on the this device: FETCH sX, ss.
                1112                             COMPARE         s0, #0x04
E: instruction not supported on the this device: COMPARE sX, kk.
202 0913C       1113                             JUMP            z, normal_isr
W: value out of range: 0x23c, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x3c.
203 04001       1114                             ADD             s0, #0x01               ;increment ISR counter until reaching 4
                1115                             STORE           s0, isr_count
E: instruction not supported on the this device: STORE sX, ss.
204 0A080       1116                             INPUT           s0, status_port         ;Check which counter to clear
                1117                             TEST            s0, #ab_switch          ;if bit0 is Low then A is counting
E: instruction not supported on the this device: TEST sX, kk.
205 09137       1118                             JUMP            z, clear_b_count
W: value out of range: 0x237, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x37.
206 00001       1119     clear_a_count:          LOAD            s0, #a_count_reset      ;clear the active counter
207 08138       1120                             JUMP            clear_counter
W: value out of range: 0x238, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x38.
208 00002       1121     clear_b_count:          LOAD            s0, #b_count_reset      ;clear the active counter
209 0E002       1122     clear_counter:          OUTPUT          s0, count_resetport     ;reset counter with pulse
20A 00000       1123                             LOAD            s0, #0x00               ;end reset pulse to either counter
20B 0E002       1124                             OUTPUT          s0, count_resetport
20C 08156       1125                             JUMP            restore_reg
W: value out of range: 0x256, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x56.
                1126     ;
                1127     ;Normal ISR Routine
                1128     ;
                1129     ;
                1130     ;Read the new counter value and then clear it ready to start again
                1131     ;
                1132     ;
20D 0A080       1133     normal_isr:             INPUT           s0, status_port         ;test for active counter
                1134                             TEST            s0, #ab_switch          ;if bit is low then A is counting
E: instruction not supported on the this device: TEST sX, kk.
20E 09148       1135                             JUMP            z, capture_b_count
W: value out of range: 0x248, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x48.
20F 000F0       1136     capture_a_count:        LOAD            s0, #0xf0               ;set LEDs to indicate active counter
210 0E001       1137                             OUTPUT          s0, led_port
211 0AC00       1138                             INPUT           sc, a_count0_port       ;read counter A into [sF,sE,SD,sC]
212 0AD10       1139                             INPUT           sd, a_count1_port
213 0AE20       1140                             INPUT           se, a_count2_port
214 0AF30       1141                             INPUT           sf, a_count3_port
215 00001       1142                             LOAD            s0, #a_count_reset      ;reset counter A
216 0E002       1143                             OUTPUT          s0, count_resetport
217 08150       1144                             JUMP            counters_read
W: value out of range: 0x250, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x50.
                1145     ;
218 0000F       1146     capture_b_count:        LOAD            s0, #0x0f               ;set LEDs to indicate active counter
219 0E001       1147                             OUTPUT          s0, led_port
21A 0AC40       1148                             INPUT           sc, b_count0_port       ;read counter A into [sF,sE,SD,sC]
21B 0AD50       1149                             INPUT           sd, b_count1_port
21C 0AE60       1150                             INPUT           se, b_count2_port
21D 0AF70       1151                             INPUT           sf, b_count3_port
21E 00002       1152                             LOAD            s0, #b_count_reset      ;reset counter B
21F 0E002       1153                             OUTPUT          s0, count_resetport
220 00000       1154     counters_read:          LOAD            s0, #0x00               ;end reset pulse to either counter
221 0E002       1155                             OUTPUT          s0, count_resetport
                1156     ;
                1157                             STORE           sc, count0              ;store new counter value
E: instruction not supported on the this device: STORE sX, ss.
                1158                             STORE           sd, count1
E: instruction not supported on the this device: STORE sX, ss.
                1159                             STORE           se, count2
E: instruction not supported on the this device: STORE sX, ss.
                1160                             STORE           sf, count3
E: instruction not supported on the this device: STORE sX, ss.
                1161     ;
                1162     ;
                1163     ;
                1164     ;Restore registers and end ISR
                1165     ;
  00256         1166     restore_reg:            FETCH           sf, preserve_sf         ;restore registers
E: instruction not supported on the this device: FETCH sX, ss.
                1167                             FETCH           se, preserve_se
E: instruction not supported on the this device: FETCH sX, ss.
                1168                             FETCH           sd, preserve_sd
E: instruction not supported on the this device: FETCH sX, ss.
                1169                             FETCH           sc, preserve_sc
E: instruction not supported on the this device: FETCH sX, ss.
                1170                             FETCH           sb, preserve_sb
E: instruction not supported on the this device: FETCH sX, ss.
                1171                             FETCH           sa, preserve_sa
E: instruction not supported on the this device: FETCH sX, ss.
                1172                             FETCH           s9, preserve_s9
E: instruction not supported on the this device: FETCH sX, ss.
                1173                             FETCH           s8, preserve_s8
E: instruction not supported on the this device: FETCH sX, ss.
                1174                             FETCH           s7, preserve_s7
E: instruction not supported on the this device: FETCH sX, ss.
                1175                             FETCH           s6, preserve_s6
E: instruction not supported on the this device: FETCH sX, ss.
                1176                             FETCH           s5, preserve_s5
E: instruction not supported on the this device: FETCH sX, ss.
                1177                             FETCH           s4, preserve_s4
E: instruction not supported on the this device: FETCH sX, ss.
                1178                             FETCH           s3, preserve_s3
E: instruction not supported on the this device: FETCH sX, ss.
                1179                             FETCH           s2, preserve_s2
E: instruction not supported on the this device: FETCH sX, ss.
                1180                             FETCH           s1, preserve_s1
E: instruction not supported on the this device: FETCH sX, ss.
                1181                             FETCH           s0, preserve_s0
E: instruction not supported on the this device: FETCH sX, ss.
222 080F0       1182                             RETURNI         enable
                1183     ;
                1184     ;
                1185     ;Interrupt vector
                1186     ;
  003FF         1187                             ORG             0x3ff
3FF 0811D       1188                             JUMP            isr
W: value out of range: 0x21d, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0x1d.
                1189     ;
                1190     ;
                1191     ;**************************************************************************************
                1192     ;End of Program
                1193     ;**************************************************************************************
                1194     ;
                1195     ;
                1196
