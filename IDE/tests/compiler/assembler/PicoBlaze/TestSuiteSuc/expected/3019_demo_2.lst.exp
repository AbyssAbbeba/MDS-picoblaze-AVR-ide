                   1     ; MDS PicoBlaze IDE - Demonstration code
                   2     ; See manual for more info
                   3
                   4     ; Simple example of waiting loop
                   5     device          KCPSM3
                   6
                   7     ; Press Start simulation and Animate to run the program
  00000            8     temp1   autoreg
  00001            9     temp2   autoreg
  00002           10     temp3   autoreg
                  11
  00000           12                         ORG       0x000
000 34001         13                         JUMP      Start
                  14     ; Begining of main loop
001 30004         15     Start:              CALL      wait_1s
002 3000E         16                         CALL      wait_100ms
003 34003         17                         JUMP      $                   ; Infinite loop, $ is translated as number of curent line
                  18
                  19
                  20
                  21     ; Subroutines-----------------------------------------------------------------
                  22     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                  23     ;   1s @ (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                  24
004 000FA         25     wait_1s:            LOAD      Temp1, #250          ; Load Temp1 register
005 001F9         26                         LOAD      Temp2, #249          ; Load Temp2 register
006 002C8         27                         LOAD      Temp3, #200          ; Load Temp3 register
007 1D010         28     wait_1s_i:          SUB       Temp1, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
008 35407         29                         JUMP      NZ, wait_1s_i
009 1D110         30                         SUB       Temp2, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00A 35407         31                         JUMP      NZ, wait_1s_i
00B 1D210         32                         SUB       Temp3, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
00C 35407         33                         JUMP      NZ, wait_1s_i
00D 2A000         34                         RETURN
                  35     ;-----------------------------------------------------------------------------
00E 000FA         36     wait_100ms:         LOAD      Temp1, #250          ; Load Temp1 register
00F 001F9         37                         LOAD      Temp2, #249          ; Load Temp2 register
010 00214         38                         LOAD      Temp3, #20           ; Load Temp3 register
011 1D010         39     wait_100ms_i:       SUB       Temp1, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
012 35411         40                         JUMP      NZ, wait_100ms_i
013 1D110         41                         SUB       Temp2, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
014 35411         42                         JUMP      NZ, wait_100ms_i
015 1D210         43                         SUB       Temp3, 1
W: instruction `SUB sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: number.
016 35411         44                         JUMP      NZ, wait_100ms_i
017 2A000         45                         RETURN
                  46     ; <-- Bookmark   (ctrl + shift + M)
                  47     ; <-- Breakpoint (ctrl + shift + B)
                  48                         END                            ; End of program
                  49     ; -----------------------------------------
                  50     ; -----------------------------------------
