                   1     device kcpsm6
                   2
  00080            3     led_port                EQU             0x80                    ;8 simple LEDs
  00001            4     led0                    EQU             0x01                    ;     LED 0 - bit0
  00002            5     led1                    EQU             0x02                    ;         1 - bit1
  00004            6     led2                    EQU             0x04                    ;         2 - bit2
  00008            7     led3                    EQU             0x08                    ;         3 - bit3
  00010            8     led4                    EQU             0x10                    ;         4 - bit4
  00020            9     led5                    EQU             0x20                    ;         5 - bit5
  00040           10     led6                    EQU             0x40                    ;         6 - bit6
  00080           11     led7                    EQU             0x80                    ;         7 - bit7
                  12     ;
  00000           13     switch_port             EQU             0x00                    ;Read switches and press buttons
  00001           14     switch0                 EQU             0x01                    ;  Switches      SW0 - bit0
  00002           15     switch1                 EQU             0x02                    ;                SW1 - bit1
  00004           16     switch2                 EQU             0x04                    ;                SW2 - bit2
  00008           17     switch3                 EQU             0x08                    ;                SW3 - bit3
  00010           18     btn_east                EQU             0x10                    ;  Buttons      East - bit4
  00020           19     btn_south               EQU             0x20                    ;              South - bit5
  00040           20     btn_north               EQU             0x40                    ;              North - bit6
  00080           21     btn_west                EQU             0x80                    ;               West - bit7
                  22     ;
  00001           23     rotary_port             EQU             0x01                    ;Read status of rotary encoder
  00001           24     rotary_left             EQU             0x01                    ; Direction of last move Left=1 Right=0  - bit0
  00002           25     rotary_press            EQU             0x02                    ;     Centre press contact (active High) - bit1
                  26     ;
                  27     ;LCD interface ports
                  28     ;
                  29     ;The master enable signal is not used by the LCD display itself
                  30     ;but may be required to confirm that LCD communication is active.
                  31     ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  32     ;is used because it shares the same data pins and conflicts must be avoided.
                  33     ;
  00040           34     lcd_output_port         EQU             0x40                    ;LCD character module output data and control
  00001           35     lcd_e                   EQU             0x01                    ;   active High Enable        E - bit0
  00002           36     lcd_rw                  EQU             0x02                    ;   Read=1 Write=0           RW - bit1
  00004           37     lcd_rs                  EQU             0x04                    ;   Instruction=0 Data=1     RS - bit2
  00008           38     lcd_drive               EQU             0x08                    ;   Master enable (active High) - bit3
  00010           39     lcd_db4                 EQU             0x10                    ;   4-bit              Data DB4 - bit4
  00020           40     lcd_db5                 EQU             0x20                    ;   interface          Data DB5 - bit5
  00040           41     lcd_db6                 EQU             0x40                    ;                      Data DB6 - bit6
  00080           42     lcd_db7                 EQU             0x80                    ;                      Data DB7 - bit7
                  43     ;
  00002           44     lcd_input_port          EQU             0x02                    ;LCD character module input data
  00001           45     lcd_read_spare0         EQU             0x01                    ;    Spare bits               - bit0
  00002           46     lcd_read_spare1         EQU             0x02                    ;    are zero                 - bit1
  00004           47     lcd_read_spare2         EQU             0x04                    ;                             - bit2
  00008           48     lcd_read_spare3         EQU             0x08                    ;                             - bit3
  00010           49     lcd_read_db4            EQU             0x10                    ;    4-bit           Data DB4 - bit4
  00020           50     lcd_read_db5            EQU             0x20                    ;    interface       Data DB5 - bit5
  00040           51     lcd_read_db6            EQU             0x40                    ;                    Data DB6 - bit6
  00080           52     lcd_read_db7            EQU             0x80                    ;                    Data DB7 - bit7
  00080           53     bit7                    EQU             0x80                    ;
  00040           54     bit6                    EQU             0x40                    ;
  00020           55     bit5                    EQU             0x20                    ;
  00010           56     bit4                    EQU             0x10                    ;
  00008           57     bit3                    EQU             0x08                    ;
  00004           58     bit2                    EQU             0x04                    ;
  00002           59     bit1                    EQU             0x02                    ;
  00001           60     bit0                    EQU             0x01                    ;
                  61     ;
                  62     ;**************************************************************************************
                  63     ;Scratch Pad Memory Locations
                  64     ;**************************************************************************************
                  65     ;
  00000           66     rotary_status           EQU             0x00                    ;Status of rotary encoder
  00001           67     isr_s0                  EQU             0x01                    ;Preserve s0 contents during ISR
  00002           68     led_pattern             EQU             0x02                    ;LED pattern used in rotation mode
                  69     ;
  00003           70     mode                    EQU             0x03                    ;control mode 00=switch and button FF=rotary
  00004           71     ms1                     EQU             0x04
  00005           72     secl                    EQU             0x05
  00006           73     sech                    EQU             0x06
  00007           74     minl                    EQU             0x07
  00008           75     minh                    EQU             0x08
  00009           76     hourl                   EQU             0x09
  0000A           77     hourh                   EQU             0x0a
  0000B           78     week                    EQU             0x0b
  0000C           79     year1                   EQU             0x0c
  0000D           80     year2                   EQU             0x0d
  0000E           81     year3                   EQU             0x0e
  0000F           82     year4                   EQU             0x0f
  00010           83     ms2                     EQU             0x10
  00011           84     ms500                   EQU             0x11
  00012           85     isr_s1                  EQU             0x12
  00013           86     ms100                   EQU             0x13
  00014           87     rota_cnt                EQU             0x14
  00015           88     isr_s2                  EQU             0x15
  00016           89     temp                    EQU             0x16
  00017           90     pressed                 EQU             0x17
  00018           91     disp_flag               EQU             0x18
  00019           92     blink_flag              EQU             0x19
  0001A           93     disp_flag2              EQU             0x1a                    ;;;;;no use
  0001B           94     monh                    EQU             0x1b
  0001C           95     monl                    EQU             0x1c
  0001D           96     dayh                    EQU             0x1d
  0001E           97     dayl                    EQU             0x1e
  0001F           98     day_up                  EQU             0x1f
  00020           99     year100                 EQU             0x20
  00021          100     hourb                   EQU             0x21
  00022          101     minb                    EQU             0x22
  00023          102     secb                    EQU             0x23
  00024          103     yearb                   EQU             0x24
  00025          104     monb                    EQU             0x25
  00026          105     dayb                    EQU             0x26
  00027          106     dmax                    EQU             0x27                    ;
  00028          107     jan                     EQU             0x28                    ;
  00029          108     feb                     EQU             0x29                    ;
  0002A          109     mar                     EQU             0x2a                    ;
  0002B          110     apr                     EQU             0x2b                    ;
  0002C          111     may                     EQU             0x2c                    ;
  0002D          112     jun                     EQU             0x2d                    ;
  0002E          113     jul                     EQU             0x2e                    ;
  0002F          114     aug                     EQU             0x2f                    ;
  00030          115     sep                     EQU             0x30                    ;
  00031          116     oct                     EQU             0x31                    ;
  00032          117     nov                     EQU             0x32                    ;
  00033          118     decembr                     EQU             0x33                    ;
  00034          119     jan2                    EQU             0x34                    ;
  00035          120     feb2                    EQU             0x35                    ;
  00036          121     mar2                    EQU             0x36                    ;
  00037          122     apr2                    EQU             0x37                    ;
  00038          123     may2                    EQU             0x38                    ;
  00039          124     jun2                    EQU             0x39                    ;
  0003A          125     jul2                    EQU             0x3a                    ;
  0003B          126     aug2                    EQU             0x3b                    ;
  0003C          127     sep2                    EQU             0x3c                    ;
  0003D          128     oct2                    EQU             0x3d                    ;
  0003E          129     nov2                    EQU             0x3e                    ;
  0003F          130     dec2                    EQU             0x3f                    ;
                 131     ;The main operation of the program uses 1ms delays to set the shift rate
                 132     ;of the LCD display. A 16-bit value determines how many milliseconds
                 133     ;there are between shifts
                 134     ;
                 135     ;Tests indicate that the fastest shift rate that the LCD display supports is
                 136     ;500ms. Faster than this and the display becomes less clear to read.
                 137     ;
  00001          138     shift_delay_msb         EQU             0x01                    ;delay is 500ms (01F4 hex)
  000F4          139     shift_delay_lsb         EQU             0xf4
                 140     ;
                 141     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 142     ;
                 143     ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 144     ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 145     ;become lower than intended.
                 146     ;
  0000B          147     delay_1us_constant      EQU             0x0b
                 148     ;ASCII table
                 149     ;
  00061          150     character_a             EQU             0x61
  00062          151     character_b             EQU             0x62
  00063          152     character_c             EQU             0x63
  00064          153     character_d             EQU             0x64
  00065          154     character_e             EQU             0x65
  00066          155     character_f             EQU             0x66
  00067          156     character_g             EQU             0x67
  00068          157     character_h             EQU             0x68
  00069          158     character_i             EQU             0x69
  0006A          159     character_j             EQU             0x6a
  0006B          160     character_k             EQU             0x6b
  0006C          161     character_l             EQU             0x6c
  0006D          162     character_m             EQU             0x6d
  0006E          163     character_n             EQU             0x6e
  0006F          164     character_o             EQU             0x6f
  00070          165     character_p             EQU             0x70
  00071          166     character_q             EQU             0x71
  00072          167     character_r             EQU             0x72
  00073          168     character_s             EQU             0x73
  00074          169     character_t             EQU             0x74
  00075          170     character_u             EQU             0x75
  00076          171     character_v             EQU             0x76
  00077          172     character_w             EQU             0x77
  00078          173     character_x             EQU             0x78
  00079          174     character_y             EQU             0x79
  0007A          175     character_z             EQU             0x7a
  00041          176     _character_a            EQU             0x41
  00042          177     _character_b            EQU             0x42
  00043          178     _character_c            EQU             0x43
  00044          179     _character_d            EQU             0x44
  00045          180     _character_e            EQU             0x45
  00046          181     _character_f            EQU             0x46
  00047          182     _character_g            EQU             0x47
  00048          183     _character_h            EQU             0x48
  00049          184     _character_i            EQU             0x49
  0004A          185     _character_j            EQU             0x4a
  0004B          186     _character_k            EQU             0x4b
  0004C          187     _character_l            EQU             0x4c
  0004D          188     _character_m            EQU             0x4d
  0004E          189     _character_n            EQU             0x4e
  0004F          190     _character_o            EQU             0x4f
  00050          191     _character_p            EQU             0x50
  00051          192     _character_q            EQU             0x51
  00052          193     _character_r            EQU             0x52
  00053          194     _character_s            EQU             0x53
  00054          195     _character_t            EQU             0x54
  00055          196     _character_u            EQU             0x55
  00056          197     _character_v            EQU             0x56
  00057          198     _character_w            EQU             0x57
  00058          199     _character_x            EQU             0x58
  00059          200     _character_y            EQU             0x59
  0005A          201     _character_z            EQU             0x5a
  00030          202     character_0             EQU             0x30
  00031          203     character_1             EQU             0x31
  00032          204     character_2             EQU             0x32
  00033          205     character_3             EQU             0x33
  00034          206     character_4             EQU             0x34
  00035          207     character_5             EQU             0x35
  00036          208     character_6             EQU             0x36
  00037          209     character_7             EQU             0x37
  00038          210     character_8             EQU             0x38
  00039          211     character_9             EQU             0x39
  0003A          212     character_colon         EQU             0x3a
  0002E          213     character_stop          EQU             0x2e
  0003B          214     character_semi_colon    EQU             0x3b
  0002D          215     character_minus         EQU             0x2d
  0002F          216     character_divide        EQU             0x2f                    ;'/'
  0002B          217     character_plus          EQU             0x2b
  0002C          218     character_comma         EQU             0x2c
  0003C          219     character_less_than     EQU             0x3c
  0003E          220     character_greater_than  EQU             0x3e
  0003D          221     character_equals        EQU             0x3d
  00020          222     character_space         EQU             0x20
  0000D          223     character_cr            EQU             0x0d                    ;carriage return
  0003F          224     character_question      EQU             0x3f                    ;'?'
  00024          225     character_dollar        EQU             0x24
  00021          226     character_exclaim       EQU             0x21                    ;'!'
  00008          227     character_bs            EQU             0x08                    ;Back Space command character
                 228     ;
000 202E5        229     reset:                  CALL            lcd_reset
001 28001        230                             ENABLE          interrupt
002 01DFF        231                             LOAD            sd, #0xff
003 01000        232                             LOAD            s0, #0x00               ;
004 2F00A        233                             STORE           s0, hourh
005 2F007        234                             STORE           s0, minl
006 2F008        235                             STORE           s0, minh
007 2F006        236                             STORE           s0, sech
008 2F005        237                             STORE           s0, secl
009 2F00D        238                             STORE           s0, year2
00A 2F00E        239                             STORE           s0, year3
00B 2F01B        240                             STORE           s0, monh
00C 2F022        241                             STORE           s0, minb                ;;;;;;;;;;
00D 2F023        242                             STORE           s0, secb                ;;;;;;;;;;
00E 01009        243                             LOAD            s0, #0x09               ;
00F 2F009        244                             STORE           s0, hourl
010 2F021        245                             STORE           s0, hourb               ;;;;;;;;;
011 01002        246                             LOAD            s0, #0x02               ;
012 2F00C        247                             STORE           s0, year1
013 2F01D        248                             STORE           s0, dayh
014 01006        249                             LOAD            s0, #0x06               ;
015 2F01E        250                             STORE           s0, dayl
016 2F00F        251                             STORE           s0, year4
017 2F024        252                             STORE           s0, yearb               ;;;;;;;;;
018 01005        253                             LOAD            s0, #0x05               ;
019 2F01C        254                             STORE           s0, monl
01A 2F00B        255                             STORE           s0, week
01B 2F025        256                             STORE           s0, monb                ;;;;;;;;;
01C 0101A        257                             LOAD            s0, #0x1a
01D 2F026        258                             STORE           s0, dayb                ;;;;;;;;;
01E 0101F        259                             LOAD            s0, #0x1f
01F 2F028        260                             STORE           s0, jan                 ;1
020 2F02A        261                             STORE           s0, mar                 ;3
021 2F02C        262                             STORE           s0, may                 ;5
022 2F02E        263                             STORE           s0, jul                 ;7
023 2F02F        264                             STORE           s0, aug                 ;8
024 2F031        265                             STORE           s0, oct                 ;10
025 2F0EC        266                             STORE           s0, 0xdec               ;12
W: value out of range: 0xdec, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xec.
026 0101E        267                             LOAD            s0, #0x1e
027 2F02B        268                             STORE           s0, apr                 ;4
028 2F02D        269                             STORE           s0, jun                 ;6
029 2F030        270                             STORE           s0, sep                 ;9
02A 2F032        271                             STORE           s0, nov                 ;11
02B 0101C        272                             LOAD            s0, #0x1c
02C 2F0EB        273                             STORE           s0, 0xfeb               ;2
W: value out of range: 0xfeb, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xeb.
02D 01003        274                             LOAD            s0, #0x03
02E 2F034        275                             STORE           s0, jan2
02F 2F03D        276                             STORE           s0, oct2
030 01006        277                             LOAD            s0, #0x06
031 2F0B2        278                             STORE           s0, 0xfeb2
W: value out of range: 0xfeb2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xb2.
032 2F036        279                             STORE           s0, mar2
033 2F03E        280                             STORE           s0, nov2
034 01002        281                             LOAD            s0, #0x02
035 2F037        282                             STORE           s0, apr2
036 2F03A        283                             STORE           s0, jul2
037 01004        284                             LOAD            s0, #0x04
038 2F038        285                             STORE           s0, may2
039 01000        286                             LOAD            s0, #0x00
03A 2F039        287                             STORE           s0, jun2
03B 01005        288                             LOAD            s0, #0x05
03C 2F03B        289                             STORE           s0, aug2
03D 01001        290                             LOAD            s0, #0x01
03E 2F03C        291                             STORE           s0, sep2
03F 2F0C2        292                             STORE           s0, 0xdec2
W: value out of range: 0xdec2, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xc2.
040 01F00        293                             LOAD            sf, #0x00               ;
  00041          294     restart:
041 01510        295                             LOAD            s5, #0x10
042 20313        296                             CALL            lcd_cursor
043 201D9        297                             CALL            disp_msg1
044 01520        298                             LOAD            s5, #0x20
045 20313        299                             CALL            lcd_cursor
046 201F4        300                             CALL            disp_msg2
047 01335        301                             LOAD            s3, #0x35
048 2F316        302                             STORE           s3, temp
049 01300        303     blink10:                LOAD            s3, #0x00
04A 2F313        304                             STORE           s3, ms100
04B 0B313        305     blink1:                 FETCH           s3, ms100
04C 1D305        306                             COMPARE         s3, #0x05
04D 3A04B        307                             JUMP            c, blink1
04E 0152F        308                             LOAD            s5, #0x2f
04F 20313        309                             CALL            lcd_cursor
050 0B516        310                             FETCH           s5, temp
051 202D4        311                             CALL            lcd_write_data
052 01300        312                             LOAD            s3, #0x00
053 2F313        313                             STORE           s3, ms100
054 0B313        314     wait1:                  FETCH           s3, ms100
055 1D305        315                             COMPARE         s3, #0x05
056 3A054        316                             JUMP            c, wait1
057 0152F        317                             LOAD            s5, #0x2f
058 20313        318                             CALL            lcd_cursor
059 01520        319                             LOAD            s5, #0x20
05A 202D4        320                             CALL            lcd_write_data
05B 0B516        321                             FETCH           s5, temp
05C 115FF        322                             ADD             s5, #0xff
05D 2F516        323                             STORE           s5, temp
05E 1D52F        324                             COMPARE         s5, #0x2f
05F 36049        325                             JUMP            nz, blink10
060 01510        326     rrestart:               LOAD            s5, #0x10
061 20313        327                             CALL            lcd_cursor
062 20213        328                             CALL            disp_msg3
063 01520        329                             LOAD            s5, #0x20
064 20313        330                             CALL            lcd_cursor
065 2022A        331                             CALL            disp_msg4
066 01335        332                             LOAD            s3, #0x35
067 2F316        333                             STORE           s3, temp
068 01300        334     blink20:                LOAD            s3, #0x00
069 2F313        335                             STORE           s3, ms100
06A 0B313        336     blink2:                 FETCH           s3, ms100
06B 1D305        337                             COMPARE         s3, #0x05
06C 3A06A        338                             JUMP            c, blink2
06D 0152F        339                             LOAD            s5, #0x2f
06E 20313        340                             CALL            lcd_cursor
06F 0B516        341                             FETCH           s5, temp
070 202D4        342                             CALL            lcd_write_data
071 01300        343                             LOAD            s3, #0x00
072 2F313        344                             STORE           s3, ms100
073 0B313        345     wait2:                  FETCH           s3, ms100
074 1D305        346                             COMPARE         s3, #0x05
075 3A073        347                             JUMP            c, wait2
076 0152F        348                             LOAD            s5, #0x2f
077 20313        349                             CALL            lcd_cursor
078 01520        350                             LOAD            s5, #0x20
079 202D4        351                             CALL            lcd_write_data
07A 0B516        352                             FETCH           s5, temp
07B 115FF        353                             ADD             s5, #0xff
07C 2F516        354                             STORE           s5, temp
07D 1D52F        355                             COMPARE         s5, #0x2f
07E 36068        356                             JUMP            nz, blink20
07F 01000        357                             LOAD            s0, #0x00
080 2F002        358                             STORE           s0, led_pattern
081 2F003        359                             STORE           s0, mode
082 2F019        360                             STORE           s0, blink_flag
083 2F013        361                             STORE           s0, ms100
084 01510        362                             LOAD            s5, #0x10
085 20313        363                             CALL            lcd_cursor
086 20247        364                             CALL            disp_msg5
087 01520        365                             LOAD            s5, #0x20
088 20313        366                             CALL            lcd_cursor
089 20265        367                             CALL            disp_msg6
08A 0B013        368     pause:                  FETCH           s0, ms100
08B 1D032        369                             COMPARE         s0, #0x32
08C 3A08A        370                             JUMP            c, pause
08D 202F6        371                             CALL            lcd_clear
08E 09000        372                             INPUT           s0, 0x00
08F 2F01A        373                             STORE           s0, disp_flag2
090 2F013        374                             STORE           s0, ms100
  00091          375     loop:
091 0B021        376                             FETCH           s0, hourb
092 201D2        377                             CALL            b2bcd
093 2F009        378                             STORE           s0, hourl
094 2F10A        379                             STORE           s1, hourh
095 0B022        380                             FETCH           s0, minb
096 201D2        381                             CALL            b2bcd
097 2F007        382                             STORE           s0, minl
098 2F108        383                             STORE           s1, minh
099 0B023        384                             FETCH           s0, secb
09A 201D2        385                             CALL            b2bcd
09B 2F005        386                             STORE           s0, secl
09C 2F106        387                             STORE           s1, sech
09D 0B026        388                             FETCH           s0, dayb
09E 201D2        389                             CALL            b2bcd
09F 2F01E        390                             STORE           s0, dayl
0A0 2F11D        391                             STORE           s1, dayh
0A1 0B025        392                             FETCH           s0, monb
0A2 201D2        393                             CALL            b2bcd
0A3 2F01C        394                             STORE           s0, monl
0A4 2F11B        395                             STORE           s1, monh
0A5 0B024        396                             FETCH           s0, yearb
0A6 201D2        397                             CALL            b2bcd
0A7 2F00F        398                             STORE           s0, year4
0A8 2F10E        399                             STORE           s1, year3
0A9 03FFF        400                             AND             sf, #0xff
0AA 36123        401                             JUMP            nz, skip1
                 402     ;;;DISP HH
0AB 01511        403                             LOAD            s5, #0x11
0AC 20313        404                             CALL            lcd_cursor
0AD 0B303        405                             FETCH           s3, mode
0AE 1D301        406                             COMPARE         s3, #0x01
0AF 360B3        407                             JUMP            nz, dsp_hh
0B0 0B311        408                             FETCH           s3, ms500
0B1 0D301        409                             TEST            s3, #0x01
0B2 360BA        410                             JUMP            nz, space7
0B3 0B50A        411     dsp_hh:                 FETCH           s5, hourh
0B4 11530        412                             ADD             s5, #0x30
0B5 202D4        413                             CALL            lcd_write_data
0B6 0B509        414                             FETCH           s5, hourl
0B7 11530        415                             ADD             s5, #0x30
0B8 202D4        416                             CALL            lcd_write_data
0B9 220BC        417                             JUMP            mode_2
0BA 202A0        418     space7:                 CALL            disp_space
0BB 202A0        419                             CALL            disp_space
  000BC          420     mode_2:
                 421     ;;;DISP MM
0BC 01514        422                             LOAD            s5, #0x14
0BD 20313        423                             CALL            lcd_cursor
0BE 0B303        424                             FETCH           s3, mode
0BF 1D302        425                             COMPARE         s3, #0x02
0C0 360C4        426                             JUMP            nz, dsp_mm
0C1 0B311        427                             FETCH           s3, ms500
0C2 0D301        428                             TEST            s3, #0x01
0C3 360CB        429                             JUMP            nz, space6
0C4 0B508        430     dsp_mm:                 FETCH           s5, minh
0C5 11530        431                             ADD             s5, #0x30
0C6 202D4        432                             CALL            lcd_write_data
0C7 0B507        433                             FETCH           s5, minl
0C8 11530        434                             ADD             s5, #0x30
0C9 202D4        435                             CALL            lcd_write_data
0CA 220CD        436                             JUMP            mode_3
0CB 202A0        437     space6:                 CALL            disp_space
0CC 202A0        438                             CALL            disp_space
  000CD          439     mode_3:
                 440     ;;;DISP SS
0CD 01517        441                             LOAD            s5, #0x17
0CE 20313        442                             CALL            lcd_cursor
0CF 0B303        443                             FETCH           s3, mode
0D0 1D303        444                             COMPARE         s3, #0x03
0D1 360D5        445                             JUMP            nz, dsp_ss
0D2 0B311        446                             FETCH           s3, ms500
0D3 0D301        447                             TEST            s3, #0x01
0D4 360DC        448                             JUMP            nz, space5
0D5 0B506        449     dsp_ss:                 FETCH           s5, sech
0D6 11530        450                             ADD             s5, #0x30
0D7 202D4        451                             CALL            lcd_write_data
0D8 0B505        452                             FETCH           s5, secl
0D9 11530        453                             ADD             s5, #0x30
0DA 202D4        454                             CALL            lcd_write_data
0DB 220DE        455                             JUMP            mode_4
0DC 202A0        456     space5:                 CALL            disp_space
0DD 202A0        457                             CALL            disp_space
  000DE          458     mode_4:
                 459     ;;;DISP week
0DE 0151C        460                             LOAD            s5, #0x1c
0DF 20313        461                             CALL            lcd_cursor
0E0 0B30B        462                             FETCH           s3, week
0E1 1D300        463                             COMPARE         s3, #0x00
0E2 360EA        464                             JUMP            nz, mon
0E3 01553        465                             LOAD            s5, #_character_s
0E4 202D4        466                             CALL            lcd_write_data
0E5 01575        467                             LOAD            s5, #character_u
0E6 202D4        468                             CALL            lcd_write_data
0E7 0156E        469                             LOAD            s5, #character_n
0E8 202D4        470                             CALL            lcd_write_data
0E9 22123        471                             JUMP            test_bit0
0EA 0B30B        472     mon:                    FETCH           s3, week
0EB 1D301        473                             COMPARE         s3, #0x01
0EC 360F4        474                             JUMP            nz, tue
0ED 0154D        475                             LOAD            s5, #_character_m
0EE 202D4        476                             CALL            lcd_write_data
0EF 0156F        477                             LOAD            s5, #character_o
0F0 202D4        478                             CALL            lcd_write_data
0F1 0156E        479                             LOAD            s5, #character_n
0F2 202D4        480                             CALL            lcd_write_data
0F3 22123        481                             JUMP            test_bit0
0F4 0B30B        482     tue:                    FETCH           s3, week
0F5 1D302        483                             COMPARE         s3, #0x02
0F6 360FE        484                             JUMP            nz, wed
0F7 01554        485                             LOAD            s5, #_character_t
0F8 202D4        486                             CALL            lcd_write_data
0F9 01575        487                             LOAD            s5, #character_u
0FA 202D4        488                             CALL            lcd_write_data
0FB 01565        489                             LOAD            s5, #character_e
0FC 202D4        490                             CALL            lcd_write_data
0FD 22123        491                             JUMP            test_bit0
0FE 0B30B        492     wed:                    FETCH           s3, week
0FF 1D303        493                             COMPARE         s3, #0x03
100 36108        494                             JUMP            nz, thu
101 01557        495                             LOAD            s5, #_character_w
102 202D4        496                             CALL            lcd_write_data
103 01565        497                             LOAD            s5, #character_e
104 202D4        498                             CALL            lcd_write_data
105 01564        499                             LOAD            s5, #character_d
106 202D4        500                             CALL            lcd_write_data
107 22123        501                             JUMP            test_bit0
108 0B30B        502     thu:                    FETCH           s3, week
109 1D304        503                             COMPARE         s3, #0x04
10A 36112        504                             JUMP            nz, fri
10B 01554        505                             LOAD            s5, #_character_t
10C 202D4        506                             CALL            lcd_write_data
10D 01568        507                             LOAD            s5, #character_h
10E 202D4        508                             CALL            lcd_write_data
10F 01575        509                             LOAD            s5, #character_u
110 202D4        510                             CALL            lcd_write_data
111 22123        511                             JUMP            test_bit0
112 0B30B        512     fri:                    FETCH           s3, week
113 1D305        513                             COMPARE         s3, #0x05
114 3611C        514                             JUMP            nz, sat
115 01546        515                             LOAD            s5, #_character_f
116 202D4        516                             CALL            lcd_write_data
117 01572        517                             LOAD            s5, #character_r
118 202D4        518                             CALL            lcd_write_data
119 01569        519                             LOAD            s5, #character_i
11A 202D4        520                             CALL            lcd_write_data
11B 22123        521                             JUMP            test_bit0
11C 01553        522     sat:                    LOAD            s5, #_character_s
11D 202D4        523                             CALL            lcd_write_data
11E 01561        524                             LOAD            s5, #character_a
11F 202D4        525                             CALL            lcd_write_data
120 01574        526                             LOAD            s5, #character_t
121 202D4        527                             CALL            lcd_write_data
122 22123        528                             JUMP            test_bit0
  00123          529     test_bit0:
  00123          530     rotary_press1:
  00123          531     rotary_press2:
  00123          532     skip1:
                 533     ;;;DISP month
123 01526        534                             LOAD            s5, #0x26
124 20313        535                             CALL            lcd_cursor
125 0B303        536                             FETCH           s3, mode
126 1D304        537                             COMPARE         s3, #0x04
127 3612B        538                             JUMP            nz, dsp_mon
128 0B311        539                             FETCH           s3, ms500
129 0D301        540                             TEST            s3, #0x01
12A 36132        541                             JUMP            nz, space4
12B 0B51B        542     dsp_mon:                FETCH           s5, monh
12C 11530        543                             ADD             s5, #0x30
12D 202D4        544                             CALL            lcd_write_data
12E 0B51C        545                             FETCH           s5, monl
12F 11530        546                             ADD             s5, #0x30
130 202D4        547                             CALL            lcd_write_data
131 22134        548                             JUMP            mode_5
132 202A0        549     space4:                 CALL            disp_space
133 202A0        550                             CALL            disp_space
  00134          551     mode_5:
                 552     ;;;DISP day
134 01529        553                             LOAD            s5, #0x29
135 20313        554                             CALL            lcd_cursor
136 0B303        555                             FETCH           s3, mode
137 1D305        556                             COMPARE         s3, #0x05
138 3613C        557                             JUMP            nz, dsp_dd
139 0B311        558                             FETCH           s3, ms500
13A 0D301        559                             TEST            s3, #0x01
13B 36143        560                             JUMP            nz, space3
13C 0B51D        561     dsp_dd:                 FETCH           s5, dayh
13D 11530        562                             ADD             s5, #0x30
13E 202D4        563                             CALL            lcd_write_data
13F 0B51E        564                             FETCH           s5, dayl
140 11530        565                             ADD             s5, #0x30
141 202D4        566                             CALL            lcd_write_data
142 22145        567                             JUMP            mode_6
143 202A0        568     space3:                 CALL            disp_space
144 202A0        569                             CALL            disp_space
  00145          570     mode_6:
                 571     ;;;DISP year
145 0152C        572                             LOAD            s5, #0x2c
146 20313        573                             CALL            lcd_cursor
147 0B303        574                             FETCH           s3, mode
148 1D306        575                             COMPARE         s3, #0x06
149 3614D        576                             JUMP            nz, dsp_yy
14A 0B311        577                             FETCH           s3, ms500
14B 0D301        578                             TEST            s3, #0x01
14C 3615A        579                             JUMP            nz, space2
14D 0B50C        580     dsp_yy:                 FETCH           s5, year1
14E 11530        581                             ADD             s5, #0x30
14F 202D4        582                             CALL            lcd_write_data
150 0B50D        583                             FETCH           s5, year2
151 11530        584                             ADD             s5, #0x30
152 202D4        585                             CALL            lcd_write_data
153 0B50E        586                             FETCH           s5, year3
154 11530        587                             ADD             s5, #0x30
155 202D4        588                             CALL            lcd_write_data
156 0B50F        589                             FETCH           s5, year4
157 11530        590                             ADD             s5, #0x30
158 202D4        591                             CALL            lcd_write_data
159 2215E        592                             JUMP            mode_end
15A 202A0        593     space2:                 CALL            disp_space
15B 202A0        594                             CALL            disp_space
15C 202A0        595                             CALL            disp_space
15D 202A0        596                             CALL            disp_space
  0015E          597     mode_end:
15E 0B025        598                             FETCH           s0, monb
15F 01127        599                             LOAD            s1, #dmax
160 10100        600                             ADD             s1, s0
161 0A210        601                             FETCH           s2, @s1                 ;;28
162 1D002        602                             COMPARE         s0, #0x02               ;;Y
163 36168        603                             JUMP            nz, no_feb
164 0B124        604                             FETCH           s1, yearb
165 03103        605                             AND             s1, #0x03
166 36168        606                             JUMP            nz, no_feb
167 11201        607                             ADD             s2, #0x01
  00168          608     no_runnian:
168 2F227        609     no_feb:                 STORE           s2, dmax
169 0B126        610                             FETCH           s1, dayb
16A 1C210        611                             COMPARE         s2, s1
16B 3E16D        612                             JUMP            nc, under
16C 2F226        613                             STORE           s2, dayb
  0016D          614     under:
16D 0B11F        615                             FETCH           s1, day_up
16E 02110        616                             AND             s1, s1
16F 32188        617                             JUMP            z, no_day_up
170 0B126        618                             FETCH           s1, dayb
171 11101        619                             ADD             s1, #0x01
172 2F126        620                             STORE           s1, dayb
173 0B227        621                             FETCH           s2, dmax
174 11201        622                             ADD             s2, #0x01
175 1C120        623                             COMPARE         s1, s2
176 36188        624                             JUMP            nz, no_mon_up
177 01101        625                             LOAD            s1, #0x01
178 2F126        626                             STORE           s1, dayb
179 0B125        627                             FETCH           s1, monb
17A 11101        628                             ADD             s1, #0x01
17B 2F125        629                             STORE           s1, monb
17C 1D10D        630                             COMPARE         s1, #0x0d
17D 36188        631                             JUMP            nz, no_year_up
17E 01101        632                             LOAD            s1, #0x01
17F 2F125        633                             STORE           s1, monb
180 0B124        634                             FETCH           s1, yearb
181 11101        635                             ADD             s1, #0x01
182 2F124        636                             STORE           s1, yearb
183 1D164        637                             COMPARE         s1, #0x64
184 36188        638                             JUMP            nz, no_year_up
185 01100        639                             LOAD            s1, #0x00
186 2F124        640                             STORE           s1, yearb
187 22188        641                             JUMP            no_year_up
  00188          642     no_mon_up:
  00188          643     no_day_up:
  00188          644     no_year_up:
188 01000        645                             LOAD            s0, #0x00
189 2F01F        646                             STORE           s0, day_up
18A 010EC        647                             LOAD            s0, #0xdec
W: value out of range: 0xdec, allowed range is [0x0,0xff] (trimmed to 8 bits) which makes it 0xec.
18B 0B225        648                             FETCH           s2, monb
18C 10020        649                             ADD             s0, s2
18D 0A100        650                             FETCH           s1, @s0                 ;;;K
18E 0B024        651                             FETCH           s0, yearb
18F 10100        652                             ADD             s1, s0                  ;;;;;;;K+Y
190 1D203        653                             COMPARE         s2, #0x03
191 3A193        654                             JUMP            c, rn
192 11001        655                             ADD             s0, #0x01               ;;;;100+Y  >2(3..12)
193 11063        656     rn:                     ADD             s0, #0x63               ;;;;;99+Y   1,2
194 1400E        657                             SR0             s0
195 1400E        658                             SR0             s0                      ;;;/4
196 10010        659                             ADD             s0, s1
197 11006        660                             ADD             s0, #0x06
198 0B226        661                             FETCH           s2, dayb
199 10020        662                             ADD             s0, s2
19A 110F9        663     mod7:                   ADD             s0, #0xf9
19B 3E19D        664                             JUMP            nc, m7_end
19C 2219A        665                             JUMP            mod7
19D 11007        666     m7_end:                 ADD             s0, #0x07
19E 2F00B        667                             STORE           s0, week
19F 0B003        668                             FETCH           s0, mode
1A0 030FF        669                             AND             s0, #0xff
1A1 361A9        670                             JUMP            nz, setup
                 671     ;;;RUN
1A2 01520        672                             LOAD            s5, #0x20
1A3 20313        673                             CALL            lcd_cursor
1A4 0B518        674                             FETCH           s5, disp_flag
1A5 202D4        675                             CALL            lcd_write_data
1A6 202D4        676                             CALL            lcd_write_data
1A7 202D4        677                             CALL            lcd_write_data
1A8 221B1        678                             JUMP            modeupdate
  001A9          679     setup:
                 680     ;;;SET
1A9 01520        681                             LOAD            s5, #0x20
1AA 20313        682                             CALL            lcd_cursor
1AB 01553        683                             LOAD            s5, #0x53               ;;;;;;;;;;;;;;;;;;;;;;;    S
1AC 202D4        684                             CALL            lcd_write_data
1AD 01545        685                             LOAD            s5, #0x45               ;;;;;;;;;;;;;;;;;;;;;;;    E
1AE 202D4        686                             CALL            lcd_write_data
1AF 01554        687                             LOAD            s5, #0x54               ;;;;;;;;;;;;;;;;;;;;;;;    T
1B0 202D4        688                             CALL            lcd_write_data
1B1 0B003        689     modeupdate:             FETCH           s0, mode
1B2 2F019        690                             STORE           s0, blink_flag
  001B3          691     nochange:
1B3 09000        692                             INPUT           s0, 0x00
1B4 0B11A        693                             FETCH           s1, disp_flag2
1B5 06100        694                             XOR             s1, s0
1B6 36041        695                             JUMP            nz, restart
1B7 2F01A        696                             STORE           s0, disp_flag2
1B8 0B025        697                             FETCH           s0, monb
1B9 1D005        698                             COMPARE         s0, #0x05
1BA 361C1        699                             JUMP            nz, chk_sf
1BB 0B026        700                             FETCH           s0, dayb
1BC 1D011        701                             COMPARE         s0, #0x11
1BD 361C1        702                             JUMP            nz, chk_sf
1BE 0B022        703                             FETCH           s0, minb
1BF 1D000        704                             COMPARE         s0, #0x00
1C0 321C5        705                             JUMP            z, msg7
1C1 1DFFF        706     chk_sf:                 COMPARE         sf, #0xff
1C2 361CF        707                             JUMP            nz, no_bd
1C3 202E5        708                             CALL            lcd_reset
1C4 221CF        709                             JUMP            no_bd
1C5 01510        710     msg7:                   LOAD            s5, #0x10
1C6 20313        711                             CALL            lcd_cursor
1C7 20282        712                             CALL            disp_msg7               ;
1C8 0B013        713                             FETCH           s0, ms100
1C9 1D032        714                             COMPARE         s0, #0x32
1CA 3A1CD        715                             JUMP            c, wait
1CB 01F00        716                             LOAD            sf, #0x00
1CC 22041        717                             JUMP            restart
1CD 01FFF        718     wait:                   LOAD            sf, #0xff
1CE 22091        719                             JUMP            loop
1CF 01F00        720     no_bd:                  LOAD            sf, #0x00
1D0 2FF13        721                             STORE           sf, ms100
1D1 22091        722                             JUMP            loop
                 723     ;;;;;;;;;s0---BINARY, s1---BCD_H, s0---BCD_L
1D2 01100        724     b2bcd:                  LOAD            s1, #0x00               ;
1D3 110F6        725     bcd_lp:                 ADD             s0, #0xf6
1D4 3E1D7        726                             JUMP            nc, h_end
1D5 11101        727                             ADD             s1, #0x01               ;
1D6 221D3        728                             JUMP            bcd_lp
1D7 1100A        729     h_end:                  ADD             s0, #0x0a
1D8 25000        730                             RETURN
                 731     ;
                 732     ;     normal_mode: INPUT s0, switch_port               ;Read switches and buttons and directly drive LEDs
                 733     ;                  OUTPUT s0, LED_port
                 734     ;                  RETURN
                 735     ;
                 736     ;
                 737     ;
                 738     ;This procedure will poll the status of the rotary encoder.
                 739     ;If rotation occurs, then the LED pattern will adjust appropriately.
                 740     ;
                 741     ;    rotate_mode: FETCH sA, LED_pattern               ;last known position
                 742     ;                 FETCH s0, rotary_status             ;check status of rotation
                 743     ;                 TEST s0, 80                         ;test flag
                 744     ;                 JUMP Z, update_pattern
                 745     ;                 AND s0, 7F                          ;clear flag
                 746     ;                 STORE s0, rotary_status
                 747     ;                 TEST s0, rotary_left                ;event occurred so update pattern
                 748     ;                 JUMP Z, move_right
                 749     ;                 RL sA
                 750     ;                 JUMP update_pattern
                 751     ;     move_right: RR sA
                 752     ; update_pattern: STORE sA, LED_pattern
                 753     ;                 OUTPUT sA, LED_port                 ;drive LEDs with current pattern
                 754     ;                 RETURN
                 755     ;                 ;
                 756     ;
                 757     ;
                 758     ;
                 759     ;**************************************************************************************
                 760     ;LCD text messages
                 761     ;**************************************************************************************
                 762     ;
                 763     ;
                 764     ;Display 'SPARTAN-3E STARTER KIT' on LCD at current cursor position
                 765     ;
                 766     ;
  001D9          767     disp_msg1:
1D9 202A0        768                             CALL            disp_space
1DA 01541        769                             LOAD            s5, #_character_a
1DB 202D4        770                             CALL            lcd_write_data
1DC 202A0        771                             CALL            disp_space
1DD 01543        772                             LOAD            s5, #_character_c
1DE 202D4        773                             CALL            lcd_write_data
1DF 0156C        774                             LOAD            s5, #character_l
1E0 202D4        775                             CALL            lcd_write_data
1E1 0156F        776                             LOAD            s5, #character_o
1E2 202D4        777                             CALL            lcd_write_data
1E3 01563        778                             LOAD            s5, #character_c
1E4 202D4        779                             CALL            lcd_write_data
1E5 0156B        780                             LOAD            s5, #character_k
1E6 202D4        781                             CALL            lcd_write_data
1E7 202A0        782                             CALL            disp_space
1E8 01542        783                             LOAD            s5, #_character_b
1E9 202D4        784                             CALL            lcd_write_data
1EA 01561        785                             LOAD            s5, #character_a
1EB 202D4        786                             CALL            lcd_write_data
1EC 01573        787                             LOAD            s5, #character_s
1ED 202D4        788                             CALL            lcd_write_data
1EE 01565        789                             LOAD            s5, #character_e
1EF 202D4        790                             CALL            lcd_write_data
1F0 01564        791                             LOAD            s5, #character_d
1F1 202D4        792                             CALL            lcd_write_data
1F2 202A0        793                             CALL            disp_space
1F3 25000        794                             RETURN
                 795     ;
                 796     ;
                 797     ;
1F4 01553        798     disp_msg2:              LOAD            s5, #_character_s
1F5 202D4        799                             CALL            lcd_write_data
1F6 01533        800                             LOAD            s5, #character_3
1F7 202D4        801                             CALL            lcd_write_data
1F8 01545        802                             LOAD            s5, #_character_e
1F9 202D4        803                             CALL            lcd_write_data
1FA 202A0        804                             CALL            disp_space
1FB 01553        805                             LOAD            s5, #_character_s
1FC 202D4        806                             CALL            lcd_write_data
1FD 01574        807                             LOAD            s5, #character_t
1FE 202D4        808                             CALL            lcd_write_data
1FF 01561        809                             LOAD            s5, #character_a
200 202D4        810                             CALL            lcd_write_data
201 01572        811                             LOAD            s5, #character_r
202 202D4        812                             CALL            lcd_write_data
203 01574        813                             LOAD            s5, #character_t
204 202D4        814                             CALL            lcd_write_data
205 01565        815                             LOAD            s5, #character_e
206 202D4        816                             CALL            lcd_write_data
207 01572        817                             LOAD            s5, #character_r
208 202D4        818                             CALL            lcd_write_data
209 202A0        819                             CALL            disp_space
20A 0154B        820                             LOAD            s5, #_character_k
20B 202D4        821                             CALL            lcd_write_data
20C 01569        822                             LOAD            s5, #character_i
20D 202D4        823                             CALL            lcd_write_data
20E 01574        824                             LOAD            s5, #character_t
20F 202D4        825                             CALL            lcd_write_data
210 01533        826                             LOAD            s5, #character_3
211 202D4        827                             CALL            lcd_write_data
212 25000        828                             RETURN
213 202A0        829     disp_msg3:              CALL            disp_space
214 202A0        830                             CALL            disp_space
215 202A0        831                             CALL            disp_space
216 202A0        832                             CALL            disp_space
217 202A0        833                             CALL            disp_space
218 01558        834                             LOAD            s5, #_character_x
219 202D4        835                             CALL            lcd_write_data
21A 01569        836                             LOAD            s5, #character_i
21B 202D4        837                             CALL            lcd_write_data
21C 0156C        838                             LOAD            s5, #character_l
21D 202D4        839                             CALL            lcd_write_data
21E 01569        840                             LOAD            s5, #character_i
21F 202D4        841                             CALL            lcd_write_data
220 0156E        842                             LOAD            s5, #character_n
221 202D4        843                             CALL            lcd_write_data
222 01578        844                             LOAD            s5, #character_x
223 202D4        845                             CALL            lcd_write_data
224 202A0        846                             CALL            disp_space
225 202A0        847                             CALL            disp_space
226 202A0        848                             CALL            disp_space
227 202A0        849                             CALL            disp_space
228 202A0        850                             CALL            disp_space
229 25000        851                             RETURN
22A 01550        852     disp_msg4:              LOAD            s5, #_character_p
22B 202D4        853                             CALL            lcd_write_data
22C 01569        854                             LOAD            s5, #character_i
22D 202D4        855                             CALL            lcd_write_data
22E 01563        856                             LOAD            s5, #character_c
22F 202D4        857                             CALL            lcd_write_data
230 0156F        858                             LOAD            s5, #character_o
231 202D4        859                             CALL            lcd_write_data
232 01542        860                             LOAD            s5, #_character_b
233 202D4        861                             CALL            lcd_write_data
234 0156C        862                             LOAD            s5, #character_l
235 202D4        863                             CALL            lcd_write_data
236 01561        864                             LOAD            s5, #character_a
237 202D4        865                             CALL            lcd_write_data
238 0157A        866                             LOAD            s5, #character_z
239 202D4        867                             CALL            lcd_write_data
23A 01565        868                             LOAD            s5, #character_e
23B 202D4        869                             CALL            lcd_write_data
23C 202A0        870                             CALL            disp_space
23D 01554        871                             LOAD            s5, #_character_t
23E 202D4        872                             CALL            lcd_write_data
23F 01565        873                             LOAD            s5, #character_e
240 202D4        874                             CALL            lcd_write_data
241 01573        875                             LOAD            s5, #character_s
242 202D4        876                             CALL            lcd_write_data
243 01574        877                             LOAD            s5, #character_t
244 202D4        878                             CALL            lcd_write_data
245 202A0        879                             CALL            disp_space
246 25000        880                             RETURN
247 01550        881     disp_msg5:              LOAD            s5, #_character_p
248 202D4        882                             CALL            lcd_write_data
249 01572        883                             LOAD            s5, #character_r
24A 202D4        884                             CALL            lcd_write_data
24B 01565        885                             LOAD            s5, #character_e
24C 202D4        886                             CALL            lcd_write_data
24D 01573        887                             LOAD            s5, #character_s
24E 202D4        888                             CALL            lcd_write_data
24F 01573        889                             LOAD            s5, #character_s
250 202D4        890                             CALL            lcd_write_data
251 202A0        891                             CALL            disp_space
252 01526        892                             LOAD            s5, #0x26
253 202D4        893                             CALL            lcd_write_data
254 202A0        894                             CALL            disp_space
255 01554        895                             LOAD            s5, #_character_t
256 202D4        896                             CALL            lcd_write_data
257 01575        897                             LOAD            s5, #character_u
258 202D4        898                             CALL            lcd_write_data
259 01572        899                             LOAD            s5, #character_r
25A 202D4        900                             CALL            lcd_write_data
25B 0156E        901                             LOAD            s5, #character_n
25C 202D4        902                             CALL            lcd_write_data
25D 202A0        903                             CALL            disp_space
25E 01574        904                             LOAD            s5, #character_t
25F 202D4        905                             CALL            lcd_write_data
260 01568        906                             LOAD            s5, #character_h
261 202D4        907                             CALL            lcd_write_data
262 01565        908                             LOAD            s5, #character_e
263 202D4        909                             CALL            lcd_write_data
264 25000        910                             RETURN
265 202A0        911     disp_msg6:              CALL            disp_space
266 01545        912                             LOAD            s5, #_character_e
267 202D4        913                             CALL            lcd_write_data
268 0156E        914                             LOAD            s5, #character_n
269 202D4        915                             CALL            lcd_write_data
26A 01563        916                             LOAD            s5, #character_c
26B 202D4        917                             CALL            lcd_write_data
26C 0156F        918                             LOAD            s5, #character_o
26D 202D4        919                             CALL            lcd_write_data
26E 01564        920                             LOAD            s5, #character_d
26F 202D4        921                             CALL            lcd_write_data
270 01565        922                             LOAD            s5, #character_e
271 202D4        923                             CALL            lcd_write_data
272 01572        924                             LOAD            s5, #character_r
273 202D4        925                             CALL            lcd_write_data
274 202A0        926                             CALL            disp_space
275 01574        927                             LOAD            s5, #character_t
276 202D4        928                             CALL            lcd_write_data
277 0156F        929                             LOAD            s5, #character_o
278 202D4        930                             CALL            lcd_write_data
279 202A0        931                             CALL            disp_space
27A 01553        932                             LOAD            s5, #_character_s
27B 202D4        933                             CALL            lcd_write_data
27C 01565        934                             LOAD            s5, #character_e
27D 202D4        935                             CALL            lcd_write_data
27E 01574        936                             LOAD            s5, #character_t
27F 202D4        937                             CALL            lcd_write_data
280 202A0        938                             CALL            disp_space
281 25000        939                             RETURN
282 01548        940     disp_msg7:              LOAD            s5, #_character_h
283 202D4        941                             CALL            lcd_write_data
284 01561        942                             LOAD            s5, #character_a
285 202D4        943                             CALL            lcd_write_data
286 01570        944                             LOAD            s5, #character_p
287 202D4        945                             CALL            lcd_write_data
288 01570        946                             LOAD            s5, #character_p
289 202D4        947                             CALL            lcd_write_data
28A 01579        948                             LOAD            s5, #character_y
28B 202D4        949                             CALL            lcd_write_data
28C 202A0        950                             CALL            disp_space
28D 01542        951                             LOAD            s5, #_character_b
28E 202D4        952                             CALL            lcd_write_data
28F 01569        953                             LOAD            s5, #character_i
290 202D4        954                             CALL            lcd_write_data
291 01572        955                             LOAD            s5, #character_r
292 202D4        956                             CALL            lcd_write_data
293 01574        957                             LOAD            s5, #character_t
294 202D4        958                             CALL            lcd_write_data
295 01568        959                             LOAD            s5, #character_h
296 202D4        960                             CALL            lcd_write_data
297 01564        961                             LOAD            s5, #character_d
298 202D4        962                             CALL            lcd_write_data
299 01561        963                             LOAD            s5, #character_a
29A 202D4        964                             CALL            lcd_write_data
29B 01579        965                             LOAD            s5, #character_y
29C 202D4        966                             CALL            lcd_write_data
29D 01521        967                             LOAD            s5, #0x21
29E 202D4        968                             CALL            lcd_write_data
29F 25000        969                             RETURN
                 970     ;
                 971     ;Display a space on LCD at current cursor position
                 972     ;
                 973     ;
2A0 01520        974     disp_space:             LOAD            s5, #character_space
2A1 202D4        975                             CALL            lcd_write_data
2A2 25000        976                             RETURN
                 977     ;
                 978     ;
                 979     ;
                 980     ;
                 981     ;**************************************************************************************
                 982     ;Software delay routines
                 983     ;**************************************************************************************
                 984     ;
                 985     ;
                 986     ;
                 987     ;Delay of 1us.
                 988     ;
                 989     ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 990     ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 991     ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 992     ;
                 993     ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 994     ;
                 995     ;Registers used s0
                 996     ;
2A3 0100B        997     delay_1us:              LOAD            s0, #delay_1us_constant
2A4 19001        998     wait_1us:               SUB             s0, #0x01
2A5 362A4        999                             JUMP            nz, wait_1us
2A6 25000       1000                             RETURN
                1001     ;
                1002     ;Delay of 40us.
                1003     ;
                1004     ;Registers used s0, s1
                1005     ;
2A7 01128       1006     delay_40us:             LOAD            s1, #0x28               ;40 x 1us = 40us
2A8 202A3       1007     wait_40us:              CALL            delay_1us
2A9 19101       1008                             SUB             s1, #0x01
2AA 362A8       1009                             JUMP            nz, wait_40us
2AB 25000       1010                             RETURN
                1011     ;
                1012     ;
                1013     ;Delay of 1ms.
                1014     ;
                1015     ;Registers used s0, s1, s2
                1016     ;
2AC 01219       1017     delay_1ms:              LOAD            s2, #0x19               ;25 x 40us = 1ms
2AD 202A7       1018     wait_1ms:               CALL            delay_40us
2AE 19201       1019                             SUB             s2, #0x01
2AF 362AD       1020                             JUMP            nz, wait_1ms
2B0 25000       1021                             RETURN
                1022     ;
                1023     ;Delay of 20ms.
                1024     ;
                1025     ;Delay of 20ms used during initialisation.
                1026     ;
                1027     ;Registers used s0, s1, s2, s3
                1028     ;
2B1 01314       1029     delay_20ms:             LOAD            s3, #0x14               ;20 x 1ms = 20ms
2B2 202AC       1030     wait_20ms:              CALL            delay_1ms
2B3 19301       1031                             SUB             s3, #0x01
2B4 362B2       1032                             JUMP            nz, wait_20ms
2B5 25000       1033                             RETURN
                1034     ;
                1035     ;Delay of approximately 1 second.
                1036     ;
                1037     ;Registers used s0, s1, s2, s3, s4
                1038     ;
2B6 01432       1039     delay_1s:               LOAD            s4, #0x32               ;50 x 20ms = 1000ms
2B7 202B1       1040     wait_1s:                CALL            delay_20ms
2B8 19401       1041                             SUB             s4, #0x01
2B9 362B7       1042                             JUMP            nz, wait_1s
2BA 25000       1043                             RETURN
                1044     ;
                1045     ;
                1046     ;
                1047     ;**************************************************************************************
                1048     ;LCD Character Module Routines
                1049     ;**************************************************************************************
                1050     ;
                1051     ;LCD module is a 16 character by 2 line display but all displays are very similar
                1052     ;The 4-wire data interface will be used (DB4 to DB7).
                1053     ;
                1054     ;The LCD modules are relatively slow and software delay loops are used to slow down
                1055     ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                1056     ;a different section (see above in this case).
                1057     ;
                1058     ;
                1059     ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                1060     ;
                1061     ;Register s4 should define the current state of the LCD output port.
                1062     ;
                1063     ;Registers used s0, s4
                1064     ;
2BB 07401       1065     lcd_pulse_e:            XOR             s4, #lcd_e              ;E=1
2BC 2D440       1066                             OUTPUT          s4, lcd_output_port
2BD 202A3       1067                             CALL            delay_1us
2BE 07401       1068                             XOR             s4, #lcd_e              ;E=0
2BF 2D440       1069                             OUTPUT          s4, lcd_output_port
2C0 25000       1070                             RETURN
                1071     ;
                1072     ;Write 4-bit instruction to LCD display.
                1073     ;
                1074     ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                1075     ;Note that this routine does not release the master enable but as it is only
                1076     ;used during initialisation and as part of the 8-bit instruction write it
                1077     ;should be acceptable.
                1078     ;
                1079     ;Registers used s4
                1080     ;
2C1 034F8       1081     lcd_write_inst4:        AND             s4, #0xf8               ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
2C2 2D440       1082                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
2C3 202BB       1083                             CALL            lcd_pulse_e
2C4 25000       1084                             RETURN
                1085     ;
                1086     ;
                1087     ;Write 8-bit instruction to LCD display.
                1088     ;
                1089     ;The 8-bit instruction should be provided in register s5.
                1090     ;Instructions are written using the following sequence
                1091     ; Upper nibble
                1092     ; wait >1us
                1093     ; Lower nibble
                1094     ; wait >40us
                1095     ;
                1096     ;Registers used s0, s1, s4, s5
                1097     ;
2C5 00450       1098     lcd_write_inst8:        LOAD            s4, s5
2C6 034F0       1099                             AND             s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2C7 05408       1100                             OR              s4, #lcd_drive          ;Enable=1
2C8 202C1       1101                             CALL            lcd_write_inst4         ;write upper nibble
2C9 202A3       1102                             CALL            delay_1us               ;wait >1us
2CA 00450       1103                             LOAD            s4, s5                  ;select lower nibble with
2CB 14407       1104                             SL1             s4                      ;Enable=1
2CC 14406       1105                             SL0             s4                      ;RS=0 Instruction
2CD 14406       1106                             SL0             s4                      ;RW=0 Write
2CE 14406       1107                             SL0             s4                      ;E=0
2CF 202C1       1108                             CALL            lcd_write_inst4         ;write lower nibble
2D0 202A7       1109                             CALL            delay_40us              ;wait >40us
2D1 014F0       1110                             LOAD            s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2D2 2D440       1111                             OUTPUT          s4, lcd_output_port     ;Release master enable
2D3 25000       1112                             RETURN
                1113     ;
                1114     ;
                1115     ;
                1116     ;Write 8-bit data to LCD display.
                1117     ;
                1118     ;The 8-bit data should be provided in register s5.
                1119     ;Data bytes are written using the following sequence
                1120     ; Upper nibble
                1121     ; wait >1us
                1122     ; Lower nibble
                1123     ; wait >40us
                1124     ;
                1125     ;Registers used s0, s1, s4, s5
                1126     ;
2D4 00450       1127     lcd_write_data:         LOAD            s4, s5
2D5 034F0       1128                             AND             s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2D6 0540C       1129                             OR              s4, #0x0c               ;Enable=1 RS=1 Data, RW=0 Write, E=0
2D7 2D440       1130                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
2D8 202BB       1131                             CALL            lcd_pulse_e             ;write upper nibble
2D9 202A3       1132                             CALL            delay_1us               ;wait >1us
2DA 00450       1133                             LOAD            s4, s5                  ;select lower nibble with
2DB 14407       1134                             SL1             s4                      ;Enable=1
2DC 14407       1135                             SL1             s4                      ;RS=1 Data
2DD 14406       1136                             SL0             s4                      ;RW=0 Write
2DE 14406       1137                             SL0             s4                      ;E=0
2DF 2D440       1138                             OUTPUT          s4, lcd_output_port     ;set up RS and RW >40ns before enable pulse
2E0 202BB       1139                             CALL            lcd_pulse_e             ;write lower nibble
2E1 202A7       1140                             CALL            delay_40us              ;wait >40us
2E2 014F0       1141                             LOAD            s4, #0xf0               ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
2E3 2D440       1142                             OUTPUT          s4, lcd_output_port     ;Release master enable
2E4 25000       1143                             RETURN
                1144     ;
                1145     ;
                1146     ;
                1147     ;
                1148     ;Read 8-bit data from LCD display.
                1149     ;
                1150     ;The 8-bit data will be read from the current LCD memory address
                1151     ;and will be returned in register s5.
                1152     ;It is advisable to set the LCD address (cursor position) before
                1153     ;using the data read for the first time otherwise the display may
                1154     ;generate invalid data on the first read.
                1155     ;
                1156     ;Data bytes are read using the following sequence
                1157     ; Upper nibble
                1158     ; wait >1us
                1159     ; Lower nibble
                1160     ; wait >40us
                1161     ;
                1162     ;Registers used s0, s1, s4, s5
                1163     ;
                1164     ;LCD_read_data8: LOAD s4, 0E                         ;Enable=1 RS=1 Data, RW=1 Read, E=0
                1165     ;                OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
                1166     ;                XOR s4, LCD_E                       ;E=1
                1167     ;                OUTPUT s4, LCD_output_port
                1168     ;                CALL delay_1us                      ;wait >260ns to access data
                1169     ;                INPUT s5, LCD_input_port            ;read upper nibble
                1170     ;                XOR s4, LCD_E                       ;E=0
                1171     ;                OUTPUT s4, LCD_output_port
                1172     ;                CALL delay_1us                      ;wait >1us
                1173     ;                XOR s4, LCD_E                       ;E=1
                1174     ;                OUTPUT s4, LCD_output_port
                1175     ;                CALL delay_1us                      ;wait >260ns to access data
                1176     ;                INPUT s0, LCD_input_port            ;read lower nibble
                1177     ;                XOR s4, LCD_E                       ;E=0
                1178     ;                OUTPUT s4, LCD_output_port
                1179     ;                AND s5, F0                          ;merge upper and lower nibbles
                1180     ;                SR0 s0
                1181     ;                SR0 s0
                1182     ;                SR0 s0
                1183     ;                SR0 s0
                1184     ;                OR s5, s0
                1185     ;                LOAD s4, 04                         ;Enable=0 RS=1 Data, RW=0 Write, E=0
                1186     ;                OUTPUT s4, LCD_output_port          ;Stop reading 5V device and release master enable
                1187     ;                CALL delay_40us                     ;wait >40us
                1188     ;                RETURN
                1189     ;
                1190     ;
                1191     ;Reset and initialise display to communicate using 4-bit data mode
                1192     ;Includes routine to clear the display.
                1193     ;
                1194     ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                1195     ;following by the 8-bit instructions to set up the display.
                1196     ;
                1197     ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                1198     ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
                1199     ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                1200     ;  01 = '00000001' Display clear
                1201     ;
                1202     ;Registers used s0, s1, s2, s3, s4
                1203     ;
2E5 202B1       1204     lcd_reset:              CALL            delay_20ms              ;wait more that 15ms for display to be ready
2E6 01430       1205                             LOAD            s4, #0x30
2E7 202C1       1206                             CALL            lcd_write_inst4         ;send '3'
2E8 202B1       1207                             CALL            delay_20ms              ;wait >4.1ms
2E9 202C1       1208                             CALL            lcd_write_inst4         ;send '3'
2EA 202AC       1209                             CALL            delay_1ms               ;wait >100us
2EB 202C1       1210                             CALL            lcd_write_inst4         ;send '3'
2EC 202A7       1211                             CALL            delay_40us              ;wait >40us
2ED 01420       1212                             LOAD            s4, #0x20
2EE 202C1       1213                             CALL            lcd_write_inst4         ;send '2'
2EF 202A7       1214                             CALL            delay_40us              ;wait >40us
2F0 01528       1215                             LOAD            s5, #0x28               ;Function set
2F1 202C5       1216                             CALL            lcd_write_inst8
2F2 01506       1217                             LOAD            s5, #0x06               ;Entry mode
2F3 202C5       1218                             CALL            lcd_write_inst8
2F4 0150C       1219                             LOAD            s5, #0x0c               ;Display control
2F5 202C5       1220                             CALL            lcd_write_inst8
2F6 01501       1221     lcd_clear:              LOAD            s5, #0x01               ;Display clear
2F7 202C5       1222                             CALL            lcd_write_inst8
2F8 202AC       1223                             CALL            delay_1ms               ;wait >1.64ms for display to clear
2F9 202AC       1224                             CALL            delay_1ms
2FA 01513       1225                             LOAD            s5, #0x13
2FB 20313       1226                             CALL            lcd_cursor
2FC 0153A       1227                             LOAD            s5, #0x3a               ;;;;;;;;;;;;;;;;;;;;;;;    :
2FD 202D4       1228                             CALL            lcd_write_data
2FE 01516       1229                             LOAD            s5, #0x16
2FF 20313       1230                             CALL            lcd_cursor
300 0152D       1231                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
301 202D4       1232                             CALL            lcd_write_data
302 01520       1233                             LOAD            s5, #0x20
303 20313       1234                             CALL            lcd_cursor
304 0152D       1235                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
305 202D4       1236                             CALL            lcd_write_data
306 0152D       1237                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
307 202D4       1238                             CALL            lcd_write_data
308 0152D       1239                             LOAD            s5, #0x2d               ;;;;;;;;;;;;;;;;;;;;;;     -
309 202D4       1240                             CALL            lcd_write_data
30A 01528       1241                             LOAD            s5, #0x28
30B 20313       1242                             CALL            lcd_cursor
30C 0152F       1243                             LOAD            s5, #0x2f               ;;;;;;;;;;;;;;;;;;;;;;     /
30D 202D4       1244                             CALL            lcd_write_data
30E 0152B       1245                             LOAD            s5, #0x2b
30F 20313       1246                             CALL            lcd_cursor
310 0152F       1247                             LOAD            s5, #0x2f               ;;;;;;;;;;;;;;;;;;;;;;     -
311 202D4       1248                             CALL            lcd_write_data
312 25000       1249                             RETURN
                1250     ;
                1251     ;Position the cursor ready for characters to be written.
                1252     ;The display is formed of 2 lines of 16 characters and each
                1253     ;position has a corresponding address as indicated below.
                1254     ;
                1255     ;                   Character position
                1256     ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                1257     ;
                1258     ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                1259     ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                1260     ;
                1261     ;This routine will set the cursor position using the value provided
                1262     ;in register s5. The upper nibble will define the line and the lower
                1263     ;nibble the character position on the line.
                1264     ; Example s5 = 2B will position the cursor on line 2 position 11
                1265     ;
                1266     ;Registers used s0, s1, s2, s3, s4
                1267     ;
313 0D510       1268     lcd_cursor:             TEST            s5, #0x10               ;test for line 1
314 32319       1269                             JUMP            z, set_line2
315 0350F       1270                             AND             s5, #0x0f               ;make address in range 80 to 8F for line 1
316 05580       1271                             OR              s5, #0x80
317 202C5       1272                             CALL            lcd_write_inst8         ;instruction write to set cursor
318 25000       1273                             RETURN
319 0350F       1274     set_line2:              AND             s5, #0x0f               ;make address in range C0 to CF for line 2
31A 055C0       1275                             OR              s5, #0xc0
31B 202C5       1276                             CALL            lcd_write_inst8         ;instruction write to set cursor
31C 25000       1277                             RETURN
                1278     ;
                1279     ;This routine will shift the complete display one position to the left.
                1280     ;The cursor position and LCD memory contents will not change.
                1281     ;
                1282     ;
                1283     ;Registers used s0, s1, s2, s3, s4, s5
                1284     ;
                1285     ;LCD_shift_left: LOAD s5, 18                         ;shift display left
                1286     ;                CALL LCD_write_inst8
                1287     ;                RETURN
                1288     ;
                1289     ;**************************************************************************************
                1290     ;Interrupt Service Routine (ISR)
                1291     ;**************************************************************************************
31D 2F001       1292     isr:                    STORE           s0, isr_s0              ;preserve s0
31E 2F112       1293                             STORE           s1, isr_s1
31F 2F215       1294                             STORE           s2, isr_s2
320 09101       1295                             INPUT           s1, rotary_port
321 01000       1296                             LOAD            s0, #0x00
322 0D102       1297                             TEST            s1, #rotary_press
323 32331       1298                             JUMP            z, no_press
324 0B017       1299                             FETCH           s0, pressed
325 1D000       1300                             COMPARE         s0, #0x00
326 36331       1301                             JUMP            nz, no_press
327 0B202       1302                             FETCH           s2, led_pattern
328 11201       1303                             ADD             s2, #0x01
329 2F202       1304                             STORE           s2, led_pattern
32A 0B203       1305                             FETCH           s2, mode
32B 11201       1306                             ADD             s2, #0x01
32C 1D207       1307                             COMPARE         s2, #0x07
32D 3632F       1308                             JUMP            nz, mode_save
32E 03200       1309                             AND             s2, #0x00
32F 2F203       1310     mode_save:              STORE           s2, mode                ;;;;;0-normal;1-hour;2-min;3-sec;4-day,5-mon,6-year
330 010FF       1311                             LOAD            s0, #0xff
331 2F017       1312     no_press:               STORE           s0, pressed
332 0D140       1313                             TEST            s1, #0x40               ;;;rotary INT ?
333 323B3       1314                             JUMP            z, t2_5m_int            ;;NOT rotary INT,JUMP away
334 01040       1315     clr_int2:               LOAD            s0, #0x40               ;;;;;CLR_INT1
335 2D020       1316                             OUTPUT          s0, 0x20
336 0B002       1317                             FETCH           s0, led_pattern
337 0D101       1318                             TEST            s1, #rotary_left
338 32374       1319                             JUMP            z, its_right
339 110FF       1320                             ADD             s0, #0xff
33A 2F002       1321                             STORE           s0, led_pattern
                1322     ;;;turn left,--
33B 0B003       1323                             FETCH           s0, mode
33C 1D000       1324                             COMPARE         s0, #0x00
33D 323B1       1325                             JUMP            z, clr_int1             ;
33E 1D001       1326                             COMPARE         s0, #0x01
33F 36347       1327                             JUMP            nz, mode2n
340 0B121       1328                             FETCH           s1, hourb
341 111FF       1329                             ADD             s1, #0xff
342 1D1FF       1330                             COMPARE         s1, #0xff               ;;;24
343 36345       1331                             JUMP            nz, save_hhn
344 01117       1332                             LOAD            s1, #0x17
345 2F121       1333     save_hhn:               STORE           s1, hourb
346 223EE       1334                             JUMP            real_time_end
347 1D002       1335     mode2n:                 COMPARE         s0, #0x02
348 36350       1336                             JUMP            nz, mode3n
349 0B122       1337                             FETCH           s1, minb
34A 111FF       1338                             ADD             s1, #0xff
34B 1D1FF       1339                             COMPARE         s1, #0xff               ;;;3C;;60
34C 3634E       1340                             JUMP            nz, save_mmn
34D 0113B       1341                             LOAD            s1, #0x3b
34E 2F122       1342     save_mmn:               STORE           s1, minb
34F 223EE       1343                             JUMP            real_time_end
350 1D003       1344     mode3n:                 COMPARE         s0, #0x03
351 36359       1345                             JUMP            nz, mode4n
352 0B123       1346                             FETCH           s1, secb
353 111FF       1347                             ADD             s1, #0xff
354 1D1FF       1348                             COMPARE         s1, #0xff               ;;;60
355 36357       1349                             JUMP            nz, save_ssn
356 0113B       1350                             LOAD            s1, #0x3b
357 2F123       1351     save_ssn:               STORE           s1, secb
358 223EE       1352                             JUMP            real_time_end
359 1D004       1353     mode4n:                 COMPARE         s0, #0x04
35A 36362       1354                             JUMP            nz, mode5n
35B 0B125       1355                             FETCH           s1, monb
35C 111FF       1356                             ADD             s1, #0xff
35D 1D100       1357                             COMPARE         s1, #0x00               ;;;12
35E 36360       1358                             JUMP            nz, save_monn
35F 0110C       1359                             LOAD            s1, #0x0c
360 2F125       1360     save_monn:              STORE           s1, monb
361 223EE       1361                             JUMP            real_time_end
362 1D005       1362     mode5n:                 COMPARE         s0, #0x05
363 3636B       1363                             JUMP            nz, mode6n
364 0B126       1364                             FETCH           s1, dayb
365 111FF       1365                             ADD             s1, #0xff
366 1D100       1366                             COMPARE         s1, #0x00               ;;;12
367 36369       1367                             JUMP            nz, save_dayn
368 0B127       1368                             FETCH           s1, dmax
369 2F126       1369     save_dayn:              STORE           s1, dayb
36A 223EE       1370                             JUMP            real_time_end
36B 1D006       1371     mode6n:                 COMPARE         s0, #0x06
36C 36373       1372                             JUMP            nz, mode7n
36D 0B124       1373                             FETCH           s1, yearb
36E 111FF       1374                             ADD             s1, #0xff
36F 1D1FF       1375                             COMPARE         s1, #0xff               ;;;12
370 36372       1376                             JUMP            nz, save_yearn
371 01163       1377                             LOAD            s1, #0x63
372 2F124       1378     save_yearn:             STORE           s1, yearb
  00373         1379     mode7n:
373 223EE       1380                             JUMP            real_time_end
374 11001       1381     its_right:              ADD             s0, #0x01
375 2F002       1382                             STORE           s0, led_pattern
                1383     ;;;turn right++
376 0B003       1384                             FETCH           s0, mode
377 1D000       1385                             COMPARE         s0, #0x00
378 323B1       1386                             JUMP            z, clr_int1             ;
379 1D001       1387                             COMPARE         s0, #0x01
37A 36382       1388                             JUMP            nz, mode2p
37B 0B121       1389                             FETCH           s1, hourb
37C 11101       1390                             ADD             s1, #0x01
37D 1D118       1391                             COMPARE         s1, #0x18               ;;;24
37E 36380       1392                             JUMP            nz, save_hhp
37F 01100       1393                             LOAD            s1, #0x00
380 2F121       1394     save_hhp:               STORE           s1, hourb
381 223EE       1395                             JUMP            real_time_end
382 1D002       1396     mode2p:                 COMPARE         s0, #0x02
383 3638B       1397                             JUMP            nz, mode3p
384 0B122       1398                             FETCH           s1, minb
385 11101       1399                             ADD             s1, #0x01
386 1D13C       1400                             COMPARE         s1, #0x3c               ;;;3C;;60
387 36389       1401                             JUMP            nz, save_mmp
388 01100       1402                             LOAD            s1, #0x00
389 2F122       1403     save_mmp:               STORE           s1, minb
38A 223EE       1404                             JUMP            real_time_end
38B 1D003       1405     mode3p:                 COMPARE         s0, #0x03
38C 36394       1406                             JUMP            nz, mode4p
38D 0B123       1407                             FETCH           s1, secb
38E 11101       1408                             ADD             s1, #0x01
38F 1D13C       1409                             COMPARE         s1, #0x3c               ;;;60
390 36392       1410                             JUMP            nz, save_ssp
391 01100       1411                             LOAD            s1, #0x00
392 2F123       1412     save_ssp:               STORE           s1, secb
393 223EE       1413                             JUMP            real_time_end
394 1D004       1414     mode4p:                 COMPARE         s0, #0x04
395 3639D       1415                             JUMP            nz, mode5p
396 0B125       1416                             FETCH           s1, monb
397 11101       1417                             ADD             s1, #0x01
398 1D10D       1418                             COMPARE         s1, #0x0d               ;;;12
399 3639B       1419                             JUMP            nz, save_monp
39A 01101       1420                             LOAD            s1, #0x01
39B 2F125       1421     save_monp:              STORE           s1, monb
39C 223EE       1422                             JUMP            real_time_end
39D 1D005       1423     mode5p:                 COMPARE         s0, #0x05
39E 363A8       1424                             JUMP            nz, mode6p
39F 0B126       1425                             FETCH           s1, dayb
3A0 11101       1426                             ADD             s1, #0x01
3A1 0B227       1427                             FETCH           s2, dmax
3A2 11201       1428                             ADD             s2, #0x01
3A3 1C120       1429                             COMPARE         s1, s2
3A4 363A6       1430                             JUMP            nz, save_dayp
3A5 01101       1431                             LOAD            s1, #0x01
3A6 2F126       1432     save_dayp:              STORE           s1, dayb
3A7 223EE       1433                             JUMP            real_time_end
3A8 1D006       1434     mode6p:                 COMPARE         s0, #0x06
3A9 363B0       1435                             JUMP            nz, mode7p
3AA 0B124       1436                             FETCH           s1, yearb
3AB 11101       1437                             ADD             s1, #0x01
3AC 1D164       1438                             COMPARE         s1, #0x64               ;;;12
3AD 363AF       1439                             JUMP            nz, save_yearp
3AE 01100       1440                             LOAD            s1, #0x00
3AF 2F124       1441     save_yearp:             STORE           s1, yearb
3B0 223EE       1442     mode7p:                 JUMP            real_time_end
3B1 01040       1443     clr_int1:               LOAD            s0, #0x40               ;;;;;CLR_INT1
3B2 2D020       1444                             OUTPUT          s0, 0x20
                1445     ;;;TIMER interrupt process;;;;mode:::0-normal;1-hour;2-min;3-sec;4-day,5-mon,6-year
3B3 0D180       1446     t2_5m_int:              TEST            s1, #0x80
3B4 323F9       1447                             JUMP            z, end_isr
3B5 01080       1448                             LOAD            s0, #0x80               ;;;;;;;;;;clr_int2
3B6 2D020       1449                             OUTPUT          s0, 0x20
3B7 0B004       1450                             FETCH           s0, ms1
3B8 11001       1451                             ADD             s0, #0x01
3B9 2F004       1452                             STORE           s0, ms1
3BA 1D064       1453                             COMPARE         s0, #0x64
3BB 363EE       1454                             JUMP            nz, real_time_end
3BC 03000       1455                             AND             s0, #0x00               ;;;;;;;;;;;;;CLR ms1
3BD 2F004       1456                             STORE           s0, ms1
3BE 0B002       1457                             FETCH           s0, led_pattern         ;
3BF 11010       1458                             ADD             s0, #0x10
3C0 2F002       1459                             STORE           s0, led_pattern
3C1 0B111       1460                             FETCH           s1, ms500
3C2 11101       1461                             ADD             s1, #0x01
3C3 2F111       1462                             STORE           s1, ms500
3C4 1D101       1463                             COMPARE         s1, #0x01               ;
3C5 363C8       1464                             JUMP            nz, cmp_2
3C6 0102D       1465                             LOAD            s0, #0x2d               ;;;------
3C7 223CF       1466                             JUMP            cmp_4
3C8 1D102       1467     cmp_2:                  COMPARE         s1, #0x02               ;
3C9 363CC       1468                             JUMP            nz, cmp_3
3CA 01060       1469                             LOAD            s0, #0x60               ;;;\\\\\\
3CB 223CF       1470                             JUMP            cmp_4
3CC 1D103       1471     cmp_3:                  COMPARE         s1, #0x03               ;
3CD 363CF       1472                             JUMP            nz, cmp_4
3CE 0107C       1473                             LOAD            s0, #0x7c               ;;;||||
3CF 2F018       1474     cmp_4:                  STORE           s0, disp_flag
3D0 1D104       1475                             COMPARE         s1, #0x04
3D1 363EE       1476                             JUMP            nz, real_time_end
3D2 0102F       1477                             LOAD            s0, #0x2f               ;;;////
                1478     ;;FETCH s0,disp_flag
                1479     ;;ADD s0,01
3D3 2F018       1480                             STORE           s0, disp_flag
3D4 03100       1481                             AND             s1, #0x00               ;;;;;;;;;;;;;CLR ms500
3D5 2F111       1482                             STORE           s1, ms500
3D6 0B023       1483                             FETCH           s0, secb                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CLOCK PROCESS START
3D7 11001       1484                             ADD             s0, #0x01
3D8 2F023       1485                             STORE           s0, secb
3D9 1D03C       1486                             COMPARE         s0, #0x3c               ;;;60
3DA 363EE       1487                             JUMP            nz, real_time_end
3DB 03000       1488                             AND             s0, #0x00
3DC 2F023       1489                             STORE           s0, secb
3DD 0B022       1490                             FETCH           s0, minb
3DE 11001       1491                             ADD             s0, #0x01
3DF 2F022       1492                             STORE           s0, minb
3E0 1D03C       1493                             COMPARE         s0, #0x3c
3E1 363EE       1494                             JUMP            nz, real_time_end
3E2 03000       1495                             AND             s0, #0x00
3E3 2F022       1496                             STORE           s0, minb
                1497     ;;;24 Hours
3E4 0B021       1498                             FETCH           s0, hourb
3E5 11001       1499                             ADD             s0, #0x01
3E6 2F021       1500                             STORE           s0, hourb
3E7 1D018       1501                             COMPARE         s0, #0x18
3E8 363EE       1502                             JUMP            nz, real_time_end
3E9 03000       1503                             AND             s0, #0x00
3EA 2F021       1504                             STORE           s0, hourb
3EB 0B01F       1505     day_p:                  FETCH           s0, day_up
3EC 01001       1506                             LOAD            s0, #0x01
3ED 2F01F       1507                             STORE           s0, day_up
3EE 0B010       1508     real_time_end:          FETCH           s0, ms2                 ;;;;;;;;2.5ms counter
3EF 11001       1509                             ADD             s0, #0x01
3F0 1D028       1510                             COMPARE         s0, #0x28               ;;;;;;counter to 100ms
3F1 363F6       1511                             JUMP            nz, store_ms2
3F2 0B113       1512                             FETCH           s1, ms100
3F3 11101       1513                             ADD             s1, #0x01
3F4 2F113       1514     sav_ms100:              STORE           s1, ms100
3F5 01000       1515                             LOAD            s0, #0x00
3F6 2F010       1516     store_ms2:              STORE           s0, ms2
3F7 0B002       1517                             FETCH           s0, led_pattern
3F8 2D080       1518                             OUTPUT          s0, led_port
3F9 0B001       1519     end_isr:                FETCH           s0, isr_s0              ;restore s0
3FA 0B112       1520                             FETCH           s1, isr_s1              ;restore s1
3FB 0B215       1521                             FETCH           s2, isr_s2              ;restore s2
3FC 29001       1522                             RETURNI         enable
                1523     ;**************************************************************************************
                1524     ;Interrupt Vector
                1525     ;**************************************************************************************
                1526     ;
  003FF         1527                             ORG             0x3ff
3FF 2231D       1528                             JUMP            isr
                1529     ;First Screen:
                1530     ;1234567890123456
                1531     ; Clock Based
                1532     ;S3E Starter kit
                1533     ;Second Screen:
                1534     ;1234567890123456
                1535     ;   X Xilinx
                1536     ;PicoBlaze Test
                1537     ;Third Screen:
                1538     ;1234567890123456
                1539     ; Press & Turn
                1540     ;Encoder to Adjust
                1541     ;1234567890123456
                1542     ;09:00:00    Mon
                1543     ;<->   05/01/2006
                1544     ;Based on Ken C's
                1545     ;S3ESK_STARTUP
                1546     ;Modified By
                1547     ; George W.
                1548     ;Dear Mr. Chapman,
                1549     ;I have just finished a design with PicoBlaze Based the hardware of S3E Starter kit platform.
                1550     ;It's amazing that the BicoBlaze works perfect,not bad than any other professional MCU I have ever used.I like it very much.
                1551     ;I have used up all the programme space that MicroBlaze supports and I had to remove some functions from the designs for the programme space reason
                1552     ;My question is ,wether can I make the programme counter wider in PicoBlaze to support more programme space.
                1553     ;Another problem,I cannot update the PROM on the starter kit PCB,I'm not sure whether it is caused by the MCS file I generated or other problem.The screen shot and bitstream are attached.Please help me to have a check. Thank you.
                1554
