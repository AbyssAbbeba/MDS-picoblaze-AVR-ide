                   1
                   2     ;
                   3     ; PicoBlaze kód pro počáteční inicializaci A/D převodníku ADS6445 a zdroje hodin LMK4011
                   4
                   5     ; A/D převodník - 16bit registry
                   6     ;				  Max 20 MHz
                   7     ;				  A4-A0 + D10-D0	
                   8     ;
                   9     ; LMK4011 -		  32bit registry
                  10     ; 				  Max 20 MHz
                  11     ;				  D27-D0 + A3-A0
                  12     ;
                  13     ; Martin Madron 30.4.2013
                  14     ;
                  15     ;
                  16
                  17     ; Start
                  18     ;##############################################################################;
                  19     ; Přiřazení jmen registrům
                  20     	NAMEREG		s0,temp1              ; temporary data register
                  21     	NAMEREG		s1,temp2              ; temporary data register
                  22     	NAMEREG		s2,temp3              ; temporary data register
                  23     	NAMEREG		s3,RXdata             ; temporary data register
                  24     	NAMEREG		s4,TXdata             ; temporary data register
                  25
                  26     ; PORT_IDs
                  27     	CONSTANT	TX_data_01,&01          ;  data register port ID
E: unexpected &.
                  28     	CONSTANT	TX_data_02,&02          ;  data register port ID
E: unexpected &.
                  29     	CONSTANT	TX_data_03,&04          ;  data register port ID
E: unexpected &.
                  30     	CONSTANT	TX_data_04,&08          ;  data register port ID
E: unexpected &.
                  31     	CONSTANT	Read_data,&12           ;  data register port ID	
E: unexpected &.
                  32
                  33     ; Inicializace
                  34     ;##############################################################################;
  00000           35     	ADDRESS	000
000 22001         36     	JUMP	Start
                  37     ; Čekání 1s pro inicializaci obvodů
001 20021         38     Start:              CALL      wait_1s             ; wait for 1s
                  39     ; end of initialization
                  40
                  41     ;  Main
002 2000C         42     main_loop:          CALL      GetChar             ; get (wait for) new character
                  43                         COMPARE      chreg,$20           ; Space character received?
E: invalid token: `$20'.
E: unexpected end of line.
003 36002         44                         JUMP      NZ,main_loop        ; If not space, get another character
004 09101         45                         IN        chreg,Switch        ; If yes, read content of switches
E: symbol not defined: `CHREG'.
E: symbol not defined: `SWITCH'.
005 20007         46                         CALL      SendChar            ; And send it via UART
006 22002         47                         JUMP      main_loop
                  48
                  49     ;##############################################################################;
                  50     ;  General purpose procedures
                  51     ;##############################################################################;
                  52
                  53     ; Basic UART text output procedures (CALLs)
                  54
                  55     ;==============================================================================;
                  56     ; Send character stored in chreg via UART
                  57     ; Registers used: Temp1, chreg
                  58     ;==============================================================================;
007 09101         59     SendChar:           IN        Temp1, UART_stat    ; checking UART status
E: symbol not defined: `TEMP1'.
E: symbol not defined: `UART_STAT'.
008 0C140         60                         TEST      Temp1, 4            ; test bit 2 (is Tx ready?)
E: symbol not defined: `TEMP1'.
009 32007         61                         JUMP      Z, SendChar         ; wait until Tx is ready
00A 2D101         62                         OUT       chreg, UART_data    ; Send the character
E: symbol not defined: `CHREG'.
E: symbol not defined: `UART_DATA'.
00B 25000         63                         RET                           ; Return from procedure
                  64
                  65     ;==============================================================================;
                  66     ; Reads a single character from UART (waits on receive when none is prepared)
                  67     ; Registers used: Temp1, chreg
                  68     ;==============================================================================;
00C 09101         69     GetChar:            IN        Temp1, UART_stat    ; checking UART status
E: symbol not defined: `TEMP1'.
E: symbol not defined: `UART_STAT'.
00D 0C180         70                         TEST      Temp1, 8            ; test bit 3 (new Rx data?)
E: symbol not defined: `TEMP1'.
00E 3200C         71                         JUMP      Z, GetChar          ; wait for new Rx data
00F 09101         72                         IN        chreg, UART_data    ; Read the character
E: symbol not defined: `CHREG'.
E: symbol not defined: `UART_DATA'.
010 25000         73                         RET                           ; Return from procedure
                  74
                  75     ;==============================================================================;
                  76     ; Procedure for sending content of "chreg" register in hexadecimal ASCII format
                  77     ;   (two characters, one for each nibble)
                  78     ; Reister used: Temp1, Temp2, chreg
                  79     ; Procedures used: SendChar
                  80     ;==============================================================================;
011 00110         81     SendByte:           LOAD      Temp2, chreg        ; make a backup of chreg
E: symbol not defined: `TEMP2'.
E: symbol not defined: `CHREG'.
012 1410E         82                         SR0       chreg               ; move upper nibble to lower nibble
E: symbol not defined: `CHREG'.
013 1410E         83                         SR0       chreg
E: symbol not defined: `CHREG'.
014 1410E         84                         SR0       chreg
E: symbol not defined: `CHREG'.
015 1410E         85                         SR0       chreg
E: symbol not defined: `CHREG'.
                  86                         COMP      chreg, 10           ; if not greater than 9, than it is a number
E: macro not defined: "COMP".
016 3A001         87                         JUMP      C, SendBNum1        ; C is set when Temp < 10 (Temp-10)
E: symbol not defined: `SENDBNUM1'.
                  88                         ADD       chreg, $37          ; when letter, add $37; letter conversion
E: invalid token: `$37'.
E: unexpected end of line.
017 22018         89                         JUMP      SendB1
                  90     SendBNum1:          ADD       chreg, $30          ; when number, add $30; number conversion
E: invalid token: `$30'.
E: unexpected end of line.
018 20007         91     SendB1:             CALL      SendChar            ; Send Character
                  92
019 00110         93                         LOAD      chreg, Temp2        ; load the whole byte again
E: symbol not defined: `CHREG'.
E: symbol not defined: `TEMP2'.
                  94                         AND       chreg, $0F          ; select second character
E: invalid token: `$0F'.
E: unexpected end of line.
                  95                         COMP      chreg, 10           ; if not greater than 9, than number
E: macro not defined: "COMP".
01A 3A001         96                         JUMP      C, SendBNum2        ; C is set when Temp < 10 (Temp-10 under 0)
E: symbol not defined: `SENDBNUM2'.
                  97                         ADD       chreg, $37          ; when letter, add $37; letter conversion
E: invalid token: `$37'.
E: unexpected end of line.
01B 2201C         98                         JUMP      SendB2
                  99     SendBNum2:          ADD       chreg, $30          ; when number, add $30; number conversion
E: invalid token: `$30'.
E: unexpected end of line.
01C 20007        100     SendB2:             CALL      SendChar            ; Send character
01D 25000        101                         RET
                 102
                 103     ;==============================================================================;
                 104     ; Send 0D and 0A character pair via UART
                 105     ; Registers used: Temp1, chreg
                 106     ; Procedures used: SendChar
                 107     ;==============================================================================;
                 108     SendCRLF:           LOAD      chreg, $0D          ; CR character
E: invalid token: `$0D'.
E: unexpected end of line.
01E 20007        109                         CALL      SendChar            ; Send character
                 110                         LOAD      chreg, $0A          ; Load LF character
E: invalid token: `$0A'.
E: unexpected end of line.
01F 20007        111                         CALL      SendChar            ; Send character
020 25000        112                         RET                           ; Return from procedure
                 113
                 114     ;==============================================================================;
                 115     ; Procedures for waiting for specified time
                 116     ; Duration is set in registers Temp1, Temp2 and Temp3
                 117     ;
                 118     ;   clock           instruction execution time
                 119     ;   10.00 MHz              200.00 ns
                 120     ;   19.44 MHz              102.88 ns
                 121     ;   38.88 MHz               51.44 ns
                 122     ;   50.00 MHz               40.00 ns
                 123     ;  100.00 MHz               20.00 ns
                 124     ;
                 125     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                 126     ;   1s @ (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                 127     ;
                 128     ; ČEKACÍ SMYČKY
                 129     ;==============================================================================;
021 001A0        130     wait_1s:            LOAD      Temp1, 250          ; Load Temp1 register
E: symbol not defined: `TEMP1'.
W: value out of range: 250, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
022 00190        131                         LOAD      Temp2, 249          ; Load Temp2 register
E: symbol not defined: `TEMP2'.
W: value out of range: 249, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
023 00180        132                         LOAD      Temp3, 200          ; Load Temp3 register
E: symbol not defined: `TEMP3'.
W: value out of range: 200, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
024 18110        133     wait_1s_i:          SUB       Temp1, 1
E: symbol not defined: `TEMP1'.
025 36024        134                         JUMP      NZ, wait_1s_i
026 18110        135                         SUB       Temp2, 1
E: symbol not defined: `TEMP2'.
027 36024        136                         JUMP      NZ, wait_1s_i
028 18110        137                         SUB       Temp3, 1
E: symbol not defined: `TEMP3'.
029 36024        138                         JUMP      NZ, wait_1s_i
02A 25000        139                         RET
                 140
02B 001A0        141     wait_100ms:         LOAD      Temp1, 250          ; Load Temp1 register
E: symbol not defined: `TEMP1'.
W: value out of range: 250, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
02C 00190        142                         LOAD      Temp2, 249          ; Load Temp2 register
E: symbol not defined: `TEMP2'.
W: value out of range: 249, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
02D 00140        143                         LOAD      Temp3, 20           ; Load Temp3 register
E: symbol not defined: `TEMP3'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
02E 18110        144     wait_100ms_i:       SUB       Temp1, 1
E: symbol not defined: `TEMP1'.
02F 3602E        145                         JUMP      NZ, wait_100ms_i
030 18110        146                         SUB       Temp2, 1
E: symbol not defined: `TEMP2'.
031 3602E        147                         JUMP      NZ, wait_100ms_i
032 18110        148                         SUB       Temp3, 1
E: symbol not defined: `TEMP3'.
033 3602E        149                         JUMP      NZ, wait_100ms_i
034 25000        150                         RET
                 151
                 152     ;##############################################################################;
