                   1     ;##############################################################################;
                   2     ; Description of code
                   3     ;##############################################################################;
                   4     ;
                   5
                   6     ;
                   7     ;
                   8     ;##############################################################################;
                   9     ; Start of code
                  10     ;##############################################################################;
                  11     ; Register name assignment
                  12     temp1               EQU       s0                  ; temporary data register
                  13     temp2               EQU       s1                  ; temporary data register
                  14     temp3               EQU       s2                  ; temporary data register
                  15     chreg               EQU       s3                  ; character register
                  16     RxDat               EQU       s4                  ; received character register
                  17     addr                EQU       s5                  ; address register
                  18
                  19     ; Peripherals
                  20     UART_data           DS        $01                 ; UART data register port ID
E: invalid token: `$01'.
                  21     UART_stat           DS        $02                 ; UART control register port ID
E: invalid token: `$02'.
                  22     ; UART Status register:
                  23     ;  [2] Tx ready
                  24     ;  [3] new Rx data
                  25     ;  [4] Rx buffer overflow
                  26
                  27     BCD_01              DS        $04                 ; 7 segment, upper two segments
E: invalid token: `$04'.
                  28     BCD_23              DS        $08                 ; 7 segment, lower two segments
E: invalid token: `$08'.
                  29     LED                 DS        $10                 ; LEDs
E: invalid token: `$10'.
                  30     Switch              DS        $20                 ; Switches
E: invalid token: `$20'.
                  31     Button              DS        $40                 ; Buttons (3:0)
E: invalid token: `$40'.
                  32
                  33     ;##############################################################################;
                  34     ; VHDL file declaration
                  35                         VHDL      "ROM_blank.vhd", "ROM_code.vhd", "ROM_CODE"
E: unexpected STRING.
                  36
                  37
                  38     ;##############################################################################;
                  39     ; Initialization
                  40     ;##############################################################################;
                  41
                  42     ; initial wait
000 20021         43     Start:              CALL      wait_1s             ; wait for peripheral startup
                  44     	                LOAD      Temp1,$00           ; LEDs OFF at startup
E: invalid token: `$00'.
E: unexpected end of line.
001 2D101         45     	                OUT       Temp1,LED           ; write valu to LED register
E: symbol not defined: `TEMP1'.
E: symbol not defined: `LED'.
                  46
                  47     ; end of initialization
                  48
                  49     ;##############################################################################;
                  50     ;  Main loop
                  51     ;##############################################################################;
002 2000C         52     main_loop:          CALL      GetChar             ; get (wait for) new character
                  53                         COMP      chreg,$20           ; Space character received?
E: invalid token: `$20'.
E: unexpected end of line.
003 36002         54                         JUMP      NZ,main_loop        ; If not space, get another character
004 09101         55                         IN        chreg,Switch        ; If yes, read content of switches
E: symbol not defined: `CHREG'.
E: symbol not defined: `SWITCH'.
005 20007         56                         CALL      SendChar            ; And send it via UART
006 22002         57                         JUMP      main_loop
                  58
                  59     ;##############################################################################;
                  60     ;  General purpose procedures
                  61     ;##############################################################################;
                  62
                  63     ; Basic UART text output procedures (CALLs)
                  64
                  65     ;==============================================================================;
                  66     ; Send character stored in chreg via UART
                  67     ; Registers used: Temp1, chreg
                  68     ;==============================================================================;
007 09101         69     SendChar:           IN        Temp1, UART_stat    ; checking UART status
E: symbol not defined: `TEMP1'.
E: symbol not defined: `UART_STAT'.
008 0C140         70                         TEST      Temp1, 4            ; test bit 2 (is Tx ready?)
E: symbol not defined: `TEMP1'.
009 32007         71                         JUMP      Z, SendChar         ; wait until Tx is ready
00A 2D101         72                         OUT       chreg, UART_data    ; Send the character
E: symbol not defined: `CHREG'.
E: symbol not defined: `UART_DATA'.
00B 25000         73                         RET                           ; Return from procedure
                  74
                  75     ;==============================================================================;
                  76     ; Reads a single character from UART (waits on receive when none is prepared)
                  77     ; Registers used: Temp1, chreg
                  78     ;==============================================================================;
00C 09101         79     GetChar:            IN        Temp1, UART_stat    ; checking UART status
E: symbol not defined: `TEMP1'.
E: symbol not defined: `UART_STAT'.
00D 0C180         80                         TEST      Temp1, 8            ; test bit 3 (new Rx data?)
E: symbol not defined: `TEMP1'.
00E 3200C         81                         JUMP      Z, GetChar          ; wait for new Rx data
00F 09101         82                         IN        chreg, UART_data    ; Read the character
E: symbol not defined: `CHREG'.
E: symbol not defined: `UART_DATA'.
010 25000         83                         RET                           ; Return from procedure
                  84
                  85     ;==============================================================================;
                  86     ; Procedure for sending content of "chreg" register in hexadecimal ASCII format
                  87     ;   (two characters, one for each nibble)
                  88     ; Reister used: Temp1, Temp2, chreg
                  89     ; Procedures used: SendChar
                  90     ;==============================================================================;
011 00110         91     SendByte:           LOAD      Temp2, chreg        ; make a backup of chreg
E: symbol not defined: `TEMP2'.
E: symbol not defined: `CHREG'.
012 1410E         92                         SR0       chreg               ; move upper nibble to lower nibble
E: symbol not defined: `CHREG'.
013 1410E         93                         SR0       chreg
E: symbol not defined: `CHREG'.
014 1410E         94                         SR0       chreg
E: symbol not defined: `CHREG'.
015 1410E         95                         SR0       chreg
E: symbol not defined: `CHREG'.
                  96                         COMP      chreg, 10           ; if not greater than 9, than it is a number
E: macro not defined: "COMP".
016 3A001         97                         JUMP      C, SendBNum1        ; C is set when Temp < 10 (Temp-10)
E: symbol not defined: `SENDBNUM1'.
                  98                         ADD       chreg, $37          ; when letter, add $37; letter conversion
E: invalid token: `$37'.
E: unexpected end of line.
017 22018         99                         JUMP      SendB1
                 100     SendBNum1:          ADD       chreg, $30          ; when number, add $30; number conversion
E: invalid token: `$30'.
E: unexpected end of line.
018 20007        101     SendB1:             CALL      SendChar            ; Send Character
                 102
019 00110        103                         LOAD      chreg, Temp2        ; load the whole byte again
E: symbol not defined: `CHREG'.
E: symbol not defined: `TEMP2'.
                 104                         AND       chreg, $0F          ; select second character
E: invalid token: `$0F'.
E: unexpected end of line.
                 105                         COMP      chreg, 10           ; if not greater than 9, than number
E: macro not defined: "COMP".
01A 3A001        106                         JUMP      C, SendBNum2        ; C is set when Temp < 10 (Temp-10 under 0)
E: symbol not defined: `SENDBNUM2'.
                 107                         ADD       chreg, $37          ; when letter, add $37; letter conversion
E: invalid token: `$37'.
E: unexpected end of line.
01B 2201C        108                         JUMP      SendB2
                 109     SendBNum2:          ADD       chreg, $30          ; when number, add $30; number conversion
E: invalid token: `$30'.
E: unexpected end of line.
01C 20007        110     SendB2:             CALL      SendChar            ; Send character
01D 25000        111                         RET
                 112
                 113     ;==============================================================================;
                 114     ; Send 0D and 0A character pair via UART
                 115     ; Registers used: Temp1, chreg
                 116     ; Procedures used: SendChar
                 117     ;==============================================================================;
                 118     SendCRLF:           LOAD      chreg, $0D          ; CR character
E: invalid token: `$0D'.
E: unexpected end of line.
01E 20007        119                         CALL      SendChar            ; Send character
                 120                         LOAD      chreg, $0A          ; Load LF character
E: invalid token: `$0A'.
E: unexpected end of line.
01F 20007        121                         CALL      SendChar            ; Send character
020 25000        122                         RET                           ; Return from procedure
                 123
                 124     ;==============================================================================;
                 125     ; Procedures for waiting for specified time
                 126     ; Duration is set in registers Temp1, Temp2 and Temp3
                 127     ;
                 128     ;   clock           instruction execution time
                 129     ;   10.00 MHz              200.00 ns
                 130     ;   19.44 MHz              102.88 ns
                 131     ;   38.88 MHz               51.44 ns
                 132     ;   50.00 MHz               40.00 ns
                 133     ;  100.00 MHz               20.00 ns
                 134     ;
                 135     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                 136     ;   1s @ (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                 137     ;==============================================================================;
021 001A0        138     wait_1s:            LOAD      Temp1, 250          ; Load Temp1 register
E: symbol not defined: `TEMP1'.
W: value out of range: 0xfa, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
022 00190        139                         LOAD      Temp2, 249          ; Load Temp2 register
E: symbol not defined: `TEMP2'.
W: value out of range: 0xf9, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
023 00180        140                         LOAD      Temp3, 200          ; Load Temp3 register
E: symbol not defined: `TEMP3'.
W: value out of range: 0xc8, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
024 18110        141     wait_1s_i:          SUB       Temp1, 1
E: symbol not defined: `TEMP1'.
025 36024        142                         JUMP      NZ, wait_1s_i
026 18110        143                         SUB       Temp2, 1
E: symbol not defined: `TEMP2'.
027 36024        144                         JUMP      NZ, wait_1s_i
028 18110        145                         SUB       Temp3, 1
E: symbol not defined: `TEMP3'.
029 36024        146                         JUMP      NZ, wait_1s_i
02A 25000        147                         RET
                 148
02B 001A0        149     wait_100ms:         LOAD      Temp1, 250          ; Load Temp1 register
E: symbol not defined: `TEMP1'.
W: value out of range: 0xfa, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
02C 00190        150                         LOAD      Temp2, 249          ; Load Temp2 register
E: symbol not defined: `TEMP2'.
W: value out of range: 0xf9, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
02D 00140        151                         LOAD      Temp3, 20           ; Load Temp3 register
E: symbol not defined: `TEMP3'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
02E 18110        152     wait_100ms_i:       SUB       Temp1, 1
E: symbol not defined: `TEMP1'.
02F 3602E        153                         JUMP      NZ, wait_100ms_i
030 18110        154                         SUB       Temp2, 1
E: symbol not defined: `TEMP2'.
031 3602E        155                         JUMP      NZ, wait_100ms_i
032 18110        156                         SUB       Temp3, 1
E: symbol not defined: `TEMP3'.
033 3602E        157                         JUMP      NZ, wait_100ms_i
034 25000        158                         RET
                 159
                 160     ;##############################################################################;
                 161
