                   1                         ;KCPSM3 Program - SPI Control of Amplifier and A/D converter on Spartan-3E Starter Kit.
                   2                         ;
                   3                         ;
                   4                         ;Ken Chapman - Xilinx Ltd
                   5                         ;
                   6                         ;Version v1.00 - 21th December 2005
                   7                         ;
                   8                         ;This program uses an 8KHz interrupt to generate test waveforms on the
                   9                         ;4 analogue outputs provided by the Linear Technology LTC2624 device.
                  10                         ;
                  11                         ;As well as the port connections vital to communication with the UART and the SPI
                  12                         ;FLASH memory, there are additional port connections used to disable the other
                  13                         ;devices sharing the SPI bus on the Starter Kit board. Although these could have been
                  14                         ;controlled at the hardware level, they are included in this code to aid
                  15                         ;future investigations of communication with the other SPI devices using PicoBlaze.
                  16                         ;
                  17                         ;Connections to the LEDs, switches and press buttons are provided to aid
                  18                         ;development and enable further experiments. Otherwise know as having fun!
                  19                         ;
                  20                         ;Port definitions
                  21                         ;
                  22                         ;
  00008           23                         CONSTANT SPI_control_port, 08       ;SPI clock and chip selects
  00001           24                         CONSTANT SPI_sck, 01                ;                  SCK - bit0
  00002           25                         CONSTANT SPI_rom_cs, 02             ;    serial rom select - bit1
  00004           26                         CONSTANT SPI_spare_control, 04      ;                spare - bit2
  00008           27                         CONSTANT SPI_amp_cs, 08             ;     amplifier select - bit3
  0000A           28                         CONSTANT SPI_adc_conv, 10           ;          A/D convert - bit4
  00014           29                         CONSTANT SPI_dac_cs, 20             ;           D/A select - bit5
  00028           30                         CONSTANT SPI_amp_shdn, 40           ;       amplifier SHDN - bit6
  00050           31                         CONSTANT SPI_dac_clr, 80            ;            D/A clear - bit7
                  32                         ;
  00004           33                         CONSTANT SPI_output_port, 04        ;SPI data output
  00050           34                         CONSTANT SPI_sdo, 80                ;   SDO - bit7
                  35                         ;
  00001           36                         CONSTANT SPI_input_port, 01         ;SPI data input
  00050           37                         CONSTANT SPI_sdi, 80                ;             SDI - bit7
  00028           38                         CONSTANT SPI_amp_sdi, 40            ;   amplifier SDI - bit6
                  39                         ;
                  40                         ;
  00050           41                         CONSTANT LED_port, 80               ;8 simple LEDs
  00001           42                         CONSTANT LED0, 01                   ;     LED 0 - bit0
  00002           43                         CONSTANT LED1, 02                   ;         1 - bit1
  00004           44                         CONSTANT LED2, 04                   ;         2 - bit2
  00008           45                         CONSTANT LED3, 08                   ;         3 - bit3
  0000A           46                         CONSTANT LED4, 10                   ;         4 - bit4
  00014           47                         CONSTANT LED5, 20                   ;         5 - bit5
  00028           48                         CONSTANT LED6, 40                   ;         6 - bit6
  00050           49                         CONSTANT LED7, 80                   ;         7 - bit7
                  50                         ;
                  51                         ;
  00000           52                         CONSTANT switch_port, 00            ;Read switches and press buttons
  00001           53                         CONSTANT BTN_north, 01              ;  Buttons     North - bit0
  00002           54                         CONSTANT BTN_east, 02               ;               East - bit1
  00004           55                         CONSTANT BTN_south, 04              ;              South - bit2
  00008           56                         CONSTANT BTN_west, 08               ;               West - bit3
  0000A           57                         CONSTANT switch0, 10                ;  Switches        0 - bit4
  00014           58                         CONSTANT switch1, 20                ;                  1 - bit5
  00028           59                         CONSTANT switch2, 40                ;                  2 - bit6
  00050           60                         CONSTANT switch3, 80                ;                  3 - bit7
                  61                         ;
                  62                         ;LCD interface ports
                  63                         ;
                  64                         ;The master enable signal is not used by the LCD display itself
                  65                         ;but may be required to confirm that LCD communication is active.
                  66                         ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  67                         ;is used because it shares the same data pins and conflicts must be avoided.
                  68                         ;
  00028           69                         CONSTANT LCD_output_port, 40        ;LCD character module output data and control
  00001           70                         CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
  00002           71                         CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
  00004           72                         CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
  00008           73                         CONSTANT LCD_drive, 08              ;   Master enable (active High) - bit3
  0000A           74                         CONSTANT LCD_DB4, 10                ;   4-bit              Data DB4 - bit4
  00014           75                         CONSTANT LCD_DB5, 20                ;   interface          Data DB5 - bit5
  00028           76                         CONSTANT LCD_DB6, 40                ;                      Data DB6 - bit6
  00050           77                         CONSTANT LCD_DB7, 80                ;                      Data DB7 - bit7
                  78                         ;
                  79                         ;
  00002           80                         CONSTANT LCD_input_port, 02         ;LCD character module input data
  00001           81                         CONSTANT LCD_read_spare0, 01        ;    Spare bits               - bit0
  00002           82                         CONSTANT LCD_read_spare1, 02        ;    are zero                 - bit1
  00004           83                         CONSTANT LCD_read_spare2, 04        ;                             - bit2
  00008           84                         CONSTANT LCD_read_spare3, 08        ;                             - bit3
  0000A           85                         CONSTANT LCD_read_DB4, 10           ;    4-bit           Data DB4 - bit4
  00014           86                         CONSTANT LCD_read_DB5, 20           ;    interface       Data DB5 - bit5
  00028           87                         CONSTANT LCD_read_DB6, 40           ;                    Data DB6 - bit6
  00050           88                         CONSTANT LCD_read_DB7, 80           ;                    Data DB7 - bit7
                  89                         ;
                  90                         ;
                  91                         ;
                  92                         ;
                  93                         ;Special Register usage
                  94                         ;
                  95                         ;
                  96                         ;
                  97                         ;Scratch Pad Memory Locations
                  98                         ;
                  99                         ;Values read from the A/D converter
                 100                         ;
  00000          101                         CONSTANT ADC0_lsb, 00               ;ADC Channel 0 value LS-Byte
  00001          102                         CONSTANT ADC0_msb, 01               ;                    MS-Byte
                 103                         ;
  00002          104                         CONSTANT ADC1_lsb, 02               ;ADC Channel 1 value LS-Byte
  00003          105                         CONSTANT ADC1_msb, 03               ;                    MS-Byte
                 106                         ;
                 107                         ;Amplifier gain settings.
                 108                         ;
                 109                         ;Stored value is the 4-bit code for gain setting
                 110                         ;  Code  1   2   3    4     5    6     7
                 111                         ;  Gain -1  -2  -5  -10   -20  -50  -100
  00004          112                         CONSTANT amp_A_gain, 04             ;Amplifier A gain value
  00005          113                         CONSTANT amp_B_gain, 05             ;Amplifier B gain value
                 114                         ;
                 115                         ;Sample counter used to give activity indication on LEDs
                 116                         ;
  00006          117                         CONSTANT sample_count, 06           ;8-bit counter LS-Byte
                 118                         ;
  00007          119                         CONSTANT decimal0, 07               ;5 digit decimal value
  00008          120                         CONSTANT decimal1, 08
  00009          121                         CONSTANT decimal2, 09
                 122                         CONSTANT decimal3, 0A
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
  00000          123                         CONSTANT decimal4, 0B
                 124                         ;
                 125                         ;
                 126                         ;
                 127                         ;
                 128                         ;Useful data constants
                 129                         ;
  00048          130                         CONSTANT VREF_lsb, 72               ;Reference voltage in milli-volts
  00006          131                         CONSTANT VREF_msb, 06               ;Nominal value 1.65v so value is 1650 (0672 hex)
                 132                         ;
                 133                         ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                 134                         ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                 135                         ;calculation highly predictable. The '6' in the following equation even allows for
                 136                         ;'CALL delay_1us' instruction in the initiating code.
                 137                         ;
                 138                         ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 139                         ;
                 140                         ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 141                         ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 142                         ;become lower than intended.
                 143                         ;
  00000          144                         CONSTANT delay_1us_constant, 0B
                 145                         ;
                 146                         ;
                 147                         ;
                 148                         ;ASCII table
                 149                         ;
  0003D          150                         CONSTANT character_a, 61
  0003E          151                         CONSTANT character_b, 62
  0003F          152                         CONSTANT character_c, 63
  00040          153                         CONSTANT character_d, 64
  00041          154                         CONSTANT character_e, 65
  00042          155                         CONSTANT character_f, 66
  00043          156                         CONSTANT character_g, 67
  00044          157                         CONSTANT character_h, 68
  00045          158                         CONSTANT character_i, 69
                 159                         CONSTANT character_j, 6A
E: identifier cannot start with a digit: `6A'.
E: unexpected end of line.
                 160                         CONSTANT character_k, 6B
E: identifier cannot start with a digit: `6B'.
E: unexpected end of line.
                 161                         CONSTANT character_l, 6C
E: identifier cannot start with a digit: `6C'.
E: unexpected end of line.
  00006          162                         CONSTANT character_m, 6D
                 163                         CONSTANT character_n, 6E
E: identifier cannot start with a digit: `6E'.
E: unexpected end of line.
                 164                         CONSTANT character_o, 6F
E: identifier cannot start with a digit: `6F'.
E: unexpected end of line.
  00046          165                         CONSTANT character_p, 70
  00047          166                         CONSTANT character_q, 71
  00048          167                         CONSTANT character_r, 72
  00049          168                         CONSTANT character_s, 73
  0004A          169                         CONSTANT character_t, 74
  0004B          170                         CONSTANT character_u, 75
  0004C          171                         CONSTANT character_v, 76
  0004D          172                         CONSTANT character_w, 77
  0004E          173                         CONSTANT character_x, 78
  0004F          174                         CONSTANT character_y, 79
                 175                         CONSTANT character_z, 7A
E: identifier cannot start with a digit: `7A'.
E: unexpected end of line.
                 176                         CONSTANT character_A, 41
E: symbol already defined: "CHARACTER_A".
                 177                         CONSTANT character_B, 42
E: symbol already defined: "CHARACTER_B".
                 178                         CONSTANT character_C, 43
E: symbol already defined: "CHARACTER_C".
                 179                         CONSTANT character_D, 44
E: symbol already defined: "CHARACTER_D".
                 180                         CONSTANT character_E, 45
E: symbol already defined: "CHARACTER_E".
                 181                         CONSTANT character_F, 46
E: symbol already defined: "CHARACTER_F".
                 182                         CONSTANT character_G, 47
E: symbol already defined: "CHARACTER_G".
                 183                         CONSTANT character_H, 48
E: symbol already defined: "CHARACTER_H".
                 184                         CONSTANT character_I, 49
E: symbol already defined: "CHARACTER_I".
                 185                         CONSTANT character_J, 4A
E: identifier cannot start with a digit: `4A'.
E: unexpected end of line.
                 186                         CONSTANT character_K, 4B
E: identifier cannot start with a digit: `4B'.
E: unexpected end of line.
                 187                         CONSTANT character_L, 4C
E: identifier cannot start with a digit: `4C'.
E: unexpected end of line.
                 188                         CONSTANT character_M, 4D
E: symbol already defined: "CHARACTER_M".
                 189                         CONSTANT character_N, 4E
E: identifier cannot start with a digit: `4E'.
E: unexpected end of line.
                 190                         CONSTANT character_O, 4F
E: identifier cannot start with a digit: `4F'.
E: unexpected end of line.
                 191                         CONSTANT character_P, 50
E: symbol already defined: "CHARACTER_P".
                 192                         CONSTANT character_Q, 51
E: symbol already defined: "CHARACTER_Q".
                 193                         CONSTANT character_R, 52
E: symbol already defined: "CHARACTER_R".
                 194                         CONSTANT character_S, 53
E: symbol already defined: "CHARACTER_S".
                 195                         CONSTANT character_T, 54
E: symbol already defined: "CHARACTER_T".
                 196                         CONSTANT character_U, 55
E: symbol already defined: "CHARACTER_U".
                 197                         CONSTANT character_V, 56
E: symbol already defined: "CHARACTER_V".
                 198                         CONSTANT character_W, 57
E: symbol already defined: "CHARACTER_W".
                 199                         CONSTANT character_X, 58
E: symbol already defined: "CHARACTER_X".
                 200                         CONSTANT character_Y, 59
E: symbol already defined: "CHARACTER_Y".
                 201                         CONSTANT character_Z, 5A
E: identifier cannot start with a digit: `5A'.
E: unexpected end of line.
  0001E          202                         CONSTANT character_0, 30
  0001F          203                         CONSTANT character_1, 31
  00020          204                         CONSTANT character_2, 32
  00021          205                         CONSTANT character_3, 33
  00022          206                         CONSTANT character_4, 34
  00023          207                         CONSTANT character_5, 35
  00024          208                         CONSTANT character_6, 36
  00025          209                         CONSTANT character_7, 37
  00026          210                         CONSTANT character_8, 38
  00027          211                         CONSTANT character_9, 39
                 212                         CONSTANT character_colon, 3A
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 213                         CONSTANT character_stop, 2E
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
                 214                         CONSTANT character_semi_colon, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
  00002          215                         CONSTANT character_minus, 2D
                 216                         CONSTANT character_divide, 2F       ;'/'
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 217                         CONSTANT character_plus, 2B
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 218                         CONSTANT character_comma, 2C
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 219                         CONSTANT character_less_than, 3C
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
                 220                         CONSTANT character_greater_than, 3E
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
  00003          221                         CONSTANT character_equals, 3D
  00014          222                         CONSTANT character_space, 20
  00000          223                         CONSTANT character_CR, 0D           ;carriage return
                 224                         CONSTANT character_question, 3F     ;'?'
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
  00018          225                         CONSTANT character_dollar, 24
  00015          226                         CONSTANT character_exclaim, 21      ;'!'
  00008          227                         CONSTANT character_BS, 08           ;Back Space command character
                 228                         ;
                 229                         ;
                 230                         ;
                 231                         ;
                 232                         ;
                 233                         ;
                 234                         ;Initialise the system
                 235                         ;
                 236                         ;
000 2011A        237             cold_start: CALL SPI_init                       ;initialise SPI bus ports
001 201F1        238                         CALL LCD_reset                      ;initialise LCD display
                 239                         ;
                 240                         ;Write welcome message to LCD display
                 241                         ;
002 001A0        242                         LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
003 20206        243                         CALL LCD_cursor
004 20149        244                         CALL disp_PicoBlaze                 ;Display 'PicoBlaze Inside'
005 00170        245                         LOAD s5, 23                         ;Line 2 position 3
E: symbol not defined: `S5'.
W: value out of range: 0x17, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x7.
006 20206        246                         CALL LCD_cursor
007 2015C        247                         CALL disp_ADC_Control
008 201AB        248                         CALL delay_1s                       ;wait 5 seconds
009 201AB        249                         CALL delay_1s
00A 201AB        250                         CALL delay_1s
00B 201AB        251                         CALL delay_1s
00C 201AB        252                         CALL delay_1s
00D 20201        253                         CALL LCD_clear                      ;Clear display
                 254                         ;
00E 00100        255                         LOAD s0, 00                         ;clear event counter
E: symbol not defined: `S0'.
00F 2F106        256                         STORE s0, sample_count
E: symbol not defined: `S0'.
                 257                         ;
                 258                         ;
                 259                         ;
                 260                         ;
010 00110        261                         LOAD s0, 01                         ;set initial amplifier gain to 1 on both channels
E: symbol not defined: `S0'.
011 2F104        262                         STORE s0, amp_A_gain
E: symbol not defined: `S0'.
012 2F105        263                         STORE s0, amp_B_gain
E: symbol not defined: `S0'.
013 2208E        264                         JUMP new_gain_set                   ;set, display the initial gain and enable interrupts
                 265                         ;
                 266                         ;
                 267                         ;The program is interrupt driven to maintain an 8KHz sample rate. The main body
                 268                         ;of the program waits for an interrupt to occur. The interrupt updates all four
                 269                         ;analogue outputs with values stored in scratch pad memory. This takes approximately
                 270                         ;58us of the 125us available between interrupts. The main program then prepares
                 271                         ;new values for the analogue outputs (in less than 67us) before waiting for the
                 272                         ;next interrupt.
                 273                         ;
                 274                         ;
014 00110        275             warm_start: LOAD sF, FF                         ;flag set and wait for interrupt to be serviced
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
015 28001        276                         ENABLE INTERRUPT                    ;normal operation
016 09100        277               wait_int: INPUT sE, switch_port               ;test for button press changes to amplifier gain
E: symbol not defined: `SE'.
017 0C110        278                         TEST sE, BTN_north                  ;sE used as this in not effected by ISR
E: symbol not defined: `SE'.
018 36082        279                         JUMP NZ, gain_increase
019 0C140        280                         TEST sE, BTN_south
E: symbol not defined: `SE'.
01A 36089        281                         JUMP NZ, gain_decrease
01B 1C110        282                         COMPARE sF, FF                      ;wait for interrupt
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
01C 32016        283                         JUMP Z, wait_int                    ;interrupt clears the flag
                 284                         ;
                 285                         ;
                 286                         ;
                 287                         ;Drive LEDs with simple binary count of the samples to indicate
                 288                         ;that the design is active.
                 289                         ;
01D 0B106        290                         FETCH s0, sample_count              ;increment counter
E: symbol not defined: `S0'.
01E 10110        291                         ADD s0, 01
E: symbol not defined: `S0'.
01F 2F106        292                         STORE s0, sample_count
E: symbol not defined: `S0'.
020 2D150        293                         OUTPUT s0, LED_port                 ;count increments at 1Hz
E: symbol not defined: `S0'.
                 294                         ;
                 295                         ;
                 296                         ;Display the A/D Channel 0 value as hex on LCD
                 297                         ;
                 298                         LOAD s5, 2C                         ;Line 2 position 12
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
021 20206        299                         CALL LCD_cursor
022 0B101        300                         FETCH s0, ADC0_msb
E: symbol not defined: `S0'.
023 20191        301                         CALL disp_hex_byte
024 0B100        302                         FETCH s0, ADC0_lsb
E: symbol not defined: `S0'.
025 20191        303                         CALL disp_hex_byte
                 304                         ;
                 305                         ;
                 306                         ;
                 307                         ;Convert A/D channel 0 value to decimal voltage
                 308                         ;
                 309                         ;The 14-bit signed value from the A/D (sign extended to 16-bits)
                 310                         ;relates to a voltage in the range -1.25v to +1.25v at the input
                 311                         ;to the A/D converter relative to the 1.65v mid-rail reference point.
                 312                         ;
                 313                         ;The 14-bit value can be translated into the -1.25v to +1.25v using the
                 314                         ;simple equation...
                 315                         ;
                 316                         ;   ADin = AD_value x 1.25/8192
                 317                         ;
                 318                         ;It is possible to scale the AD_value by 1.25/8192 using a fixed point
                 319                         ;representation.
                 320                         ;
                 321                         ;However, it is also possible to scale it by another factor at the
                 322                         ;same time which nicely converts to a binary value which is readily
                 323                         ;converted to decimal. This can be achieved by example...
                 324                         ;
                 325                         ;For an input to the A/D converter of +1.25v relative to the reference,
                 326                         ;the A/D will output the maximum conversion of 1FFF (+8191).
                 327                         ;
                 328                         ;In this case we would like to have the result value +1.250v which can be represented
                 329                         ;by the integer value +1250 with appropiate positioning of the decimal point.
                 330                         ;The constant to achieve this conversion is +1250/8191=+0.152606...
                 331                         ;Also a number requiring fixed point representation but how many bits to use?
                 332                         ;
                 333                         ;The way to resolve this is to realise that a multiplication will be
                 334                         ;performed and it would be nice if the +1250 result ended up in a register pair.
                 335                         ;So if we perform a 16x16-bit multiplication such that the upper 16-bits of
                 336                         ;the 32-bit result is the required value, then everything will resolve itself.
                 337                         ;
                 338                         ;Hence the constant required is actually (1250x(2^16))/8191=+10001 (2711 hex).
                 339                         ;
                 340                         ;Using the example 1FFF x 2711 = 04E1F8EF
                 341                         ;   of which the upper 16-bits = 04E1 (+1249 decimal)
                 342                         ;
                 343                         ;Likewise the other limit case is E000 x 2711 = FB1DE000
                 344                         ;   of which the upper 16-bits = FB1D (-1251 decimal)
                 345                         ;
                 346                         ;The values can be made perfect by rounding before truncation
                 347                         ;
026 0B100        348                         FETCH s2, ADC0_lsb                  ;Read A/D channel 0 value
E: symbol not defined: `S2'.
027 0B101        349                         FETCH s3, ADC0_msb
E: symbol not defined: `S3'.
028 001B0        350                         LOAD s0, 11                         ;scaling value for input to A/D converter
E: symbol not defined: `S0'.
029 001B0        351                         LOAD s1, 27
E: symbol not defined: `S1'.
W: value out of range: 0x1b, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xb.
02A 200E0        352                         CALL mult_16x16s                    ;[s7,s6,s5,s4]=[s3,s2]x[s1,s0]
02B 14106        353                         SL0 s5                              ;round value before truncation
E: symbol not defined: `S5'.
02C 12100        354                         ADDCY s6, 00
E: symbol not defined: `S6'.
02D 12100        355                         ADDCY s7, 00
E: symbol not defined: `S7'.
                 356                         ;
                 357                         ;The register pair [s7,s6] now holds the binary value
                 358                         ;representing the input level to the A/D converter in milli-volts.
                 359                         ;This is now displayed on the LCD. Negative values need to be converted to
                 360                         ;signed magnitude for display.
                 361                         ;
02E 00140        362                         LOAD s5, 20                         ;Line 2 position 0
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
02F 20206        363                         CALL LCD_cursor
030 2017A        364                         CALL disp_AD                        ;display A/D=
031 0C100        365                         TEST s7, 80                         ;test sign bit of value
E: symbol not defined: `S7'.
W: value out of range: 0x50, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
032 36035        366                         JUMP NZ, neg_AD
033 00110        367                         LOAD s5, character_plus
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_PLUS'.
034 2203A        368                         JUMP AD_sign
035 06110        369                 neg_AD: XOR s6, FF                          ;complement [s7,s6] to make positive
E: symbol not defined: `S6'.
E: symbol not defined: `FF'.
036 06110        370                         XOR s7, FF
E: symbol not defined: `S7'.
E: symbol not defined: `FF'.
037 10110        371                         ADD s6, 01
E: symbol not defined: `S6'.
038 12100        372                         ADDCY s7, 00
E: symbol not defined: `S7'.
039 00120        373                         LOAD s5, character_minus
E: symbol not defined: `S5'.
03A 201C9        374                AD_sign: CALL LCD_write_data                 ;display sign of value
03B 20070        375                         CALL disp_volts                     ;display 4 digit value as X.XXXv
                 376                         ;
                 377                         ;Convert A/D channel 0 value to display the VINA decimal voltage
                 378                         ;
                 379                         ;The same fundamental technique can be used to convert the 14-bit
                 380                         ;A/D value into the level at the VINA input except that two more factors
                 381                         ;must be considered.
                 382                         ;
                 383                         ;The first is that the amplifier inverts and has gain. Therefore the
                 384                         ;VINA input level is opposite polarity and could be a smaller deviation
                 385                         ;from the mid rail 1.65v reference.
                 386                         ;
                 387                         ;Secondly, to display the actual voltage level at the VINA terminal
                 388                         ;the 1.65v offset must be added.
                 389                         ;
                 390                         ;The voltage at the VINA input is therefore...
                 391                         ;
                 392                         ;   VINA = [AD_value x (1.25/(8192 x G))]+1.65
                 393                         ;
                 394                         ;Following the same methodology as for the A/D value, it means that there
                 395                         ;is a set of scaling factors to deal with the negative gain values.
                 396                         ;
                 397                         ; K = (+1250 x (2^16)) / (8191 x G)
                 398                         ;
                 399                         ;        G             K     (K Hex)
                 400                         ;       -1          -10001   (D8EF)
                 401                         ;       -2           -5001   (EC77)
                 402                         ;       -5           -2000   (F830)
                 403                         ;      -10           -1000   (FC18)
                 404                         ;      -20            -500   (FE0C)
                 405                         ;      -50            -200   (FF38)
                 406                         ;     -100            -100   (FF9C)
                 407                         ;
03C 0B100        408                         FETCH s2, ADC0_lsb                  ;Read A/D channel 0 value
E: symbol not defined: `S2'.
03D 0B101        409                         FETCH s3, ADC0_msb
E: symbol not defined: `S3'.
03E 0B104        410                         FETCH s4, amp_A_gain                ;read A gain and select appropiate gain setting
E: symbol not defined: `S4'.
03F 00110        411                         LOAD s0, EF                         ;scaling value for amplifier gain of -1
E: symbol not defined: `S0'.
E: symbol not defined: `EF'.
040 00110        412                         LOAD s1, D8
E: symbol not defined: `S1'.
E: symbol not defined: `D8'.
041 1C110        413                         COMPARE s4, 01
E: symbol not defined: `S4'.
042 32057        414                         JUMP Z, mult_VINA
043 001D0        415                         LOAD s0, 77                         ;scaling value for amplifier gain of -2
E: symbol not defined: `S0'.
W: value out of range: 0x4d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
044 00110        416                         LOAD s1, EC
E: symbol not defined: `S1'.
E: symbol not defined: `EC'.
045 1C120        417                         COMPARE s4, 02
E: symbol not defined: `S4'.
046 32057        418                         JUMP Z, mult_VINA
047 001E0        419                         LOAD s0, 30                         ;scaling value for amplifier gain of -5
E: symbol not defined: `S0'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
048 00110        420                         LOAD s1, F8
E: symbol not defined: `S1'.
E: symbol not defined: `F8'.
049 1C130        421                         COMPARE s4, 03
E: symbol not defined: `S4'.
04A 32057        422                         JUMP Z, mult_VINA
04B 00120        423                         LOAD s0, 18                         ;scaling value for amplifier gain of -10
E: symbol not defined: `S0'.
W: value out of range: 0x12, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x2.
04C 00110        424                         LOAD s1, FC
E: symbol not defined: `S1'.
E: symbol not defined: `FC'.
04D 1C150        425                         COMPARE s4, 05
E: symbol not defined: `S4'.
04E 32057        426                         JUMP Z, mult_VINA
                 427                         LOAD s0, 0C                         ;scaling value for amplifier gain of -20
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
04F 00110        428                         LOAD s1, FE
E: symbol not defined: `S1'.
E: symbol not defined: `FE'.
050 1C160        429                         COMPARE s4, 06
E: symbol not defined: `S4'.
051 32057        430                         JUMP Z, mult_VINA
052 00160        431                         LOAD s0, 38                         ;scaling value for amplifier gain of -50
E: symbol not defined: `S0'.
W: value out of range: 0x26, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
053 00110        432                         LOAD s1, FF
E: symbol not defined: `S1'.
E: symbol not defined: `FF'.
054 1C110        433                         COMPARE s4, 01
E: symbol not defined: `S4'.
055 32057        434                         JUMP Z, mult_VINA
                 435                         LOAD s0, 9C                         ;scaling value for amplifier gain of -100
E: identifier cannot start with a digit: `9C'.
E: unexpected end of line.
056 00110        436                         LOAD s1, FF
E: symbol not defined: `S1'.
E: symbol not defined: `FF'.
057 200E0        437              mult_VINA: CALL mult_16x16s                    ;[s7,s6,s5,s4]=[s3,s2]x[s1,s0]
058 14106        438                         SL0 s5                              ;round value before truncation
E: symbol not defined: `S5'.
059 12100        439                         ADDCY s6, 00
E: symbol not defined: `S6'.
05A 12100        440                         ADDCY s7, 00
E: symbol not defined: `S7'.
05B 10180        441                         ADD s6, VREF_lsb                    ;add 1.65v offset represented at 1650 (0672 hex)
E: symbol not defined: `S6'.
W: value out of range: 0x48, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
05C 12160        442                         ADDCY s7, VREF_msb
E: symbol not defined: `S7'.
                 443                         ;
                 444                         ;The register pair [s7,s6] now holds the binary value
                 445                         ;representing the VINA input level in milli-volts.
                 446                         ;This must be a positive value due to the offset of 1.65v
                 447                         ;being greater than the maximum relative range of -1.25v to +1.25v.
                 448                         ;This binary value can now be converted to a decimal digits
                 449                         ;and displayed on the LCD.
                 450                         ;
                 451                         ;If the A/D value is maximum negative (E000) or maximum positive (1FFF)
                 452                         ;then an indication of the actual value being applied being greater or
                 453                         ;less than that computed will be made.
                 454                         ;
05D 00110        455                         LOAD s5, 17                         ;Line 1 position 7
E: symbol not defined: `S5'.
W: value out of range: 0x11, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
05E 20206        456                         CALL LCD_cursor
05F 20173        457                         CALL disp_VA                        ;display VA=
060 0B100        458                         FETCH s2, ADC0_lsb                  ;Read A/D channel 0 value
E: symbol not defined: `S2'.
061 0B101        459                         FETCH s3, ADC0_msb
E: symbol not defined: `S3'.
062 1C110        460                         COMPARE s3, E0                      ;test for maximum negative
E: symbol not defined: `S3'.
E: symbol not defined: `E0'.
063 36001        461                         JUMP NZ, test_max_pos
E: symbol not defined: `TEST_MAX_POS'.
064 1C100        462                         COMPARE s2, 00
E: symbol not defined: `S2'.
065 36001        463                         JUMP NZ, test_max_pos
E: symbol not defined: `TEST_MAX_POS'.
066 00110        464                         LOAD s5, character_greater_than     ;display >
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_GREATER_THAN'.
067 201C9        465                         CALL LCD_write_data
068 2206E        466                         JUMP disp_VINA_volts
                 467           test_max_pos: COMPARE s3, 1F                      ;test for maximum positive
E: identifier cannot start with a digit: `1F'.
E: unexpected end of line.
069 3606E        468                         JUMP NZ, disp_VINA_volts
06A 1C110        469                         COMPARE s2, FF
E: symbol not defined: `S2'.
E: symbol not defined: `FF'.
06B 3606E        470                         JUMP NZ, disp_VINA_volts
06C 00110        471                         LOAD s5, character_less_than        ;display <
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_LESS_THAN'.
06D 201C9        472                         CALL LCD_write_data
06E 20070        473        disp_VINA_volts: CALL disp_volts                     ;display 4 digit value as X.XXXv
06F 22014        474                         JUMP warm_start
                 475                         ;
                 476                         ;
                 477                         ;**************************************************************************************
                 478                         ;Display voltage level at in the form X.XXX on the LCD at current cursor position
                 479                         ;**************************************************************************************
                 480                         ;
                 481                         ;Value to be displayed must be unsigned (positive) in the
                 482                         ;[s7,s6] register pair. Only the lower 4 digits are displayed.
                 483                         ;
070 200FD        484             disp_volts: CALL integer16_to_BCD               ;convert [s7,s6] to BCD in scratch pad memory
071 0B101        485                         FETCH s5, decimal3
E: symbol not defined: `S5'.
E: symbol not defined: `DECIMAL3'.
072 101E0        486                         ADD s5, 30                          ;convert to ASCII
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
073 201C9        487                         CALL LCD_write_data
074 00110        488                         LOAD s5, character_stop
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_STOP'.
075 201C9        489                         CALL LCD_write_data
076 0B109        490                         FETCH s5, decimal2
E: symbol not defined: `S5'.
077 101E0        491                         ADD s5, 30                          ;convert to ASCII
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
078 201C9        492                         CALL LCD_write_data
079 0B108        493                         FETCH s5, decimal1
E: symbol not defined: `S5'.
07A 101E0        494                         ADD s5, 30                          ;convert to ASCII
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
07B 201C9        495                         CALL LCD_write_data
07C 0B107        496                         FETCH s5, decimal0
E: symbol not defined: `S5'.
07D 101E0        497                         ADD s5, 30                          ;convert to ASCII
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
07E 201C9        498                         CALL LCD_write_data
07F 00140        499                         LOAD s5, character_space            ;ensure next position is cleared
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
080 201C9        500                         CALL LCD_write_data
081 25000        501                         RETURN
                 502                         ;
                 503                         ;**************************************************************************************
                 504                         ;Changing amplifier gain using press buttons
                 505                         ;**************************************************************************************
                 506                         ;
                 507                         ;Possible gain values are
                 508                         ;   Gain   Amplifier
                 509                         ;            code
                 510                         ;    -1        1
                 511                         ;    -2        2
                 512                         ;    -5        3
                 513                         ;   -10        4
                 514                         ;   -20        5
                 515                         ;   -50        6
                 516                         ;  -100        7
                 517                         ;
082 28000        518          gain_increase: DISABLE INTERRUPT                   ;stop normal operation
083 0B104        519                         FETCH s0, amp_A_gain                ;read current gain
E: symbol not defined: `S0'.
084 10110        520                         ADD s0, 01
E: symbol not defined: `S0'.
085 1C180        521                         COMPARE s0, 08                      ;test for too big
E: symbol not defined: `S0'.
086 3608E        522                         JUMP NZ, new_gain_set
087 00170        523                         LOAD s0, 07                         ;maximum gain
E: symbol not defined: `S0'.
088 2208E        524                         JUMP new_gain_set
089 28000        525          gain_decrease: DISABLE INTERRUPT                   ;stop normal operation
08A 0B104        526                         FETCH s0, amp_A_gain                ;read current gain
E: symbol not defined: `S0'.
08B 18110        527                         SUB s0, 01
E: symbol not defined: `S0'.
08C 3608E        528                         JUMP NZ, new_gain_set
08D 00110        529                         LOAD s0, 01                         ;minimum gain
E: symbol not defined: `S0'.
08E 2F104        530           new_gain_set: STORE s0, amp_A_gain                ;store new value
E: symbol not defined: `S0'.
08F 0B105        531                         FETCH s2, amp_B_gain                ;form the amplifier control byte
E: symbol not defined: `S2'.
090 14106        532                         SL0 s2                              ;B amplifier set by upper 4 bits
E: symbol not defined: `S2'.
091 14106        533                         SL0 s2
E: symbol not defined: `S2'.
092 14106        534                         SL0 s2
E: symbol not defined: `S2'.
093 14106        535                         SL0 s2
E: symbol not defined: `S2'.
094 04110        536                         OR s2, s0                           ;A amplifier set by lower
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
095 2011D        537                         CALL set_amp                        ;set SPI amplifier
                 538                         ;display gain setting on LCD
096 001A0        539                         LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
097 20206        540                         CALL LCD_cursor
098 00130        541                         LOAD s5, character_G
E: symbol not defined: `S5'.
W: value out of range: 0x43, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
099 201C9        542                         CALL LCD_write_data
09A 00130        543                         LOAD s5, character_equals
E: symbol not defined: `S5'.
09B 201C9        544                         CALL LCD_write_data
09C 00120        545                         LOAD s5, character_minus
E: symbol not defined: `S5'.
09D 201C9        546                         CALL LCD_write_data
09E 0B104        547                         FETCH s0, amp_A_gain                ;read A gain setting
E: symbol not defined: `S0'.
09F 1C110        548                         COMPARE s0, 01                      ;determine actual gain value
E: symbol not defined: `S0'.
0A0 360A8        549                         JUMP NZ, test_A2
0A1 001F0        550                         LOAD s5, character_1                ;gain is -1
E: symbol not defined: `S5'.
W: value out of range: 0x1f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
0A2 201C9        551                         CALL LCD_write_data
0A3 00140        552                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0A4 201C9        553                         CALL LCD_write_data
0A5 00140        554                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0A6 201C9        555                         CALL LCD_write_data
0A7 220DB        556                         JUMP wait_no_press
0A8 1C120        557                test_A2: COMPARE s0, 02
E: symbol not defined: `S0'.
0A9 360B1        558                         JUMP NZ, test_A3
0AA 00100        559                         LOAD s5, character_2                ;gain is -2
E: symbol not defined: `S5'.
W: value out of range: 0x20, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
0AB 201C9        560                         CALL LCD_write_data
0AC 00140        561                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0AD 201C9        562                         CALL LCD_write_data
0AE 00140        563                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0AF 201C9        564                         CALL LCD_write_data
0B0 220DB        565                         JUMP wait_no_press
0B1 1C130        566                test_A3: COMPARE s0, 03
E: symbol not defined: `S0'.
0B2 360BA        567                         JUMP NZ, test_A4
0B3 00130        568                         LOAD s5, character_5                ;gain is -5
E: symbol not defined: `S5'.
W: value out of range: 0x23, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
0B4 201C9        569                         CALL LCD_write_data
0B5 00140        570                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0B6 201C9        571                         CALL LCD_write_data
0B7 00140        572                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0B8 201C9        573                         CALL LCD_write_data
0B9 220DB        574                         JUMP wait_no_press
0BA 1C140        575                test_A4: COMPARE s0, 04
E: symbol not defined: `S0'.
0BB 360C3        576                         JUMP NZ, test_A5
0BC 001F0        577                         LOAD s5, character_1                ;gain is -10
E: symbol not defined: `S5'.
W: value out of range: 0x1f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
0BD 201C9        578                         CALL LCD_write_data
0BE 001E0        579                         LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
0BF 201C9        580                         CALL LCD_write_data
0C0 00140        581                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0C1 201C9        582                         CALL LCD_write_data
0C2 220DB        583                         JUMP wait_no_press
0C3 1C150        584                test_A5: COMPARE s0, 05
E: symbol not defined: `S0'.
0C4 360CC        585                         JUMP NZ, test_A6
0C5 00100        586                         LOAD s5, character_2                ;gain is -20
E: symbol not defined: `S5'.
W: value out of range: 0x20, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
0C6 201C9        587                         CALL LCD_write_data
0C7 001E0        588                         LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
0C8 201C9        589                         CALL LCD_write_data
0C9 00140        590                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0CA 201C9        591                         CALL LCD_write_data
0CB 220DB        592                         JUMP wait_no_press
0CC 1C160        593                test_A6: COMPARE s0, 06
E: symbol not defined: `S0'.
0CD 360D5        594                         JUMP NZ, gain_A7
0CE 00130        595                         LOAD s5, character_5                ;gain is -50
E: symbol not defined: `S5'.
W: value out of range: 0x23, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
0CF 201C9        596                         CALL LCD_write_data
0D0 001E0        597                         LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
0D1 201C9        598                         CALL LCD_write_data
0D2 00140        599                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
0D3 201C9        600                         CALL LCD_write_data
0D4 220DB        601                         JUMP wait_no_press
0D5 001F0        602                gain_A7: LOAD s5, character_1                ;gain is -100
E: symbol not defined: `S5'.
W: value out of range: 0x1f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
0D6 201C9        603                         CALL LCD_write_data
0D7 001E0        604                         LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
0D8 201C9        605                         CALL LCD_write_data
0D9 001E0        606                         LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
0DA 201C9        607                         CALL LCD_write_data
0DB 201A6        608          wait_no_press: CALL delay_20ms                     ;delay to help avoid switch bounce
0DC 09100        609                         INPUT s0, switch_port               ;check for release of press buttons
E: symbol not defined: `S0'.
0DD 0C150        610                         TEST s0, 05                         ;north and south buttons
E: symbol not defined: `S0'.
0DE 360DB        611                         JUMP NZ, wait_no_press
0DF 22014        612                         JUMP warm_start
                 613                         ;
                 614                         ;**************************************************************************************
                 615                         ;16-bit by 16-bit Signed multiplier
                 616                         ;**************************************************************************************
                 617                         ;
                 618                         ;16 bit signed multiplication using shift and add technique.
                 619                         ;The full precision 32-bit product is returned.
                 620                         ;
                 621                         ;The key to signed multiplication is to think of all bits of the second operand
                 622                         ;[s1,s0] as being positive except for the most significant bit. This means that
                 623                         ;the first operand is added to the result in all cases when there is a '1' in the
                 624                         ;second operand except for the MSB case when the first operand is subtracted if there
                 625                         ;is a '1'.
                 626                         ;
                 627                         ;[s7,s6,s5,s4]=[s3,s2]x[s1,s0]
                 628                         ;
                 629                         ;Registers used s0,s1,s2,s3,s4,s5,s6,s7,s8,s9,sA
                 630                         ;
0E0 00100        631            mult_16x16s: LOAD s7, 00                         ;clear accumulator
E: symbol not defined: `S7'.
0E1 00100        632                         LOAD s6, 00
E: symbol not defined: `S6'.
0E2 00100        633                         LOAD s5, 00                         ;Set bit 14 to act as a bit shift counter
E: symbol not defined: `S5'.
0E3 00100        634                         LOAD s4, 00
E: symbol not defined: `S4'.
0E4 00100        635                         LOAD s8, 00                         ;sign extend [s3,s2] to form [s9,s8,s3,s2]
E: symbol not defined: `S8'.
0E5 0C100        636                         TEST s3, 80                         ;test sign of first operand
E: symbol not defined: `S3'.
W: value out of range: 0x50, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
0E6 320E8        637                         JUMP Z, m16s_pos
0E7 00110        638                         LOAD s8, FF
E: symbol not defined: `S8'.
E: symbol not defined: `FF'.
0E8 00110        639               m16s_pos: LOAD s9, s8                         ;[s9,s8,s3,s2]=0000xxxx or FFFFxxxx as required
E: symbol not defined: `S9'.
E: symbol not defined: `S8'.
                 640                         LOAD sA, 0F                         ;15 positive shift and add operations to perform
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
0E9 1410E        641              m16s_loop: SR0 s1                              ;shift right operand [s1,s0]
E: symbol not defined: `S1'.
0EA 14108        642                         SRA s0
E: symbol not defined: `S0'.
0EB 3E0F0        643                         JUMP NC, m16s_noadd                 ;test for a '1'
0EC 10110        644                         ADD s4, s2                          ;32-bit addition [s7,s6,s5,s4]=[s7,s6,s5,s4]+[s9,s8,s3,s2]
E: symbol not defined: `S4'.
E: symbol not defined: `S2'.
0ED 12110        645                         ADDCY s5, s3
E: symbol not defined: `S5'.
E: symbol not defined: `S3'.
0EE 12110        646                         ADDCY s6, s8
E: symbol not defined: `S6'.
E: symbol not defined: `S8'.
0EF 12110        647                         ADDCY s7, s9
E: symbol not defined: `S7'.
E: symbol not defined: `S9'.
0F0 14106        648             m16s_noadd: SL0 s2                              ;multiply first operand by 2
E: symbol not defined: `S2'.
0F1 14100        649                         SLA s3
E: symbol not defined: `S3'.
0F2 14100        650                         SLA s8
E: symbol not defined: `S8'.
0F3 14100        651                         SLA s9
E: symbol not defined: `S9'.
0F4 18110        652                         SUB sA, 01
E: symbol not defined: `SA'.
0F5 360E9        653                         JUMP NZ, m16s_loop                  ;move to next unsigned bit
0F6 0C110        654                         TEST s0, 01                         ;test sign bit of operand [s1,s0]
E: symbol not defined: `S0'.
0F7 3E0FC        655                         JUMP NC, m16s_nosub
0F8 18110        656                         SUB s4, s2                          ;32-bit subtraction [s7,s6,s5,s4]=[s7,s6,s5,s4]-[s9,s8,s3,s2]
E: symbol not defined: `S4'.
E: symbol not defined: `S2'.
0F9 1A110        657                         SUBCY s5, s3
E: symbol not defined: `S5'.
E: symbol not defined: `S3'.
0FA 1A110        658                         SUBCY s6, s8
E: symbol not defined: `S6'.
E: symbol not defined: `S8'.
0FB 1A110        659                         SUBCY s7, s9
E: symbol not defined: `S7'.
E: symbol not defined: `S9'.
0FC 25000        660             m16s_nosub: RETURN
                 661                         ;
                 662                         ;
                 663                         ;
                 664                         ;**************************************************************************************
                 665                         ;16-bit positive integer to 5 digit decimal conversion
                 666                         ;**************************************************************************************
                 667                         ;
                 668                         ;Convert the 16 bit value in register set [s7,s6]
                 669                         ;into the BCD decimal equivalent located in the scratch pad memory
                 670                         ;locations 'decimal0' to 'decimal4' which must be in ascending locations.
                 671                         ;
                 672                         ;Register set [s9,s8,s7,s6] are preserved.
                 673                         ;
                 674                         ;
                 675                         ;Each digit is formed in turn starting with the least significant.
                 676                         ;
                 677                         ;Registers used s0,s1,s2,s3,s4,s5,s6,s7,s8
                 678                         ;
0FD 00150        679       integer16_to_BCD: LOAD s0, 05                         ;5 digits to be formed from value up to 65535
E: symbol not defined: `S0'.
0FE 00170        680                         LOAD s8, decimal0                   ;pointer for LS-Digit
E: symbol not defined: `S8'.
0FF 20105        681        int_to_BCD_loop: CALL divide_16bit_by_10             ;[s7,s6]=[s7,s6]/10  with remainder in s4
100 2F101        682                         STORE s4, (s8)                      ;remainder becomes digit value
E: symbol not defined: `S4'.
E: symbol not defined: `S8'.
101 10110        683                         ADD s8, 01                          ;move to next most significant digit
E: symbol not defined: `S8'.
102 18110        684                         SUB s0, 01                          ;one less digit to compute
E: symbol not defined: `S0'.
103 360FF        685                         JUMP NZ, int_to_BCD_loop
104 25000        686                         RETURN
                 687                         ;
                 688                         ;Divide 16-bit binary integer by 10
                 689                         ;
                 690                         ;The value to be divided is held in register set [s7,s6]
                 691                         ;and this is where the result is returned to.
                 692                         ;
                 693                         ;At then end of the integer division the remainder in the range 0 to 9
                 694                         ;will be in register s4.
                 695                         ;
                 696                         ;Registers used s1,s2,s3,s4,s5,s6,s7
                 697                         ;Other registers are used but are preserved
                 698                         ;
105 00110        699     divide_16bit_by_10: LOAD s4, s6                         ;copy input value to [s5,s4]
E: symbol not defined: `S4'.
E: symbol not defined: `S6'.
106 00110        700                         LOAD s5, s7
E: symbol not defined: `S5'.
E: symbol not defined: `S7'.
107 00100        701                         LOAD s6, 00                         ;clear result
E: symbol not defined: `S6'.
108 00100        702                         LOAD s7, 00
E: symbol not defined: `S7'.
109 00100        703                         LOAD s2, 00                         ;initialise '10' value into msb's of set [s3,s2]
E: symbol not defined: `S2'.
10A 00110        704                         LOAD s3, A0
E: symbol not defined: `S3'.
E: symbol not defined: `A0'.
10B 00100        705                         LOAD s1, 0D                         ;13 subtract and shift iterations to be performed
E: symbol not defined: `S1'.
10C 18110        706             div10_loop: SUB s4, s2                          ;perform 16-bit subtract [s5,s4]-[s3,s2]
E: symbol not defined: `S4'.
E: symbol not defined: `S2'.
10D 1A110        707                         SUBCY s5, s3
E: symbol not defined: `S5'.
E: symbol not defined: `S3'.
10E 3A111        708                         JUMP C, div10_restore
10F 14107        709                         SL1 s6                              ;shift '1' into result because subtract was possible
E: symbol not defined: `S6'.
110 22114        710                         JUMP div10_shifts
111 10110        711          div10_restore: ADD s4, s2                          ;perform 32-bit addition [s5,s4]+[s3,s2]
E: symbol not defined: `S4'.
E: symbol not defined: `S2'.
112 12110        712                         ADDCY s5, s3                        ;to restore value
E: symbol not defined: `S5'.
E: symbol not defined: `S3'.
113 14106        713                         SL0 s6                              ;shift '0' into result because subtract was not possible
E: symbol not defined: `S6'.
114 14100        714           div10_shifts: SLA s7                              ;complete 16-bit shift left
E: symbol not defined: `S7'.
115 1410E        715                         SR0 s3                              ;divide '10' value by 2 (shift right 1 place)
E: symbol not defined: `S3'.
116 14108        716                         SRA s2
E: symbol not defined: `S2'.
117 18110        717                         SUB s1, 01                          ;count iterations
E: symbol not defined: `S1'.
118 3610C        718                         JUMP NZ, div10_loop
119 25000        719                         RETURN
                 720                         ;
                 721                         ;
                 722                         ;**************************************************************************************
                 723                         ;SPI communication routines for Spartan-3E Starter Kit
                 724                         ;**************************************************************************************
                 725                         ;
                 726                         ;These routines will work with two output ports and one input port which should be
                 727                         ;defined as follows using CONSTANT directives.
                 728                         ;   (replace 'pp' with appropriate port address in each case)
                 729                         ;In the list of CONSTANT directives, there are ports associated with all the SPI devices
                 730                         ;provided on the board. Even if some devices are not used, it is vital that the remaining
                 731                         ;devices are disabled. Leaving all signals connected and use of these routines will ensure
                 732                         ;that all other devices are disabled when communicating with a particular device.
                 733                         ;
                 734                         ;
                 735                         ;
                 736                         ;CONSTANT SPI_control_port, pp       ;SPI clock and chip selects
                 737                         ;CONSTANT SPI_sck, 01                ;                  SCK - bit0
                 738                         ;CONSTANT SPI_rom_cs, 02             ;    serial rom select - bit1
                 739                         ;CONSTANT SPI_spare_control, 04      ;                spare - bit2
                 740                         ;CONSTANT SPI_amp_cs, 08             ;     amplifier select - bit3
                 741                         ;CONSTANT SPI_adc_conv, 10           ;          A/D convert - bit4
                 742                         ;CONSTANT SPI_dac_cs, 20             ;           D/A select - bit5
                 743                         ;CONSTANT SPI_amp_shdn, 40           ;       amplifier SHDN - bit6
                 744                         ;CONSTANT SPI_dac_clr, 80            ;            D/A clear - bit7
                 745                         ;
                 746                         ;CONSTANT SPI_output_port, pp        ;SPI data output
                 747                         ;CONSTANT SPI_sdo, 80                ;   SDO - bit7
                 748                         ;
                 749                         ;CONSTANT SPI_input_port, pp         ;SPI data input
                 750                         ;CONSTANT SPI_sdi, 80                ;             SDI - bit7
                 751                         ;CONSTANT SPI_amp_sdi, 40            ;   amplifier SDI - bit6
                 752                         ;
                 753                         ;
                 754                         ;
                 755                         ;
                 756                         ;Initialise SPI bus
                 757                         ;
                 758                         ;This routine should be used to initialise the SPI bus.
                 759                         ;The SCK clock is made low.
                 760                         ;Device selections are made inactive as follows
                 761                         ;   SPI_sck      = 0      Clock is Low (required)
                 762                         ;   SPI_rom_cs   = 1      Deselect ROM
                 763                         ;   spare        = 1      spare control bit
                 764                         ;   SPI_amp_cs   = 1      Deselect amplifier
                 765                         ;   SPI_adc_conv = 0      A/D convert ready to apply positive pulse
                 766                         ;   SPI_dac_cs   = 1      Deselect D/A
                 767                         ;   SPI_amp_shdn = 0      Amplifier active and available
                 768                         ;   SPI_dac_clr  = 1      D/A clear off
                 769                         ;
11A 00110        770               SPI_init: LOAD s0, AE                         ;normally AE
E: symbol not defined: `S0'.
E: symbol not defined: `AE'.
11B 2D108        771                         OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
11C 25000        772                         RETURN
                 773                         ;
                 774                         ;
                 775                         ;
                 776                         ;
                 777                         ;**************************************************************************************
                 778                         ;SPI communication routines for Programmable Amplifier
                 779                         ;**************************************************************************************
                 780                         ;
                 781                         ;
                 782                         ;Set the A and B channel gain of the Dual Amplifier (LTC6912-1).
                 783                         ;
                 784                         ;The gain value should be provided in the s2 register with the upper nibble
                 785                         ;defining the gain for the B channel and lower nibble the gain for the A channel.
                 786                         ; 0000 = 0 hex = Gain  0 with input hi-Z and output driving
                 787                         ; 0001 = 1 hex = Gain -1
                 788                         ; 0010 = 2 hex = Gain -2
                 789                         ; 0011 = 3 hex = Gain -5
                 790                         ; 0100 = 4 hex = Gain -10
                 791                         ; 0101 = 5 hex = Gain -20
                 792                         ; 0110 = 6 hex = Gain -50
                 793                         ; 0111 = 7 hex = Gain -100
                 794                         ; 1000 = 8 hex = software shutdown (power on default). Hi-Z output.
                 795                         ;
                 796                         ;On return, the s2, register will contain the response from the LTC6912-1 amplifier.
                 797                         ;This will be the same format and indicate the previous setting of the amplifier.
                 798                         ;The response is obtained from the dedicated AMP_SDI signal since the LTC6912 output
                 799                         ;is always active and can not be on a shared SPI bus.
                 800                         ;
11D 2011A        801                set_amp: CALL SPI_init                       ;ensure known state of bus and s0 register
11E 06180        802                         XOR s0, SPI_amp_cs                  ;select low on Amplifier chip select
E: symbol not defined: `S0'.
11F 2D108        803                         OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
120 00180        804                         LOAD s1, 08                         ;8-bits to transmit and receive
E: symbol not defined: `S1'.
121 2D104        805       next_amp_SPI_bit: OUTPUT s2, SPI_output_port          ;output data bit
E: symbol not defined: `S2'.
122 06110        806                         XOR s0, SPI_sck                     ;clock High (bit0)
E: symbol not defined: `S0'.
123 2D108        807                         OUTPUT s0, SPI_control_port         ;drive clock High
E: symbol not defined: `S0'.
124 09101        808                         INPUT s3, SPI_input_port            ;read input bit
E: symbol not defined: `S3'.
125 0C180        809                         TEST s3, SPI_amp_sdi                ;detect state of received bit
E: symbol not defined: `S3'.
W: value out of range: 0x28, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
126 14100        810                         SLA s2                              ;shift new data into result and move to next transmit bit
E: symbol not defined: `S2'.
127 06110        811                         XOR s0, SPI_sck                     ;clock Low (bit0)
E: symbol not defined: `S0'.
128 2D108        812                         OUTPUT s0, SPI_control_port         ;drive clock Low
E: symbol not defined: `S0'.
129 18110        813                         SUB s1, 01                          ;count bits
E: symbol not defined: `S1'.
12A 36121        814                         JUMP NZ, next_amp_SPI_bit           ;repeat until finished
12B 06180        815                         XOR s0, SPI_amp_cs                  ;deselect the amplifier
E: symbol not defined: `S0'.
12C 2D108        816                         OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
12D 25000        817                         RETURN
                 818                         ;
                 819                         ;
                 820                         ;
                 821                         ;**************************************************************************************
                 822                         ;SPI communication routines for A/D Converter
                 823                         ;**************************************************************************************
                 824                         ;
                 825                         ;
                 826                         ;
                 827                         ;Sample A/D converter (LTC1407A-1) and return results.
                 828                         ;
                 829                         ;Note there is a latency of one read to obtain the value. Each read results in the
                 830                         ;the analogue inputs being sampled and converted but this value will only be transmitted
                 831                         ;during the next read and conversion cycle.
                 832                         ;
                 833                         ;The results are returned as follows.
                 834                         ;   Channel 0 in registers [s9,s8]
                 835                         ;   Channel 1 in registers [s7,s6]
                 836                         ;Where each is a 14-bit twos complement value sign extended to 16-bits.
                 837                         ;
                 838                         ;Each 14-bit value represents the analogue voltage in the range -1.25v to +1.25v
                 839                         ;relative to the reference voltage of 1.65v (3.3v/2). Hence the actual input voltage
                 840                         ;range is 0.4v to 2.9v. Since the input to the A/D is supplied via the programmable
                 841                         ;amplifier, the VINA and VINB inputs are inverted and may cover a smaller range if                       ;
                 842                         ;desired.
                 843                         ;
                 844                         ;Examples
                 845                         ;   VINA = 0.65v with gain=-1 means input to A/D = 2.65v
                 846                         ;      This is equivalent to +1.00v which is value (8192/1.25)*1 = 6553 (1999 hex)
                 847                         ;
                 848                         ;   VINA = 2.65v with gain=-1 means input to A/D = 0.65v
                 849                         ;      This is equivalent to -1.00v which is value (2048/1.25)*-1 = -6553 (E667 hex)
                 850                         ;
                 851                         ;
                 852                         ;Although the A/D converter claims to be an SPI device, it really
                 853                         ;does not conform to the normal specification of the 4-wire interface.
                 854                         ;
                 855                         ;Firstly the CONV signal is only pulsed High and does not behave like
                 856                         ;a normal active low select signal. Secondly, the communication is
                 857                         ;34 bits which does not fit a byte boundary, and thirdly, the data output
                 858                         ;to its SDO pin changes as a result of rising edges of SCK clock which
                 859                         ;is not the same as the falling edge used by other devices.
                 860                         ;
12E 2011A        861               adc_read: CALL SPI_init                       ;ensure known state of bus and s0 register
12F 061A0        862                         XOR s0, SPI_adc_conv                ;Pulse AD-CONV High to take sample and start
E: symbol not defined: `S0'.
130 2D108        863                         OUTPUT s0, SPI_control_port         ;  conversion and transmission of data.
E: symbol not defined: `S0'.
131 061A0        864                         XOR s0, SPI_adc_conv                ;AD-CONV Low
E: symbol not defined: `S0'.
132 2D108        865                         OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
133 00160        866                         LOAD s1, 22                         ;34 clocks to read all data
E: symbol not defined: `S1'.
W: value out of range: 0x16, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
134 06110        867           next_adc_bit: XOR s0, SPI_sck                     ;clock High (bit0)
E: symbol not defined: `S0'.
135 2D108        868                         OUTPUT s0, SPI_control_port         ;drive clock High
E: symbol not defined: `S0'.
136 06110        869                         XOR s0, SPI_sck                     ;clock Low (bit0)
E: symbol not defined: `S0'.
137 2D108        870                         OUTPUT s0, SPI_control_port         ;drive clock Low
E: symbol not defined: `S0'.
138 09101        871                         INPUT s3, SPI_input_port            ;read input bit
E: symbol not defined: `S3'.
139 0C100        872                         TEST s3, SPI_sdi                    ;detect state of received bit
E: symbol not defined: `S3'.
W: value out of range: 0x50, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
13A 14100        873                         SLA s6                              ;shift new data into result registers
E: symbol not defined: `S6'.
13B 14100        874                         SLA s7
E: symbol not defined: `S7'.
13C 14100        875                         SLA s8
E: symbol not defined: `S8'.
13D 14100        876                         SLA s9
E: symbol not defined: `S9'.
13E 18110        877                         SUB s1, 01                          ;count bits
E: symbol not defined: `S1'.
13F 36134        878                         JUMP NZ, next_adc_bit               ;repeat until finished
140 1410A        879                         SRX s9                              ;sign extend 14-bit result in [s9,s8]
E: symbol not defined: `S9'.
141 14108        880                         SRA s8
E: symbol not defined: `S8'.
142 1410A        881                         SRX s9
E: symbol not defined: `S9'.
143 14108        882                         SRA s8
E: symbol not defined: `S8'.
144 1410A        883                         SRX s7                              ;sign extend 14-bit result in [s7,s6]
E: symbol not defined: `S7'.
145 14108        884                         SRA s6
E: symbol not defined: `S6'.
146 1410A        885                         SRX s7
E: symbol not defined: `S7'.
147 14108        886                         SRA s6
E: symbol not defined: `S6'.
148 25000        887                         RETURN
                 888                         ;
                 889                         ;
                 890                         ;**************************************************************************************
                 891                         ;LCD text messages
                 892                         ;**************************************************************************************
                 893                         ;
                 894                         ;
                 895                         ;Display 'PicoBlaze' on LCD at current cursor position
                 896                         ;
                 897                         ;
149 00160        898         disp_PicoBlaze: LOAD s5, character_P
E: symbol not defined: `S5'.
W: value out of range: 0x46, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x6.
14A 201C9        899                         CALL LCD_write_data
14B 00150        900                         LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 0x45, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x5.
14C 201C9        901                         CALL LCD_write_data
14D 001F0        902                         LOAD s5, character_c
E: symbol not defined: `S5'.
W: value out of range: 0x3f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
14E 201C9        903                         CALL LCD_write_data
14F 00110        904                         LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
150 201C9        905                         CALL LCD_write_data
151 001E0        906                         LOAD s5, character_B
E: symbol not defined: `S5'.
W: value out of range: 0x3e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
152 201C9        907                         CALL LCD_write_data
153 00110        908                         LOAD s5, character_l
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_L'.
154 201C9        909                         CALL LCD_write_data
155 001D0        910                         LOAD s5, character_a
E: symbol not defined: `S5'.
W: value out of range: 0x3d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
156 201C9        911                         CALL LCD_write_data
157 00110        912                         LOAD s5, character_z
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_Z'.
158 201C9        913                         CALL LCD_write_data
159 00110        914                         LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 0x41, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x1.
15A 201C9        915                         CALL LCD_write_data
15B 25000        916                         RETURN
                 917                         ;
                 918                         ;
                 919                         ;Display 'ADC Control' on LCD at current cursor position
                 920                         ;
                 921                         ;
15C 001D0        922       disp_ADC_Control: LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 0x3d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
15D 201C9        923                         CALL LCD_write_data
15E 00100        924                         LOAD s5, character_D
E: symbol not defined: `S5'.
W: value out of range: 0x40, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
15F 201C9        925                         CALL LCD_write_data
160 001F0        926                         LOAD s5, character_C
E: symbol not defined: `S5'.
W: value out of range: 0x3f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
161 201C9        927                         CALL LCD_write_data
162 00140        928                         LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
163 201C9        929                         CALL LCD_write_data
164 001F0        930                         LOAD s5, character_C
E: symbol not defined: `S5'.
W: value out of range: 0x3f, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xf.
165 201C9        931                         CALL LCD_write_data
166 00110        932                         LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
167 201C9        933                         CALL LCD_write_data
168 00110        934                         LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
169 201C9        935                         CALL LCD_write_data
16A 001A0        936                         LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 0x4a, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
16B 201C9        937                         CALL LCD_write_data
16C 00180        938                         LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 0x48, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
16D 201C9        939                         CALL LCD_write_data
16E 00110        940                         LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
16F 201C9        941                         CALL LCD_write_data
170 00110        942                         LOAD s5, character_l
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_L'.
171 201C9        943                         CALL LCD_write_data
172 25000        944                         RETURN
                 945                         ;
                 946                         ;
                 947                         ;Display 'VA=' on LCD at current cursor position
                 948                         ;
                 949                         ;
173 001C0        950                disp_VA: LOAD s5, character_V
E: symbol not defined: `S5'.
W: value out of range: 0x4c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
174 201C9        951                         CALL LCD_write_data
175 001D0        952                         LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 0x3d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
176 201C9        953                         CALL LCD_write_data
177 00130        954                         LOAD s5, character_equals
E: symbol not defined: `S5'.
178 201C9        955                         CALL LCD_write_data
179 25000        956                         RETURN
                 957                         ;
                 958                         ;
                 959                         ;Display 'A/D' on LCD at current cursor position
                 960                         ;
                 961                         ;
17A 001D0        962                disp_AD: LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 0x3d, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xd.
17B 201C9        963                         CALL LCD_write_data
17C 00110        964                         LOAD s5, character_divide
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_DIVIDE'.
17D 201C9        965                         CALL LCD_write_data
17E 00100        966                         LOAD s5, character_D
E: symbol not defined: `S5'.
W: value out of range: 0x40, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
17F 201C9        967                         CALL LCD_write_data
180 00130        968                         LOAD s5, character_equals
E: symbol not defined: `S5'.
181 201C9        969                         CALL LCD_write_data
182 25000        970                         RETURN
                 971                         ;
                 972                         ;
                 973                         ;
                 974                         ;**************************************************************************************
                 975                         ;Value to ASCII Conversions and LCD display
                 976                         ;**************************************************************************************
                 977                         ;
                 978                         ;Convert hexadecimal value provided in register s0 into ASCII characters
                 979                         ;
                 980                         ;The value provided must can be any value in the range 00 to FF and will be converted into
                 981                         ;two ASCII characters.
                 982                         ;     The upper nibble will be represented by an ASCII character returned in register s2.
                 983                         ;     The lower nibble will be represented by an ASCII character returned in register s1.
                 984                         ;
                 985                         ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                 986                         ;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                 987                         ;hexadecimal requiring a further addition of 07 to the 30 already added.
                 988                         ;
                 989                         ;Registers used s0, s1 and s2.
                 990                         ;
183 00110        991      hex_byte_to_ASCII: LOAD s1, s0                         ;remember value supplied
E: symbol not defined: `S1'.
E: symbol not defined: `S0'.
184 1410E        992                         SR0 s0                              ;isolate upper nibble
E: symbol not defined: `S0'.
185 1410E        993                         SR0 s0
E: symbol not defined: `S0'.
186 1410E        994                         SR0 s0
E: symbol not defined: `S0'.
187 1410E        995                         SR0 s0
E: symbol not defined: `S0'.
188 20001        996                         CALL hex_to_ASCII                   ;convert
E: symbol not defined: `HEX_TO_ASCII'.
189 00110        997                         LOAD s2, s0                         ;upper nibble value in s2
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
18A 00110        998                         LOAD s0, s1                         ;restore complete value
E: symbol not defined: `S0'.
E: symbol not defined: `S1'.
                 999                         AND s0, 0F                          ;isolate lower nibble
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
18B 20001       1000                         CALL hex_to_ASCII                   ;convert
E: symbol not defined: `HEX_TO_ASCII'.
18C 00110       1001                         LOAD s1, s0                         ;lower nibble value in s1
E: symbol not defined: `S1'.
E: symbol not defined: `S0'.
18D 25000       1002                         RETURN
                1003                         ;
                1004                         ;Convert hexadecimal value provided in register s0 into ASCII character
                1005                         ;
                1006                         ;Register used s0
                1007                         ;
                1008           hex_to_ASCII: SUB s0, 0A                          ;test if value is in range 0 to 9
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
18E 3A001       1009                         JUMP C, number_char
E: symbol not defined: `NUMBER_CHAR'.
18F 10170       1010                         ADD s0, 07                          ;ASCII char A to F in range 41 to 46
E: symbol not defined: `S0'.
                1011            number_char: ADD s0, 3A                          ;ASCII char 0 to 9 in range 30 to 40
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
190 25000       1012                         RETURN
                1013                         ;
                1014                         ;
                1015                         ;Display the two character HEX value of the register contents 's0' on
                1016                         ;the LCD display at the current cursor position.
                1017                         ;
                1018                         ;Registers used s0, s1, s2, s4, s5, s6
                1019                         ;
191 20183       1020          disp_hex_byte: CALL hex_byte_to_ASCII
192 00110       1021                         LOAD s6, s1                         ;remember lower hex character
E: symbol not defined: `S6'.
E: symbol not defined: `S1'.
193 00110       1022                         LOAD s5, s2                         ;display upper hex character
E: symbol not defined: `S5'.
E: symbol not defined: `S2'.
194 201C9       1023                         CALL LCD_write_data
195 00110       1024                         LOAD s5, s6                         ;display lower hex character
E: symbol not defined: `S5'.
E: symbol not defined: `S6'.
196 201C9       1025                         CALL LCD_write_data
197 25000       1026                         RETURN
                1027                         ;
                1028                         ;
                1029                         ;**************************************************************************************
                1030                         ;Software delay routines
                1031                         ;**************************************************************************************
                1032                         ;
                1033                         ;
                1034                         ;
                1035                         ;Delay of 1us.
                1036                         ;
                1037                         ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                1038                         ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                1039                         ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                1040                         ;
                1041                         ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                1042                         ;
                1043                         ;Registers used s0
                1044                         ;
198 00100       1045              delay_1us: LOAD s0, delay_1us_constant
E: symbol not defined: `S0'.
199 18110       1046               wait_1us: SUB s0, 01
E: symbol not defined: `S0'.
19A 36199       1047                         JUMP NZ, wait_1us
19B 25000       1048                         RETURN
                1049                         ;
                1050                         ;Delay of 40us.
                1051                         ;
                1052                         ;Registers used s0, s1
                1053                         ;
19C 001C0       1054             delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
E: symbol not defined: `S1'.
W: value out of range: 0x1c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
19D 20198       1055              wait_40us: CALL delay_1us
19E 18110       1056                         SUB s1, 01
E: symbol not defined: `S1'.
19F 3619D       1057                         JUMP NZ, wait_40us
1A0 25000       1058                         RETURN
                1059                         ;
                1060                         ;
                1061                         ;Delay of 1ms.
                1062                         ;
                1063                         ;Registers used s0, s1, s2
                1064                         ;
1A1 00130       1065              delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
E: symbol not defined: `S2'.
W: value out of range: 0x13, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x3.
1A2 2019C       1066               wait_1ms: CALL delay_40us
1A3 18110       1067                         SUB s2, 01
E: symbol not defined: `S2'.
1A4 361A2       1068                         JUMP NZ, wait_1ms
1A5 25000       1069                         RETURN
                1070                         ;
                1071                         ;Delay of 20ms.
                1072                         ;
                1073                         ;Delay of 20ms used during initialisation.
                1074                         ;
                1075                         ;Registers used s0, s1, s2, s3
                1076                         ;
1A6 001E0       1077             delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
E: symbol not defined: `S3'.
1A7 201A1       1078              wait_20ms: CALL delay_1ms
1A8 18110       1079                         SUB s3, 01
E: symbol not defined: `S3'.
1A9 361A7       1080                         JUMP NZ, wait_20ms
1AA 25000       1081                         RETURN
                1082                         ;
                1083                         ;Delay of approximately 1 second.
                1084                         ;
                1085                         ;Registers used s0, s1, s2, s3, s4
                1086                         ;
1AB 00100       1087               delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
E: symbol not defined: `S4'.
W: value out of range: 0x20, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
1AC 201A6       1088                wait_1s: CALL delay_20ms
1AD 18110       1089                         SUB s4, 01
E: symbol not defined: `S4'.
1AE 361AC       1090                         JUMP NZ, wait_1s
1AF 25000       1091                         RETURN
                1092                         ;
                1093                         ;
                1094                         ;
                1095                         ;**************************************************************************************
                1096                         ;LCD Character Module Routines
                1097                         ;**************************************************************************************
                1098                         ;
                1099                         ;LCD module is a 16 character by 2 line display but all displays are very similar
                1100                         ;The 4-wire data interface will be used (DB4 to DB7).
                1101                         ;
                1102                         ;The LCD modules are relatively slow and software delay loops are used to slow down
                1103                         ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                1104                         ;a different section (see above in this case).
                1105                         ;
                1106                         ;
                1107                         ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                1108                         ;
                1109                         ;Register s4 should define the current state of the LCD output port.
                1110                         ;
                1111                         ;Registers used s0, s4
                1112                         ;
1B0 06110       1113            LCD_pulse_E: XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
1B1 2D128       1114                         OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1B2 20198       1115                         CALL delay_1us
1B3 06110       1116                         XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
1B4 2D128       1117                         OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1B5 25000       1118                         RETURN
                1119                         ;
                1120                         ;Write 4-bit instruction to LCD display.
                1121                         ;
                1122                         ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                1123                         ;Note that this routine does not release the master enable but as it is only
                1124                         ;used during initialisation and as part of the 8-bit instruction write it
                1125                         ;should be acceptable.
                1126                         ;
                1127                         ;Registers used s4
                1128                         ;
1B6 02110       1129        LCD_write_inst4: AND s4, F8                          ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F8'.
1B7 2D128       1130                         OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1B8 201B0       1131                         CALL LCD_pulse_E
1B9 25000       1132                         RETURN
                1133                         ;
                1134                         ;
                1135                         ;Write 8-bit instruction to LCD display.
                1136                         ;
                1137                         ;The 8-bit instruction should be provided in register s5.
                1138                         ;Instructions are written using the following sequence
                1139                         ; Upper nibble
                1140                         ; wait >1us
                1141                         ; Lower nibble
                1142                         ; wait >40us
                1143                         ;
                1144                         ;Registers used s0, s1, s4, s5
                1145                         ;
1BA 00110       1146        LCD_write_inst8: LOAD s4, s5
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1BB 02110       1147                         AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
1BC 04180       1148                         OR s4, LCD_drive                    ;Enable=1
E: symbol not defined: `S4'.
1BD 201B6       1149                         CALL LCD_write_inst4                ;write upper nibble
1BE 20198       1150                         CALL delay_1us                      ;wait >1us
1BF 00110       1151                         LOAD s4, s5                         ;select lower nibble with
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1C0 14107       1152                         SL1 s4                              ;Enable=1
E: symbol not defined: `S4'.
1C1 14106       1153                         SL0 s4                              ;RS=0 Instruction
E: symbol not defined: `S4'.
1C2 14106       1154                         SL0 s4                              ;RW=0 Write
E: symbol not defined: `S4'.
1C3 14106       1155                         SL0 s4                              ;E=0
E: symbol not defined: `S4'.
1C4 201B6       1156                         CALL LCD_write_inst4                ;write lower nibble
1C5 2019C       1157                         CALL delay_40us                     ;wait >40us
1C6 00110       1158                         LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
1C7 2D128       1159                         OUTPUT s4, LCD_output_port          ;Release master enable
E: symbol not defined: `S4'.
1C8 25000       1160                         RETURN
                1161                         ;
                1162                         ;
                1163                         ;
                1164                         ;Write 8-bit data to LCD display.
                1165                         ;
                1166                         ;The 8-bit data should be provided in register s5.
                1167                         ;Data bytes are written using the following sequence
                1168                         ; Upper nibble
                1169                         ; wait >1us
                1170                         ; Lower nibble
                1171                         ; wait >40us
                1172                         ;
                1173                         ;Registers used s0, s1, s4, s5
                1174                         ;
1C9 00110       1175         LCD_write_data: LOAD s4, s5
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1CA 02110       1176                         AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
                1177                         OR s4, 0C                           ;Enable=1 RS=1 Data, RW=0 Write, E=0
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
1CB 2D128       1178                         OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1CC 201B0       1179                         CALL LCD_pulse_E                    ;write upper nibble
1CD 20198       1180                         CALL delay_1us                      ;wait >1us
1CE 00110       1181                         LOAD s4, s5                         ;select lower nibble with
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1CF 14107       1182                         SL1 s4                              ;Enable=1
E: symbol not defined: `S4'.
1D0 14107       1183                         SL1 s4                              ;RS=1 Data
E: symbol not defined: `S4'.
1D1 14106       1184                         SL0 s4                              ;RW=0 Write
E: symbol not defined: `S4'.
1D2 14106       1185                         SL0 s4                              ;E=0
E: symbol not defined: `S4'.
1D3 2D128       1186                         OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1D4 201B0       1187                         CALL LCD_pulse_E                    ;write lower nibble
1D5 2019C       1188                         CALL delay_40us                     ;wait >40us
1D6 00110       1189                         LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
1D7 2D128       1190                         OUTPUT s4, LCD_output_port          ;Release master enable
E: symbol not defined: `S4'.
1D8 25000       1191                         RETURN
                1192                         ;
                1193                         ;
                1194                         ;
                1195                         ;
                1196                         ;Read 8-bit data from LCD display.
                1197                         ;
                1198                         ;The 8-bit data will be read from the current LCD memory address
                1199                         ;and will be returned in register s5.
                1200                         ;It is advisable to set the LCD address (cursor position) before
                1201                         ;using the data read for the first time otherwise the display may
                1202                         ;generate invalid data on the first read.
                1203                         ;
                1204                         ;Data bytes are read using the following sequence
                1205                         ; Upper nibble
                1206                         ; wait >1us
                1207                         ; Lower nibble
                1208                         ; wait >40us
                1209                         ;
                1210                         ;Registers used s0, s1, s4, s5
                1211                         ;
                1212         LCD_read_data8: LOAD s4, 0E                         ;Enable=1 RS=1 Data, RW=1 Read, E=0
E: identifier cannot start with a digit: `0E'.
E: unexpected end of line.
1D9 2D128       1213                         OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1DA 06110       1214                         XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
1DB 2D128       1215                         OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1DC 20198       1216                         CALL delay_1us                      ;wait >260ns to access data
1DD 09102       1217                         INPUT s5, LCD_input_port            ;read upper nibble
E: symbol not defined: `S5'.
1DE 06110       1218                         XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
1DF 2D128       1219                         OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1E0 20198       1220                         CALL delay_1us                      ;wait >1us
1E1 06110       1221                         XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
1E2 2D128       1222                         OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1E3 20198       1223                         CALL delay_1us                      ;wait >260ns to access data
1E4 09102       1224                         INPUT s0, LCD_input_port            ;read lower nibble
E: symbol not defined: `S0'.
1E5 06110       1225                         XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
1E6 2D128       1226                         OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1E7 02110       1227                         AND s5, F0                          ;merge upper and lower nibbles
E: symbol not defined: `S5'.
E: symbol not defined: `F0'.
1E8 1410E       1228                         SR0 s0
E: symbol not defined: `S0'.
1E9 1410E       1229                         SR0 s0
E: symbol not defined: `S0'.
1EA 1410E       1230                         SR0 s0
E: symbol not defined: `S0'.
1EB 1410E       1231                         SR0 s0
E: symbol not defined: `S0'.
1EC 04110       1232                         OR s5, s0
E: symbol not defined: `S5'.
E: symbol not defined: `S0'.
1ED 00140       1233                         LOAD s4, 04                         ;Enable=0 RS=1 Data, RW=0 Write, E=0
E: symbol not defined: `S4'.
1EE 2D128       1234                         OUTPUT s4, LCD_output_port          ;Stop reading 5V device and release master enable
E: symbol not defined: `S4'.
1EF 2019C       1235                         CALL delay_40us                     ;wait >40us
1F0 25000       1236                         RETURN
                1237                         ;
                1238                         ;
                1239                         ;Reset and initialise display to communicate using 4-bit data mode
                1240                         ;Includes routine to clear the display.
                1241                         ;
                1242                         ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                1243                         ;following by the 8-bit instructions to set up the display.
                1244                         ;
                1245                         ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                1246                         ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
                1247                         ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                1248                         ;  01 = '00000001' Display clear
                1249                         ;
                1250                         ;Registers used s0, s1, s2, s3, s4
                1251                         ;
1F1 201A6       1252              LCD_reset: CALL delay_20ms                     ;wait more that 15ms for display to be ready
1F2 001E0       1253                         LOAD s4, 30
E: symbol not defined: `S4'.
W: value out of range: 0x1e, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xe.
1F3 201B6       1254                         CALL LCD_write_inst4                ;send '3'
1F4 201A6       1255                         CALL delay_20ms                     ;wait >4.1ms
1F5 201B6       1256                         CALL LCD_write_inst4                ;send '3'
1F6 201A1       1257                         CALL delay_1ms                      ;wait >100us
1F7 201B6       1258                         CALL LCD_write_inst4                ;send '3'
1F8 2019C       1259                         CALL delay_40us                     ;wait >40us
1F9 00140       1260                         LOAD s4, 20
E: symbol not defined: `S4'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
1FA 201B6       1261                         CALL LCD_write_inst4                ;send '2'
1FB 2019C       1262                         CALL delay_40us                     ;wait >40us
1FC 001C0       1263                         LOAD s5, 28                         ;Function set
E: symbol not defined: `S5'.
W: value out of range: 0x1c, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xc.
1FD 201BA       1264                         CALL LCD_write_inst8
1FE 00160       1265                         LOAD s5, 06                         ;Entry mode
E: symbol not defined: `S5'.
1FF 201BA       1266                         CALL LCD_write_inst8
                1267                         LOAD s5, 0C                         ;Display control
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
200 201BA       1268                         CALL LCD_write_inst8
201 00110       1269              LCD_clear: LOAD s5, 01                         ;Display clear
E: symbol not defined: `S5'.
202 201BA       1270                         CALL LCD_write_inst8
203 201A1       1271                         CALL delay_1ms                      ;wait >1.64ms for display to clear
204 201A1       1272                         CALL delay_1ms
205 25000       1273                         RETURN
                1274                         ;
                1275                         ;Position the cursor ready for characters to be written.
                1276                         ;The display is formed of 2 lines of 16 characters and each
                1277                         ;position has a corresponding address as indicated below.
                1278                         ;
                1279                         ;                   Character position
                1280                         ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                1281                         ;
                1282                         ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                1283                         ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                1284                         ;
                1285                         ;This routine will set the cursor position using the value provided
                1286                         ;in register s5. The upper nibble will define the line and the lower
                1287                         ;nibble the character position on the line.
                1288                         ; Example s5 = 2B will position the cursor on line 2 position 11
                1289                         ;
                1290                         ;Registers used s0, s1, s2, s3, s4
                1291                         ;
206 0C1A0       1292             LCD_cursor: TEST s5, 10                         ;test for line 1
E: symbol not defined: `S5'.
207 32001       1293                         JUMP Z, set_line2
E: symbol not defined: `SET_LINE2'.
                1294                         AND s5, 0F                          ;make address in range 80 to 8F for line 1
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
208 04100       1295                         OR s5, 80
E: symbol not defined: `S5'.
W: value out of range: 0x50, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x0.
209 201BA       1296                         CALL LCD_write_inst8                ;instruction write to set cursor
20A 25000       1297                         RETURN
                1298              set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
20B 04110       1299                         OR s5, C0
E: symbol not defined: `S5'.
E: symbol not defined: `C0'.
20C 201BA       1300                         CALL LCD_write_inst8                ;instruction write to set cursor
20D 25000       1301                         RETURN
                1302                         ;
                1303                         ;
                1304                         ;**************************************************************************************
                1305                         ;Interrupt Service Routine (ISR)
                1306                         ;**************************************************************************************
                1307                         ;
                1308                         ;Interrupts occur at 1 second intervals.
                1309                         ;
                1310                         ;Each interrupt is used to take analogue samples and store them in scratch pad memory.
                1311                         ;The interrupt clears a 'flag' in register sF so that the main program can advance.
                1312                         ;
20E 2012E       1313                    ISR: CALL adc_read                       ;read A/D Converter
20F 2F100       1314                         STORE s8, ADC0_lsb                  ;store ADC Channel 0
E: symbol not defined: `S8'.
210 2F101       1315                         STORE s9, ADC0_msb
E: symbol not defined: `S9'.
211 2F102       1316                         STORE s6, ADC1_lsb                  ;store ADC Channel 1
E: symbol not defined: `S6'.
212 2F103       1317                         STORE s7, ADC1_msb
E: symbol not defined: `S7'.
                1318                         ;
213 00100       1319                         LOAD sF, 00                         ;clear flag
E: symbol not defined: `SF'.
214 29001       1320                         RETURNI ENABLE
                1321                         ;
                1322                         ;
                1323                         ;**************************************************************************************
                1324                         ;Interrupt Vector
                1325                         ;**************************************************************************************
                1326                         ;
                1327                         ADDRESS 3FF
E: identifier cannot start with a digit: `3FF'.
E: directive ADDRESS requires a single argument.
215 2220E       1328                         JUMP ISR
                1329                         ;
                1330                         ;
