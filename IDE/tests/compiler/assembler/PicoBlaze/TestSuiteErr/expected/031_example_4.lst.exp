                   1     ;KCPSM3 Program - FC_CTRL
                   2                           ;
                   3                           ;Frequency Generator Control
                   4                           ;Calculates and displays results on the 16x2 LCD display.
                   5                           ;
                   6                           ;
                   7                           ; Version : 1.12
                   8                           ; Date : 28th February 2006
                   9                           ;
                  10                           ; Ken Chapman
                  11                           ; Xilinx Ltd
                  12                           ;
                  13                           ; chapman@xilinx.com
                  14                           ;
                  15                           ;
                  16                           ;
                  17                           ;**************************************************************************************
                  18                           ;Port definitions
                  19                           ;**************************************************************************************
                  20                           ;
  00000           21                           CONSTANT A_count0_port, 00          ;32-bit A-counter (LSByte first)
  0000A           22                           CONSTANT A_count1_port, 10
  00014           23                           CONSTANT A_count2_port, 20
  0001E           24                           CONSTANT A_count3_port, 30
                  25                           ;
  00028           26                           CONSTANT B_count0_port, 40          ;32-bit B-counter (LSByte first)
  00032           27                           CONSTANT B_count1_port, 50
  0003C           28                           CONSTANT B_count2_port, 60
  00046           29                           CONSTANT B_count3_port, 70
                  30                           ;
  00050           31                           CONSTANT status_port, 80            ;4 switches and counter status
  00001           32                           CONSTANT switch0, 01                ;  Switches      SW0 - bit0
  00002           33                           CONSTANT switch1, 02                ; active High    SW1 - bit1
  00004           34                           CONSTANT switch2, 04                ;                SW2 - bit2
  00008           35                           CONSTANT switch3, 08                ;                SW3 - bit3
  0000A           36                           CONSTANT AB_switch, 10              ;  0=A-count enabled 1=B-count enabled
                  37                           ;
                  38                           ;
  00002           39                           CONSTANT count_resetport, 02        ;Reset frequency counter controls
  00001           40                           CONSTANT a_count_reset, 01          ;  A-count = bit0
  00002           41                           CONSTANT b_count_reset, 02          ;  B-count = bit1
                  42                           ;
  00001           43                           CONSTANT LED_port, 01               ;8 simple LEDs - active high
                  44                           ;
                  45                           ;
  00008           46                           CONSTANT source_control_port, 08    ;Select and control test sources
  00001           47                           CONSTANT source_sel0, 01            ;  00 = SMA clock  01=50MHz
  00002           48                           CONSTANT source_sel1, 02            ;  10 = DCM Osc    11=Ring Osc
  00028           49                           CONSTANT ring_reset, 40             ; active High rest of ring osc - bit6
  00050           50                           CONSTANT dcm_kick, 80               ; DCM kick start signal - bit7
                  51                           ;
                  52                           ;
                  53                           ;LCD interface ports
                  54                           ;
                  55                           ;The master enable signal is not used by the LCD display itself
                  56                           ;but may be required to confirm that LCD communication is active.
                  57                           ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  58                           ;is used because it shares the same data pins and conflicts must be avoided.
                  59                           ;
  00004           60                           CONSTANT LCD_output_port, 04        ;LCD character module output data and control
  00001           61                           CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
  00002           62                           CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
  00004           63                           CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
  00008           64                           CONSTANT LCD_drive, 08              ;   Master enable (active High) - bit3
  0000A           65                           CONSTANT LCD_DB4, 10                ;   4-bit              Data DB4 - bit4
  00014           66                           CONSTANT LCD_DB5, 20                ;   interface          Data DB5 - bit5
  00028           67                           CONSTANT LCD_DB6, 40                ;                      Data DB6 - bit6
  00050           68                           CONSTANT LCD_DB7, 80                ;                      Data DB7 - bit7
                  69                           ;
                  70                           ;
  00009           71                           CONSTANT LCD_input_port, 09         ;LCD character module input data
  00001           72                           CONSTANT LCD_read_spare0, 01        ;    Spare bits               - bit0
  00002           73                           CONSTANT LCD_read_spare1, 02        ;    are zero                 - bit1
  00004           74                           CONSTANT LCD_read_spare2, 04        ;                             - bit2
  00008           75                           CONSTANT LCD_read_spare3, 08        ;                             - bit3
  0000A           76                           CONSTANT LCD_read_DB4, 10           ;    4-bit           Data DB4 - bit4
  00014           77                           CONSTANT LCD_read_DB5, 20           ;    interface       Data DB5 - bit5
  00028           78                           CONSTANT LCD_read_DB6, 40           ;                    Data DB6 - bit6
  00050           79                           CONSTANT LCD_read_DB7, 80           ;                    Data DB7 - bit7
                  80                           ;
                  81                           ;
                  82                           ;
                  83                           ;Special Register usage
                  84                           ;
                  85                           ;
                  86                           ;
                  87                           ;**************************************************************************************
                  88                           ;Scratch Pad Memory Locations
                  89                           ;**************************************************************************************
                  90                           ;
                  91                           ;
  00000           92                           CONSTANT count0, 00                 ;last 32-bit counter value (LSByte first)
  00001           93                           CONSTANT count1, 01
  00002           94                           CONSTANT count2, 02
  00003           95                           CONSTANT count3, 03
                  96                           ;
  00004           97                           CONSTANT ISR_count, 04              ;count number of interrupts for a clean start
                  98                           ;
  0000B           99                           CONSTANT decimal0, 11               ;10 digit decimal value up to 4,294,967,295
  0000C          100                           CONSTANT decimal1, 12
  0000D          101                           CONSTANT decimal2, 13
  0000E          102                           CONSTANT decimal3, 14
  0000F          103                           CONSTANT decimal4, 15
  00010          104                           CONSTANT decimal5, 16
  00011          105                           CONSTANT decimal6, 17
  00012          106                           CONSTANT decimal7, 18
  00013          107                           CONSTANT decimal8, 19
                 108                           CONSTANT decimal9, 1A
E: identifier cannot start with a digit: `1A'.
E: unexpected end of line.
                 109                           ;
                 110                           ;
                 111                           ;
  0001E          112                           CONSTANT preserve_s0, 30            ;place to save register contents
  0001F          113                           CONSTANT preserve_s1, 31
  00020          114                           CONSTANT preserve_s2, 32
  00021          115                           CONSTANT preserve_s3, 33
  00022          116                           CONSTANT preserve_s4, 34
  00023          117                           CONSTANT preserve_s5, 35
  00024          118                           CONSTANT preserve_s6, 36
  00025          119                           CONSTANT preserve_s7, 37
  00026          120                           CONSTANT preserve_s8, 38
  00027          121                           CONSTANT preserve_s9, 39
                 122                           CONSTANT preserve_sA, 3A
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 123                           CONSTANT preserve_sB, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
                 124                           CONSTANT preserve_sC, 3C
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
  00003          125                           CONSTANT preserve_sD, 3D
                 126                           CONSTANT preserve_sE, 3E
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
                 127                           CONSTANT preserve_sF, 3F
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
                 128                           ;
                 129                           ;
                 130                           ;
                 131                           ;**************************************************************************************
                 132                           ;Useful data constants
                 133                           ;**************************************************************************************
                 134                           ;
                 135                           ;
                 136                           ;
                 137                           ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                 138                           ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                 139                           ;calculation highly predictable. The '6' in the following equation even allows for
                 140                           ;'CALL delay_1us' instruction in the initiating code.
                 141                           ;
                 142                           ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 143                           ;
                 144                           ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 145                           ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 146                           ;become lower than intended.
                 147                           ;
  00000          148                           CONSTANT delay_1us_constant, 0B
                 149                           ;
                 150                           ;
                 151                           ;
                 152                           ;ASCII table
                 153                           ;
  0003D          154                           CONSTANT character_a, 61
  0003E          155                           CONSTANT character_b, 62
  0003F          156                           CONSTANT character_c, 63
  00040          157                           CONSTANT character_d, 64
  00041          158                           CONSTANT character_e, 65
  00042          159                           CONSTANT character_f, 66
  00043          160                           CONSTANT character_g, 67
  00044          161                           CONSTANT character_h, 68
  00045          162                           CONSTANT character_i, 69
                 163                           CONSTANT character_j, 6A
E: identifier cannot start with a digit: `6A'.
E: unexpected end of line.
                 164                           CONSTANT character_k, 6B
E: identifier cannot start with a digit: `6B'.
E: unexpected end of line.
                 165                           CONSTANT character_l, 6C
E: identifier cannot start with a digit: `6C'.
E: unexpected end of line.
  00006          166                           CONSTANT character_m, 6D
                 167                           CONSTANT character_n, 6E
E: identifier cannot start with a digit: `6E'.
E: unexpected end of line.
                 168                           CONSTANT character_o, 6F
E: identifier cannot start with a digit: `6F'.
E: unexpected end of line.
  00046          169                           CONSTANT character_p, 70
  00047          170                           CONSTANT character_q, 71
  00048          171                           CONSTANT character_r, 72
  00049          172                           CONSTANT character_s, 73
  0004A          173                           CONSTANT character_t, 74
  0004B          174                           CONSTANT character_u, 75
  0004C          175                           CONSTANT character_v, 76
  0004D          176                           CONSTANT character_w, 77
  0004E          177                           CONSTANT character_x, 78
  0004F          178                           CONSTANT character_y, 79
                 179                           CONSTANT character_z, 7A
E: identifier cannot start with a digit: `7A'.
E: unexpected end of line.
                 180                           CONSTANT character_A, 41
E: symbol already defined: "CHARACTER_A".
                 181                           CONSTANT character_B, 42
E: symbol already defined: "CHARACTER_B".
                 182                           CONSTANT character_C, 43
E: symbol already defined: "CHARACTER_C".
                 183                           CONSTANT character_D, 44
E: symbol already defined: "CHARACTER_D".
                 184                           CONSTANT character_E, 45
E: symbol already defined: "CHARACTER_E".
                 185                           CONSTANT character_F, 46
E: symbol already defined: "CHARACTER_F".
                 186                           CONSTANT character_G, 47
E: symbol already defined: "CHARACTER_G".
                 187                           CONSTANT character_H, 48
E: symbol already defined: "CHARACTER_H".
                 188                           CONSTANT character_I, 49
E: symbol already defined: "CHARACTER_I".
                 189                           CONSTANT character_J, 4A
E: identifier cannot start with a digit: `4A'.
E: unexpected end of line.
                 190                           CONSTANT character_K, 4B
E: identifier cannot start with a digit: `4B'.
E: unexpected end of line.
                 191                           CONSTANT character_L, 4C
E: identifier cannot start with a digit: `4C'.
E: unexpected end of line.
                 192                           CONSTANT character_M, 4D
E: symbol already defined: "CHARACTER_M".
                 193                           CONSTANT character_N, 4E
E: identifier cannot start with a digit: `4E'.
E: unexpected end of line.
                 194                           CONSTANT character_O, 4F
E: identifier cannot start with a digit: `4F'.
E: unexpected end of line.
                 195                           CONSTANT character_P, 50
E: symbol already defined: "CHARACTER_P".
                 196                           CONSTANT character_Q, 51
E: symbol already defined: "CHARACTER_Q".
                 197                           CONSTANT character_R, 52
E: symbol already defined: "CHARACTER_R".
                 198                           CONSTANT character_S, 53
E: symbol already defined: "CHARACTER_S".
                 199                           CONSTANT character_T, 54
E: symbol already defined: "CHARACTER_T".
                 200                           CONSTANT character_U, 55
E: symbol already defined: "CHARACTER_U".
                 201                           CONSTANT character_V, 56
E: symbol already defined: "CHARACTER_V".
                 202                           CONSTANT character_W, 57
E: symbol already defined: "CHARACTER_W".
                 203                           CONSTANT character_X, 58
E: symbol already defined: "CHARACTER_X".
                 204                           CONSTANT character_Y, 59
E: symbol already defined: "CHARACTER_Y".
                 205                           CONSTANT character_Z, 5A
E: identifier cannot start with a digit: `5A'.
E: unexpected end of line.
  0001E          206                           CONSTANT character_0, 30
  0001F          207                           CONSTANT character_1, 31
  00020          208                           CONSTANT character_2, 32
  00021          209                           CONSTANT character_3, 33
  00022          210                           CONSTANT character_4, 34
  00023          211                           CONSTANT character_5, 35
  00024          212                           CONSTANT character_6, 36
  00025          213                           CONSTANT character_7, 37
  00026          214                           CONSTANT character_8, 38
  00027          215                           CONSTANT character_9, 39
                 216                           CONSTANT character_colon, 3A
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 217                           CONSTANT character_stop, 2E
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
                 218                           CONSTANT character_semi_colon, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
  00002          219                           CONSTANT character_minus, 2D
                 220                           CONSTANT character_divide, 2F       ;'/'
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 221                           CONSTANT character_plus, 2B
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 222                           CONSTANT character_comma, 2C
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 223                           CONSTANT character_less_than, 3C
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
                 224                           CONSTANT character_greater_than, 3E
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
  00003          225                           CONSTANT character_equals, 3D
  00014          226                           CONSTANT character_space, 20
  00000          227                           CONSTANT character_CR, 0D           ;carriage return
                 228                           CONSTANT character_question, 3F     ;'?'
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
  00018          229                           CONSTANT character_dollar, 24
  00015          230                           CONSTANT character_exclaim, 21      ;'!'
  00008          231                           CONSTANT character_BS, 08           ;Back Space command character
                 232                           ;
                 233                           ;
                 234                           ;
                 235                           ;
                 236                           ;
                 237                           ;**************************************************************************************
                 238                           ;Initialise the system
                 239                           ;**************************************************************************************
                 240                           ;
000 201F7        241               cold_start: CALL LCD_reset                      ;initialise LCD display
001 00100        242                           LOAD s0, 00                         ;Turn off LEDs
E: symbol not defined: `S0'.
002 2D101        243                           OUTPUT s0, LED_port
E: symbol not defined: `S0'.
                 244                           ;
                 245                           ;
                 246                           ;Write welcome message to LCD display
                 247                           ;
003 001A0        248                           LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
004 2020C        249                           CALL LCD_cursor
005 200BC        250                           CALL disp_PicoBlaze                 ;Display 'PicoBlaze Inside'
006 201B1        251                           CALL delay_1s                       ;wait 3 seconds
007 201B1        252                           CALL delay_1s
008 201B1        253                           CALL delay_1s
009 001A0        254                           LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
00A 2020C        255                           CALL LCD_cursor
00B 200CF        256                           CALL disp_Frequency                 ;Display 'Frequency Counter V1.00'
00C 00150        257                           LOAD s5, 21                         ;Line 2 position 1
E: symbol not defined: `S5'.
W: value out of range: 21, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
00D 2020C        258                           CALL LCD_cursor
00E 200E2        259                           CALL disp_Counter
                 260                           LOAD s5, 2B                         ;Line 2 position 11
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
00F 2020C        261                           CALL LCD_cursor
010 200F1        262                           CALL disp_version
011 201B1        263                           CALL delay_1s                       ;wait 5 seconds
012 201B1        264                           CALL delay_1s
013 201B1        265                           CALL delay_1s
014 201B1        266                           CALL delay_1s
015 201B1        267                           CALL delay_1s
016 20207        268                           CALL LCD_clear                      ;Clear display
                 269                           ;
                 270                           ;Kick start the DCM oscillator.
                 271                           ; Just requires a few cyles of activity
                 272                           ;
017 00110        273                           LOAD s0, FF
E: symbol not defined: `S0'.
E: symbol not defined: `FF'.
018 00100        274                           LOAD s1, 00
E: symbol not defined: `S1'.
019 2D108        275                kick_loop: OUTPUT s1, source_control_port
E: symbol not defined: `S1'.
01A 06100        276                           XOR s1, dcm_kick                    ;toggle kick start signal
E: symbol not defined: `S1'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
01B 18110        277                           SUB s0, 01
E: symbol not defined: `S0'.
01C 36019        278                           JUMP NZ, kick_loop
                 279                           ;
                 280                           ;clear all scratch pad memory locations
                 281                           ;
                 282                           LOAD s1, 3F
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
01D 00100        283                           LOAD s0, 00
E: symbol not defined: `S0'.
01E 2F101        284                clear_spm: STORE s0, (s1)
E: symbol not defined: `S0'.
E: symbol not defined: `S1'.
01F 18110        285                           SUB s1, 01
E: symbol not defined: `S1'.
020 3E01E        286                           JUMP NC, clear_spm
                 287                           ;
021 28001        288                           ENABLE INTERRUPT
                 289                           ;
                 290                           ;**************************************************************************************
                 291                           ;Main Program
                 292                           ;**************************************************************************************
                 293                           ;
                 294                           ;The task of the main program is just to read the most recent values from
                 295                           ;scratch pad memory and display them as fast as it can.
                 296                           ;
                 297                           ;It also reads the slide switches controls the selection of the source frequency to
                 298                           ;be measured.
                 299                           ;
022 00150        300               warm_start: LOAD s5, 21                         ;Line 2 position 1
E: symbol not defined: `S5'.
W: value out of range: 21, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
023 2020C        301                           CALL LCD_cursor
024 09150        302                           INPUT sF, status_port               ;select source based on switches
E: symbol not defined: `SF'.
025 1C100        303                           COMPARE sF, 00                      ;test for no switches active
E: symbol not defined: `SF'.
                 304                           AND sF, 0F                          ;isolate switches
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
026 36029        305                           JUMP NZ, test_SMA
027 20159        306                           CALL disp_menu
028 22022        307                           JUMP warm_start
029 1C110        308                 test_SMA: COMPARE sF, switch0
E: symbol not defined: `SF'.
02A 3602E        309                           JUMP NZ, test_50M
02B 200FC        310                           CALL disp_SMA_input
02C 00100        311                           LOAD sF, 00
E: symbol not defined: `SF'.
02D 2203E        312                           JUMP select_source
02E 1C120        313                 test_50M: COMPARE sF, switch1
E: symbol not defined: `SF'.
02F 36033        314                           JUMP NZ, test_DCM
030 20110        315                           CALL disp_50MHz_Crystal
031 00110        316                           LOAD sF, 01
E: symbol not defined: `SF'.
032 2203E        317                           JUMP select_source
033 1C140        318                 test_DCM: COMPARE sF, switch2
E: symbol not defined: `SF'.
034 36038        319                           JUMP NZ, test_Ring
035 2012C        320                           CALL disp_DCM_Oscillator
036 00120        321                           LOAD sF, 02
E: symbol not defined: `SF'.
037 2203E        322                           JUMP select_source
038 1C180        323                test_Ring: COMPARE sF, switch3
E: symbol not defined: `SF'.
039 3203C        324                           JUMP Z, Ring_select
03A 20159        325                           CALL disp_menu                      ;more than one switch is set
03B 22022        326                           JUMP warm_start
03C 2014A        327              Ring_select: CALL disp_Ring_Oscillator
03D 00130        328                           LOAD sF, 03
E: symbol not defined: `SF'.
03E 2D108        329            select_source: OUTPUT sF, source_control_port      ;select source control
E: symbol not defined: `SF'.
                 330                           ;
                 331                           ;Read the most recent values from display on LCD.
                 332                           ;
                 333                           ;Interrupts will be disabled during the reading of values to ensure a clean
                 334                           ;value is obtained when reading multi-byte values.
                 335                           ;
                 336                           ;
                 337                           ;Display the count value in the top right of the LCD display
                 338                           ;Up to 999,999,999
                 339                           ;
03F 28000        340                           DISABLE INTERRUPT                   ;copy cycle count to register set [s5,s4,s3,s2]
040 0B100        341                           FETCH s2, count0
E: symbol not defined: `S2'.
041 0B101        342                           FETCH s3, count1
E: symbol not defined: `S3'.
042 0B102        343                           FETCH s4, count2
E: symbol not defined: `S4'.
043 0B103        344                           FETCH s5, count3
E: symbol not defined: `S5'.
044 28001        345                           ENABLE INTERRUPT
045 20001        346                           CALL integer_to_BCD                 ;convert last 32-bit value to BCD digits
E: symbol not defined: `INTEGER_TO_BCD'.
046 001A0        347                           LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
047 2020C        348                           CALL LCD_cursor
048 00130        349                           LOAD s6, decimal8                   ;up to 999,999,999 Hz
E: symbol not defined: `S6'.
W: value out of range: 19, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
049 2004B        350                           CALL disp_digits
04A 22022        351                           JUMP warm_start
                 352                           ;
                 353                           ;
                 354                           ;
                 355                           ;**************************************************************************************
                 356                           ; Display frequency value on LCD display
                 357                           ;**************************************************************************************
                 358                           ;
                 359                           ;
                 360                           ;Display value on the LCD display at current position.
                 361                           ;The values to be displayed must be stored in scratch pad memory
                 362                           ;locations 'decimal0' to 'decimal9' which must be in ascending locations.
                 363                           ;
                 364                           ;The routing performs leading zero suppression and scales to Hz, KHz or MHz ranges.
                 365                           ;
                 366                           ;Registers used s0,s1,s4,s5,sE,sF
                 367                           ;
04B 00110        368              disp_digits: LOAD sF, FF                         ;set blanking flag
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
04C 00140        369                           LOAD sE, character_space            ;scaling character for MHz, KHz or Hz
E: symbol not defined: `SE'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
04D 0B113        370                           FETCH s5, decimal8                  ;100MHz digit
E: symbol not defined: `S5'.
04E 20085        371                           CALL zero_test
04F 20089        372                           CALL disp_digit
050 0B112        373                           FETCH s5, decimal7                  ;10MHz digit
E: symbol not defined: `S5'.
051 20085        374                           CALL zero_test
052 20089        375                           CALL disp_digit
053 0B111        376                           FETCH s5, decimal6                  ;1MHz digit
E: symbol not defined: `S5'.
054 20085        377                           CALL zero_test
055 20089        378                           CALL disp_digit
056 1C110        379                           COMPARE sF, FF                      ;check if any MHz were active
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
057 3205C        380                           JUMP Z, khz_space
058 00110        381                           LOAD s5, character_stop
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_STOP'.
059 201CF        382                           CALL LCD_write_data
05A 00160        383                           LOAD sE, character_M
E: symbol not defined: `SE'.
05B 2205E        384                           JUMP khz_digits
05C 00140        385                khz_space: LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
05D 201CF        386                           CALL LCD_write_data
05E 0B110        387               khz_digits: FETCH s5, decimal5                  ;100KHz digit
E: symbol not defined: `S5'.
05F 20085        388                           CALL zero_test
060 20089        389                           CALL disp_digit
061 0B10F        390                           FETCH s5, decimal4                  ;10KHz digit
E: symbol not defined: `S5'.
062 20085        391                           CALL zero_test
063 20089        392                           CALL disp_digit
064 0B10E        393                           FETCH s5, decimal3                  ;1KHz digit
E: symbol not defined: `S5'.
065 20085        394                           CALL zero_test
066 20089        395                           CALL disp_digit
067 1C160        396                           COMPARE sE, character_M             ;check if any MHz were active
E: symbol not defined: `SE'.
068 3206F        397                           JUMP Z, hz_space
069 1C110        398                           COMPARE sF, FF                      ;check if any KHz were active
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
06A 3206F        399                           JUMP Z, hz_space
06B 00110        400                           LOAD s5, character_stop
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_STOP'.
06C 201CF        401                           CALL LCD_write_data
06D 00110        402                           LOAD sE, character_K
E: symbol not defined: `SE'.
E: symbol not defined: `CHARACTER_K'.
06E 22071        403                           JUMP hz_digits
06F 00140        404                 hz_space: LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
070 201CF        405                           CALL LCD_write_data
071 0B10D        406                hz_digits: FETCH s5, decimal2                  ;100KHz digit
E: symbol not defined: `S5'.
072 20085        407                           CALL zero_test
073 20089        408                           CALL disp_digit
074 0B10C        409                           FETCH s5, decimal1                  ;10KHz digit
E: symbol not defined: `S5'.
075 20085        410                           CALL zero_test
076 20089        411                           CALL disp_digit
077 0B10B        412                           FETCH s5, decimal0                  ;1KHz digit (always displayed)
E: symbol not defined: `S5'.
078 101E0        413                           ADD s5, character_0                 ;convert number to ASCII
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
079 201CF        414                           CALL LCD_write_data
07A 00140        415                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
07B 201CF        416                           CALL LCD_write_data
07C 00110        417                           LOAD s5, sE
E: symbol not defined: `S5'.
E: symbol not defined: `SE'.
07D 201CF        418                           CALL LCD_write_data
07E 00140        419                           LOAD s5, character_H
E: symbol not defined: `S5'.
W: value out of range: 68, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
07F 201CF        420                           CALL LCD_write_data
080 00110        421                           LOAD s5, character_z
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_Z'.
081 201CF        422                           CALL LCD_write_data
082 00140        423                           LOAD s5, character_space            ;ensure end of line is clear
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
083 201CF        424                           CALL LCD_write_data
084 25000        425                           RETURN
                 426                           ;
                 427                           ;Check digit for zero. If not zero then clear
                 428                           ;blanking flag (sF=00)
085 1C100        429                zero_test: COMPARE s5, 00
E: symbol not defined: `S5'.
086 31000        430                           RETURN Z
087 00100        431                           LOAD sF, 00
E: symbol not defined: `SF'.
088 25000        432                           RETURN
                 433                           ;
                 434                           ;Display single digit at current position
                 435                           ;or space if blanking (sF=FF) is active
                 436                           ;
089 1C110        437               disp_digit: COMPARE sF, FF
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
08A 3208E        438                           JUMP Z, blank_digit
08B 101E0        439                           ADD s5, character_0                 ;convert number to ASCII
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
08C 201CF        440                           CALL LCD_write_data
08D 25000        441                           RETURN
08E 00140        442              blank_digit: LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
08F 201CF        443                           CALL LCD_write_data
090 25000        444                           RETURN
                 445                           ;
                 446                           ;
                 447                           ;
                 448                           ;**************************************************************************************
                 449                           ; 32-bit integer to BCD conversion
                 450                           ;**************************************************************************************
                 451                           ;
                 452                           ;Convert the 32 bit value in register set [s5,s4,s3,s2]
                 453                           ;into the BCD decimal equivalent located in the scratch pad memory
                 454                           ;locations 'decimal0' to 'decimal9' which must be in ascending locations.
                 455                           ;
                 456                           ;Each digit is formed in turn starting with the least significant.
                 457                           ;
                 458                           ;Registers used s0,s2,s3,s4,s5,s6,s7,s8,s9,sA,sB,sC,sD,sE,sF
                 459                           ;
                 460           integer_to_BCD: LOAD sE, 0A                         ;10 digits to be formed from value upto 4294967295
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
091 001B0        461                           LOAD sF, decimal0                   ;pointer for LS-Digit
E: symbol not defined: `SF'.
092 20098        462          int_to_BCD_loop: CALL divide_32bit_by_10
093 2F101        463                           STORE s1, (sF)                      ;remainder becomes digit value
E: symbol not defined: `S1'.
E: symbol not defined: `SF'.
094 10110        464                           ADD sF, 01                          ;move to next most significant digit
E: symbol not defined: `SF'.
095 18110        465                           SUB sE, 01                          ;one less digit to compute
E: symbol not defined: `SE'.
096 36092        466                           JUMP NZ, int_to_BCD_loop
097 25000        467                           RETURN
                 468                           ;
                 469                           ;Divide 32-bit binary integer by 10
                 470                           ;
                 471                           ;The value to be divided is held in register set [s5,s4,s3,s2]
                 472                           ;and this is where the result is returned to.
                 473                           ;
                 474                           ;At then end of the integer division the remainder in the range 0 to 9
                 475                           ;will be in register s1.
                 476                           ;
                 477                           ;Registers used s0, s2,s3,s4,s5,s6,s7,s8,s9,sA,sB,sC,sD
                 478                           ;
098 00110        479       divide_32bit_by_10: LOAD sA, s2                         ;copy input value to set [sD,sC,sB,sA]
E: symbol not defined: `SA'.
E: symbol not defined: `S2'.
099 00110        480                           LOAD sB, s3
E: symbol not defined: `SB'.
E: symbol not defined: `S3'.
09A 00110        481                           LOAD sC, s4
E: symbol not defined: `SC'.
E: symbol not defined: `S4'.
09B 00110        482                           LOAD sD, s5
E: symbol not defined: `SD'.
E: symbol not defined: `S5'.
09C 00100        483                           LOAD s2, 00                         ;clear result
E: symbol not defined: `S2'.
09D 00100        484                           LOAD s3, 00
E: symbol not defined: `S3'.
09E 00100        485                           LOAD s4, 00
E: symbol not defined: `S4'.
09F 00100        486                           LOAD s5, 00
E: symbol not defined: `S5'.
0A0 00110        487                           LOAD s9, A0                         ;initialise '10' value into msb's of set [s9,s8,s7,s6]
E: symbol not defined: `S9'.
E: symbol not defined: `A0'.
0A1 00100        488                           LOAD s8, 00
E: symbol not defined: `S8'.
0A2 00100        489                           LOAD s7, 00
E: symbol not defined: `S7'.
0A3 00100        490                           LOAD s6, 00
E: symbol not defined: `S6'.
0A4 00110        491                           LOAD s0, 1D                         ;29 subtract and shift iterations to be performed
E: symbol not defined: `S0'.
0A5 18110        492               div10_loop: SUB sA, s6                          ;perform 32-bit subtract [sD,sC,sB,sA]-[s9,s8,s7,s6]
E: symbol not defined: `SA'.
E: symbol not defined: `S6'.
0A6 1A110        493                           SUBCY sB, s7
E: symbol not defined: `SB'.
E: symbol not defined: `S7'.
0A7 1A110        494                           SUBCY sC, s8
E: symbol not defined: `SC'.
E: symbol not defined: `S8'.
0A8 1A110        495                           SUBCY sD, s9
E: symbol not defined: `SD'.
E: symbol not defined: `S9'.
0A9 3A0AC        496                           JUMP C, div10_restore
0AA 14107        497                           SL1 s2                              ;shift '1' into result
E: symbol not defined: `S2'.
0AB 220B1        498                           JUMP div10_shifts
0AC 10110        499            div10_restore: ADD sA, s6                          ;perform 32-bit addition [sD,sC,sB,sA]+[s9,s8,s7,s6]
E: symbol not defined: `SA'.
E: symbol not defined: `S6'.
0AD 12110        500                           ADDCY sB, s7
E: symbol not defined: `SB'.
E: symbol not defined: `S7'.
0AE 12110        501                           ADDCY sC, s8
E: symbol not defined: `SC'.
E: symbol not defined: `S8'.
0AF 12110        502                           ADDCY sD, s9
E: symbol not defined: `SD'.
E: symbol not defined: `S9'.
0B0 14106        503                           SL0 s2                              ;shift '0' into result
E: symbol not defined: `S2'.
0B1 14100        504             div10_shifts: SLA s3                              ;complete 32-bit shift left
E: symbol not defined: `S3'.
0B2 14100        505                           SLA s4
E: symbol not defined: `S4'.
0B3 14100        506                           SLA s5
E: symbol not defined: `S5'.
0B4 1410E        507                           SR0 s9                              ;divide '10' value by 2 (shift right 1 place)
E: symbol not defined: `S9'.
0B5 14108        508                           SRA s8
E: symbol not defined: `S8'.
0B6 14108        509                           SRA s7
E: symbol not defined: `S7'.
0B7 14108        510                           SRA s6
E: symbol not defined: `S6'.
0B8 18110        511                           SUB s0, 01                          ;count iterations
E: symbol not defined: `S0'.
0B9 360A5        512                           JUMP NZ, div10_loop
0BA 00110        513                           LOAD s1, sA                         ;remainder of division
E: symbol not defined: `S1'.
E: symbol not defined: `SA'.
0BB 25000        514                           RETURN
                 515                           ;
                 516                           ;
                 517                           ;
                 518                           ;
                 519                           ;**************************************************************************************
                 520                           ;LCD text messages
                 521                           ;**************************************************************************************
                 522                           ;
                 523                           ;
                 524                           ;Display 'PicoBlaze' on LCD at current cursor position
                 525                           ;
                 526                           ;
0BC 00160        527           disp_PicoBlaze: LOAD s5, character_P
E: symbol not defined: `S5'.
W: value out of range: 70, allowed range is [0,15] (trimmed to 4 bits) which makes it 6.
0BD 201CF        528                           CALL LCD_write_data
0BE 00150        529                           LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
0BF 201CF        530                           CALL LCD_write_data
0C0 001F0        531                           LOAD s5, character_c
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
0C1 201CF        532                           CALL LCD_write_data
0C2 00110        533                           LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
0C3 201CF        534                           CALL LCD_write_data
0C4 001E0        535                           LOAD s5, character_B
E: symbol not defined: `S5'.
W: value out of range: 62, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
0C5 201CF        536                           CALL LCD_write_data
0C6 00110        537                           LOAD s5, character_l
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_L'.
0C7 201CF        538                           CALL LCD_write_data
0C8 001D0        539                           LOAD s5, character_a
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
0C9 201CF        540                           CALL LCD_write_data
0CA 00110        541                           LOAD s5, character_z
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_Z'.
0CB 201CF        542                           CALL LCD_write_data
0CC 00110        543                           LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
0CD 201CF        544                           CALL LCD_write_data
0CE 25000        545                           RETURN
                 546                           ;
                 547                           ;
                 548                           ;Display 'Frequency' on LCD at current cursor position
                 549                           ;
                 550                           ;
0CF 00120        551           disp_Frequency: LOAD s5, character_F
E: symbol not defined: `S5'.
W: value out of range: 66, allowed range is [0,15] (trimmed to 4 bits) which makes it 2.
0D0 201CF        552                           CALL LCD_write_data
0D1 00180        553                           LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
0D2 201CF        554                           CALL LCD_write_data
0D3 00110        555                           LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
0D4 201CF        556                           CALL LCD_write_data
0D5 00170        557                           LOAD s5, character_q
E: symbol not defined: `S5'.
W: value out of range: 71, allowed range is [0,15] (trimmed to 4 bits) which makes it 7.
0D6 201CF        558                           CALL LCD_write_data
0D7 001B0        559                           LOAD s5, character_u
E: symbol not defined: `S5'.
W: value out of range: 75, allowed range is [0,15] (trimmed to 4 bits) which makes it 11.
0D8 201CF        560                           CALL LCD_write_data
0D9 00110        561                           LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
0DA 201CF        562                           CALL LCD_write_data
0DB 00110        563                           LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
0DC 201CF        564                           CALL LCD_write_data
0DD 001F0        565                           LOAD s5, character_c
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
0DE 201CF        566                           CALL LCD_write_data
0DF 001F0        567                           LOAD s5, character_y
E: symbol not defined: `S5'.
W: value out of range: 79, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
0E0 201CF        568                           CALL LCD_write_data
0E1 25000        569                           RETURN
                 570                           ;
                 571                           ;
                 572                           ;Display 'Counter' on LCD at current cursor position
                 573                           ;
                 574                           ;
0E2 001F0        575             disp_Counter: LOAD s5, character_C
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
0E3 201CF        576                           CALL LCD_write_data
0E4 00110        577                           LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
0E5 201CF        578                           CALL LCD_write_data
0E6 001B0        579                           LOAD s5, character_u
E: symbol not defined: `S5'.
W: value out of range: 75, allowed range is [0,15] (trimmed to 4 bits) which makes it 11.
0E7 201CF        580                           CALL LCD_write_data
0E8 00110        581                           LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
0E9 201CF        582                           CALL LCD_write_data
0EA 001A0        583                           LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
0EB 201CF        584                           CALL LCD_write_data
0EC 00110        585                           LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
0ED 201CF        586                           CALL LCD_write_data
0EE 00180        587                           LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
0EF 201CF        588                           CALL LCD_write_data
0F0 25000        589                           RETURN
                 590                           ;
                 591                           ;Display version number on LCD at current cursor position
                 592                           ;
                 593                           ;
0F1 001C0        594             disp_version: LOAD s5, character_v
E: symbol not defined: `S5'.
W: value out of range: 76, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
0F2 201CF        595                           CALL LCD_write_data
0F3 001F0        596                           LOAD s5, character_1
E: symbol not defined: `S5'.
W: value out of range: 31, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
0F4 201CF        597                           CALL LCD_write_data
0F5 00110        598                           LOAD s5, character_stop
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_STOP'.
0F6 201CF        599                           CALL LCD_write_data
0F7 001E0        600                           LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
0F8 201CF        601                           CALL LCD_write_data
0F9 001E0        602                           LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
0FA 201CF        603                           CALL LCD_write_data
0FB 25000        604                           RETURN
                 605                           ;
                 606                           ;
                 607                           ;Display 'SMA input' at current cursor position
                 608                           ;
                 609                           ;
0FC 00190        610           disp_SMA_input: LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
0FD 201CF        611                           CALL LCD_write_data
0FE 00160        612                           LOAD s5, character_M
E: symbol not defined: `S5'.
0FF 201CF        613                           CALL LCD_write_data
100 001D0        614                           LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
101 201CF        615                           CALL LCD_write_data
102 00140        616                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
103 201CF        617                           CALL LCD_write_data
104 00150        618                           LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
105 201CF        619                           CALL LCD_write_data
106 00110        620                           LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
107 201CF        621                           CALL LCD_write_data
108 00160        622                           LOAD s5, character_p
E: symbol not defined: `S5'.
W: value out of range: 70, allowed range is [0,15] (trimmed to 4 bits) which makes it 6.
109 201CF        623                           CALL LCD_write_data
10A 001B0        624                           LOAD s5, character_u
E: symbol not defined: `S5'.
W: value out of range: 75, allowed range is [0,15] (trimmed to 4 bits) which makes it 11.
10B 201CF        625                           CALL LCD_write_data
10C 001A0        626                           LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
10D 201CF        627                           CALL LCD_write_data
10E 00160        628                           LOAD sF, 06
E: symbol not defined: `SF'.
10F 22153        629                           JUMP disp_spaces
                 630                           ;
                 631                           ;
                 632                           ;
                 633                           ;Display '50MHz Crystal' at current cursor position
                 634                           ;
                 635                           ;
110 00130        636       disp_50MHz_Crystal: LOAD s5, character_5
E: symbol not defined: `S5'.
W: value out of range: 35, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
111 201CF        637                           CALL LCD_write_data
112 001E0        638                           LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
113 201CF        639                           CALL LCD_write_data
114 00160        640                           LOAD s5, character_M
E: symbol not defined: `S5'.
115 201CF        641                           CALL LCD_write_data
116 00140        642                           LOAD s5, character_H
E: symbol not defined: `S5'.
W: value out of range: 68, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
117 201CF        643                           CALL LCD_write_data
118 00110        644                           LOAD s5, character_z
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_Z'.
119 201CF        645                           CALL LCD_write_data
11A 00140        646                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
11B 201CF        647                           CALL LCD_write_data
11C 001F0        648                           LOAD s5, character_C
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
11D 201CF        649                           CALL LCD_write_data
11E 00180        650                           LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
11F 201CF        651                           CALL LCD_write_data
120 001F0        652                           LOAD s5, character_y
E: symbol not defined: `S5'.
W: value out of range: 79, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
121 201CF        653                           CALL LCD_write_data
122 00190        654                           LOAD s5, character_s
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
123 201CF        655                           CALL LCD_write_data
124 001A0        656                           LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
125 201CF        657                           CALL LCD_write_data
126 001D0        658                           LOAD s5, character_a
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
127 201CF        659                           CALL LCD_write_data
128 00110        660                           LOAD s5, character_l
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_L'.
129 201CF        661                           CALL LCD_write_data
12A 00120        662                           LOAD sF, 02
E: symbol not defined: `SF'.
12B 22153        663                           JUMP disp_spaces
                 664                           ;
                 665                           ;
                 666                           ;
                 667                           ;Display 'DCM oscillator' at current cursor position
                 668                           ;
                 669                           ;
12C 00100        670      disp_DCM_Oscillator: LOAD s5, character_D
E: symbol not defined: `S5'.
W: value out of range: 64, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
12D 201CF        671                           CALL LCD_write_data
12E 001F0        672                           LOAD s5, character_C
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
12F 201CF        673                           CALL LCD_write_data
130 00160        674                           LOAD s5, character_M
E: symbol not defined: `S5'.
131 201CF        675                           CALL LCD_write_data
132 00140        676          disp_Oscillator: LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
133 201CF        677                           CALL LCD_write_data
134 00110        678                           LOAD s5, character_O
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
135 201CF        679                           CALL LCD_write_data
136 00190        680                           LOAD s5, character_s
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
137 201CF        681                           CALL LCD_write_data
138 001F0        682                           LOAD s5, character_c
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
139 201CF        683                           CALL LCD_write_data
13A 00150        684                           LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
13B 201CF        685                           CALL LCD_write_data
13C 00110        686                           LOAD s5, character_l
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_L'.
13D 201CF        687                           CALL LCD_write_data
13E 201CF        688                           CALL LCD_write_data
13F 001D0        689                           LOAD s5, character_a
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
140 201CF        690                           CALL LCD_write_data
141 001A0        691                           LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
142 201CF        692                           CALL LCD_write_data
143 00110        693                           LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
144 201CF        694                           CALL LCD_write_data
145 00180        695                           LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
146 201CF        696                           CALL LCD_write_data
147 00140        697                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
148 201CF        698                           CALL LCD_write_data
149 25000        699                           RETURN
                 700                           ;
                 701                           ;
                 702                           ;
                 703                           ;Display 'Ring oscillator' at current cursor position
                 704                           ;
                 705                           ;
14A 00180        706     disp_Ring_Oscillator: LOAD s5, character_R
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
14B 201CF        707                           CALL LCD_write_data
14C 00150        708                           LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
14D 201CF        709                           CALL LCD_write_data
14E 00110        710                           LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
14F 201CF        711                           CALL LCD_write_data
150 00130        712                           LOAD s5, character_g
E: symbol not defined: `S5'.
W: value out of range: 67, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
151 201CF        713                           CALL LCD_write_data
152 22132        714                           JUMP disp_Oscillator
                 715                           ;
                 716                           ;
                 717                           ;Display spaces at current cursor position
                 718                           ;Number of spaces to be specified in register sF
                 719                           ;
153 1C100        720              disp_spaces: COMPARE sF, 00
E: symbol not defined: `SF'.
154 31000        721                           RETURN Z
155 00140        722                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
156 201CF        723                           CALL LCD_write_data
157 18110        724                           SUB sF, 01
E: symbol not defined: `SF'.
158 22153        725                           JUMP disp_spaces
                 726                           ;
                 727                           ;Display switch setting menu on entire display.
                 728                           ;
159 001A0        729                disp_menu: LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
15A 2020C        730                           CALL LCD_cursor
15B 00180        731                           LOAD s5, character_R
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
15C 201CF        732                           CALL LCD_write_data
15D 00150        733                           LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
15E 201CF        734                           CALL LCD_write_data
15F 00110        735                           LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
160 201CF        736                           CALL LCD_write_data
161 00130        737                           LOAD s5, character_g
E: symbol not defined: `S5'.
W: value out of range: 67, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
162 201CF        738                           CALL LCD_write_data
163 00140        739                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
164 201CF        740                           CALL LCD_write_data
165 00100        741                           LOAD s5, character_D
E: symbol not defined: `S5'.
W: value out of range: 64, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
166 201CF        742                           CALL LCD_write_data
167 001F0        743                           LOAD s5, character_C
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
168 201CF        744                           CALL LCD_write_data
169 00160        745                           LOAD s5, character_M
E: symbol not defined: `S5'.
16A 201CF        746                           CALL LCD_write_data
16B 00140        747                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
16C 201CF        748                           CALL LCD_write_data
16D 00130        749                           LOAD s5, character_5
E: symbol not defined: `S5'.
W: value out of range: 35, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
16E 201CF        750                           CALL LCD_write_data
16F 001E0        751                           LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
170 201CF        752                           CALL LCD_write_data
171 00160        753                           LOAD s5, character_M
E: symbol not defined: `S5'.
172 201CF        754                           CALL LCD_write_data
173 00140        755                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
174 201CF        756                           CALL LCD_write_data
175 00190        757                           LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
176 201CF        758                           CALL LCD_write_data
177 00160        759                           LOAD s5, character_M
E: symbol not defined: `S5'.
178 201CF        760                           CALL LCD_write_data
179 001D0        761                           LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
17A 201CF        762                           CALL LCD_write_data
17B 00140        763                           LOAD s5, 20                         ;Line 2 position 0
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
17C 2020C        764                           CALL LCD_cursor
17D 00140        765                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
17E 201CF        766                           CALL LCD_write_data
17F 00190        767                           LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
180 201CF        768                           CALL LCD_write_data
181 001D0        769                           LOAD s5, character_W
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
182 201CF        770                           CALL LCD_write_data
183 00110        771                           LOAD s5, character_3
E: symbol not defined: `S5'.
W: value out of range: 33, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
184 201CF        772                           CALL LCD_write_data
185 00140        773                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
186 201CF        774                           CALL LCD_write_data
187 00190        775                           LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
188 201CF        776                           CALL LCD_write_data
189 001D0        777                           LOAD s5, character_W
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
18A 201CF        778                           CALL LCD_write_data
18B 00100        779                           LOAD s5, character_2
E: symbol not defined: `S5'.
W: value out of range: 32, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
18C 201CF        780                           CALL LCD_write_data
18D 00140        781                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
18E 201CF        782                           CALL LCD_write_data
18F 00190        783                           LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
190 201CF        784                           CALL LCD_write_data
191 001D0        785                           LOAD s5, character_W
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
192 201CF        786                           CALL LCD_write_data
193 001F0        787                           LOAD s5, character_1
E: symbol not defined: `S5'.
W: value out of range: 31, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
194 201CF        788                           CALL LCD_write_data
195 00140        789                           LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
196 201CF        790                           CALL LCD_write_data
197 00190        791                           LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
198 201CF        792                           CALL LCD_write_data
199 001D0        793                           LOAD s5, character_W
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
19A 201CF        794                           CALL LCD_write_data
19B 001E0        795                           LOAD s5, character_0
E: symbol not defined: `S5'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
19C 201CF        796                           CALL LCD_write_data
19D 25000        797                           RETURN
                 798                           ;
                 799                           ;
                 800                           ;
                 801                           ;
                 802                           ;**************************************************************************************
                 803                           ;Software delay routines
                 804                           ;**************************************************************************************
                 805                           ;
                 806                           ;
                 807                           ;
                 808                           ;Delay of 1us.
                 809                           ;
                 810                           ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 811                           ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 812                           ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 813                           ;
                 814                           ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 815                           ;
                 816                           ;Registers used s0
                 817                           ;
19E 00100        818                delay_1us: LOAD s0, delay_1us_constant
E: symbol not defined: `S0'.
19F 18110        819                 wait_1us: SUB s0, 01
E: symbol not defined: `S0'.
1A0 3619F        820                           JUMP NZ, wait_1us
1A1 25000        821                           RETURN
                 822                           ;
                 823                           ;Delay of 40us.
                 824                           ;
                 825                           ;Registers used s0, s1
                 826                           ;
1A2 001C0        827               delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
E: symbol not defined: `S1'.
W: value out of range: 28, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
1A3 2019E        828                wait_40us: CALL delay_1us
1A4 18110        829                           SUB s1, 01
E: symbol not defined: `S1'.
1A5 361A3        830                           JUMP NZ, wait_40us
1A6 25000        831                           RETURN
                 832                           ;
                 833                           ;
                 834                           ;Delay of 1ms.
                 835                           ;
                 836                           ;Registers used s0, s1, s2
                 837                           ;
1A7 00130        838                delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
E: symbol not defined: `S2'.
W: value out of range: 19, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
1A8 201A2        839                 wait_1ms: CALL delay_40us
1A9 18110        840                           SUB s2, 01
E: symbol not defined: `S2'.
1AA 361A8        841                           JUMP NZ, wait_1ms
1AB 25000        842                           RETURN
                 843                           ;
                 844                           ;Delay of 20ms.
                 845                           ;
                 846                           ;Delay of 20ms used during initialisation.
                 847                           ;
                 848                           ;Registers used s0, s1, s2, s3
                 849                           ;
1AC 001E0        850               delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
E: symbol not defined: `S3'.
1AD 201A7        851                wait_20ms: CALL delay_1ms
1AE 18110        852                           SUB s3, 01
E: symbol not defined: `S3'.
1AF 361AD        853                           JUMP NZ, wait_20ms
1B0 25000        854                           RETURN
                 855                           ;
                 856                           ;Delay of approximately 1 second.
                 857                           ;
                 858                           ;Registers used s0, s1, s2, s3, s4
                 859                           ;
1B1 00100        860                 delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
E: symbol not defined: `S4'.
W: value out of range: 32, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
1B2 201AC        861                  wait_1s: CALL delay_20ms
1B3 18110        862                           SUB s4, 01
E: symbol not defined: `S4'.
1B4 361B2        863                           JUMP NZ, wait_1s
1B5 25000        864                           RETURN
                 865                           ;
                 866                           ;
                 867                           ;
                 868                           ;**************************************************************************************
                 869                           ;LCD Character Module Routines
                 870                           ;**************************************************************************************
                 871                           ;
                 872                           ;LCD module is a 16 character by 2 line display but all displays are very similar
                 873                           ;The 4-wire data interface will be used (DB4 to DB7).
                 874                           ;
                 875                           ;The LCD modules are relatively slow and software delay loops are used to slow down
                 876                           ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                 877                           ;a different section (see above in this case).
                 878                           ;
                 879                           ;
                 880                           ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                 881                           ;
                 882                           ;Register s4 should define the current state of the LCD output port.
                 883                           ;
                 884                           ;Registers used s0, s4
                 885                           ;
1B6 06110        886              LCD_pulse_E: XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
1B7 2D104        887                           OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1B8 2019E        888                           CALL delay_1us
1B9 06110        889                           XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
1BA 2D104        890                           OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1BB 25000        891                           RETURN
                 892                           ;
                 893                           ;Write 4-bit instruction to LCD display.
                 894                           ;
                 895                           ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                 896                           ;Note that this routine does not release the master enable but as it is only
                 897                           ;used during initialisation and as part of the 8-bit instruction write it
                 898                           ;should be acceptable.
                 899                           ;
                 900                           ;Registers used s4
                 901                           ;
1BC 02110        902          LCD_write_inst4: AND s4, F8                          ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F8'.
1BD 2D104        903                           OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1BE 201B6        904                           CALL LCD_pulse_E
1BF 25000        905                           RETURN
                 906                           ;
                 907                           ;
                 908                           ;Write 8-bit instruction to LCD display.
                 909                           ;
                 910                           ;The 8-bit instruction should be provided in register s5.
                 911                           ;Instructions are written using the following sequence
                 912                           ; Upper nibble
                 913                           ; wait >1us
                 914                           ; Lower nibble
                 915                           ; wait >40us
                 916                           ;
                 917                           ;Registers used s0, s1, s4, s5
                 918                           ;
1C0 00110        919          LCD_write_inst8: LOAD s4, s5
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1C1 02110        920                           AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
1C2 04180        921                           OR s4, LCD_drive                    ;Enable=1
E: symbol not defined: `S4'.
1C3 201BC        922                           CALL LCD_write_inst4                ;write upper nibble
1C4 2019E        923                           CALL delay_1us                      ;wait >1us
1C5 00110        924                           LOAD s4, s5                         ;select lower nibble with
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1C6 14107        925                           SL1 s4                              ;Enable=1
E: symbol not defined: `S4'.
1C7 14106        926                           SL0 s4                              ;RS=0 Instruction
E: symbol not defined: `S4'.
1C8 14106        927                           SL0 s4                              ;RW=0 Write
E: symbol not defined: `S4'.
1C9 14106        928                           SL0 s4                              ;E=0
E: symbol not defined: `S4'.
1CA 201BC        929                           CALL LCD_write_inst4                ;write lower nibble
1CB 201A2        930                           CALL delay_40us                     ;wait >40us
1CC 00110        931                           LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
1CD 2D104        932                           OUTPUT s4, LCD_output_port          ;Release master enable
E: symbol not defined: `S4'.
1CE 25000        933                           RETURN
                 934                           ;
                 935                           ;
                 936                           ;
                 937                           ;Write 8-bit data to LCD display.
                 938                           ;
                 939                           ;The 8-bit data should be provided in register s5.
                 940                           ;Data bytes are written using the following sequence
                 941                           ; Upper nibble
                 942                           ; wait >1us
                 943                           ; Lower nibble
                 944                           ; wait >40us
                 945                           ;
                 946                           ;Registers used s0, s1, s4, s5
                 947                           ;
1CF 00110        948           LCD_write_data: LOAD s4, s5
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1D0 02110        949                           AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
                 950                           OR s4, 0C                           ;Enable=1 RS=1 Data, RW=0 Write, E=0
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
1D1 2D104        951                           OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1D2 201B6        952                           CALL LCD_pulse_E                    ;write upper nibble
1D3 2019E        953                           CALL delay_1us                      ;wait >1us
1D4 00110        954                           LOAD s4, s5                         ;select lower nibble with
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
1D5 14107        955                           SL1 s4                              ;Enable=1
E: symbol not defined: `S4'.
1D6 14107        956                           SL1 s4                              ;RS=1 Data
E: symbol not defined: `S4'.
1D7 14106        957                           SL0 s4                              ;RW=0 Write
E: symbol not defined: `S4'.
1D8 14106        958                           SL0 s4                              ;E=0
E: symbol not defined: `S4'.
1D9 2D104        959                           OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1DA 201B6        960                           CALL LCD_pulse_E                    ;write lower nibble
1DB 201A2        961                           CALL delay_40us                     ;wait >40us
1DC 00110        962                           LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
1DD 2D104        963                           OUTPUT s4, LCD_output_port          ;Release master enable
E: symbol not defined: `S4'.
1DE 25000        964                           RETURN
                 965                           ;
                 966                           ;
                 967                           ;
                 968                           ;
                 969                           ;Read 8-bit data from LCD display.
                 970                           ;
                 971                           ;The 8-bit data will be read from the current LCD memory address
                 972                           ;and will be returned in register s5.
                 973                           ;It is advisable to set the LCD address (cursor position) before
                 974                           ;using the data read for the first time otherwise the display may
                 975                           ;generate invalid data on the first read.
                 976                           ;
                 977                           ;Data bytes are read using the following sequence
                 978                           ; Upper nibble
                 979                           ; wait >1us
                 980                           ; Lower nibble
                 981                           ; wait >40us
                 982                           ;
                 983                           ;Registers used s0, s1, s4, s5
                 984                           ;
                 985           LCD_read_data8: LOAD s4, 0E                         ;Enable=1 RS=1 Data, RW=1 Read, E=0
E: identifier cannot start with a digit: `0E'.
E: unexpected end of line.
1DF 2D104        986                           OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
1E0 06110        987                           XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
1E1 2D104        988                           OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1E2 2019E        989                           CALL delay_1us                      ;wait >260ns to access data
1E3 09109        990                           INPUT s5, LCD_input_port            ;read upper nibble
E: symbol not defined: `S5'.
1E4 06110        991                           XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
1E5 2D104        992                           OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1E6 2019E        993                           CALL delay_1us                      ;wait >1us
1E7 06110        994                           XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
1E8 2D104        995                           OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1E9 2019E        996                           CALL delay_1us                      ;wait >260ns to access data
1EA 09109        997                           INPUT s0, LCD_input_port            ;read lower nibble
E: symbol not defined: `S0'.
1EB 06110        998                           XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
1EC 2D104        999                           OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
1ED 02110       1000                           AND s5, F0                          ;merge upper and lower nibbles
E: symbol not defined: `S5'.
E: symbol not defined: `F0'.
1EE 1410E       1001                           SR0 s0
E: symbol not defined: `S0'.
1EF 1410E       1002                           SR0 s0
E: symbol not defined: `S0'.
1F0 1410E       1003                           SR0 s0
E: symbol not defined: `S0'.
1F1 1410E       1004                           SR0 s0
E: symbol not defined: `S0'.
1F2 04110       1005                           OR s5, s0
E: symbol not defined: `S5'.
E: symbol not defined: `S0'.
1F3 00140       1006                           LOAD s4, 04                         ;Enable=0 RS=1 Data, RW=0 Write, E=0
E: symbol not defined: `S4'.
1F4 2D104       1007                           OUTPUT s4, LCD_output_port          ;Stop reading 5V device and release master enable
E: symbol not defined: `S4'.
1F5 201A2       1008                           CALL delay_40us                     ;wait >40us
1F6 25000       1009                           RETURN
                1010                           ;
                1011                           ;
                1012                           ;Reset and initialise display to communicate using 4-bit data mode
                1013                           ;Includes routine to clear the display.
                1014                           ;
                1015                           ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                1016                           ;following by the 8-bit instructions to set up the display.
                1017                           ;
                1018                           ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                1019                           ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
                1020                           ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                1021                           ;  01 = '00000001' Display clear
                1022                           ;
                1023                           ;Registers used s0, s1, s2, s3, s4
                1024                           ;
1F7 201AC       1025                LCD_reset: CALL delay_20ms                     ;wait more that 15ms for display to be ready
1F8 001E0       1026                           LOAD s4, 30
E: symbol not defined: `S4'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
1F9 201BC       1027                           CALL LCD_write_inst4                ;send '3'
1FA 201AC       1028                           CALL delay_20ms                     ;wait >4.1ms
1FB 201BC       1029                           CALL LCD_write_inst4                ;send '3'
1FC 201A7       1030                           CALL delay_1ms                      ;wait >100us
1FD 201BC       1031                           CALL LCD_write_inst4                ;send '3'
1FE 201A2       1032                           CALL delay_40us                     ;wait >40us
1FF 00140       1033                           LOAD s4, 20
E: symbol not defined: `S4'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
200 201BC       1034                           CALL LCD_write_inst4                ;send '2'
201 201A2       1035                           CALL delay_40us                     ;wait >40us
202 001C0       1036                           LOAD s5, 28                         ;Function set
E: symbol not defined: `S5'.
W: value out of range: 28, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
203 201C0       1037                           CALL LCD_write_inst8
204 00160       1038                           LOAD s5, 06                         ;Entry mode
E: symbol not defined: `S5'.
205 201C0       1039                           CALL LCD_write_inst8
                1040                           LOAD s5, 0C                         ;Display control
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
206 201C0       1041                           CALL LCD_write_inst8
207 00110       1042                LCD_clear: LOAD s5, 01                         ;Display clear
E: symbol not defined: `S5'.
208 201C0       1043                           CALL LCD_write_inst8
209 201A7       1044                           CALL delay_1ms                      ;wait >1.64ms for display to clear
20A 201A7       1045                           CALL delay_1ms
20B 25000       1046                           RETURN
                1047                           ;
                1048                           ;Position the cursor ready for characters to be written.
                1049                           ;The display is formed of 2 lines of 16 characters and each
                1050                           ;position has a corresponding address as indicated below.
                1051                           ;
                1052                           ;                   Character position
                1053                           ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                1054                           ;
                1055                           ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                1056                           ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                1057                           ;
                1058                           ;This routine will set the cursor position using the value provided
                1059                           ;in register s5. The upper nibble will define the line and the lower
                1060                           ;nibble the character position on the line.
                1061                           ; Example s5 = 2B will position the cursor on line 2 position 11
                1062                           ;
                1063                           ;Registers used s0, s1, s2, s3, s4
                1064                           ;
20C 0C1A0       1065               LCD_cursor: TEST s5, 10                         ;test for line 1
E: symbol not defined: `S5'.
20D 32001       1066                           JUMP Z, set_line2
E: symbol not defined: `SET_LINE2'.
                1067                           AND s5, 0F                          ;make address in range 80 to 8F for line 1
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
20E 04100       1068                           OR s5, 80
E: symbol not defined: `S5'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
20F 201C0       1069                           CALL LCD_write_inst8                ;instruction write to set cursor
210 25000       1070                           RETURN
                1071                set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
211 04110       1072                           OR s5, C0
E: symbol not defined: `S5'.
E: symbol not defined: `C0'.
212 201C0       1073                           CALL LCD_write_inst8                ;instruction write to set cursor
213 25000       1074                           RETURN
                1075                           ;
                1076                           ;
                1077                           ;
                1078                           ;**************************************************************************************
                1079                           ;Interrupt Service Routine
                1080                           ;**************************************************************************************
                1081                           ;
                1082                           ;
                1083                           ;Each interrupt means that there is a new count value to be read.
                1084                           ;However the first 4 interrupts are ignored other than to clear the counter to
                1085                           ;ensure that even the first reading is for one complete period.
                1086                           ;
                1087                           ;After reading the active counter, all calculations are performed and values stored
                1088                           ;in scratch pad memory are updated to reflect the new values.
                1089                           ;
                1090                           ;Registers are preserved and restored by the ISR so main program is unaffected.
                1091                           ;
214 2F11E       1092                      ISR: STORE s0, preserve_s0               ;preserve registers
E: symbol not defined: `S0'.
215 2F11F       1093                           STORE s1, preserve_s1
E: symbol not defined: `S1'.
216 2F120       1094                           STORE s2, preserve_s2
E: symbol not defined: `S2'.
217 2F121       1095                           STORE s3, preserve_s3
E: symbol not defined: `S3'.
218 2F122       1096                           STORE s4, preserve_s4
E: symbol not defined: `S4'.
219 2F123       1097                           STORE s5, preserve_s5
E: symbol not defined: `S5'.
21A 2F124       1098                           STORE s6, preserve_s6
E: symbol not defined: `S6'.
21B 2F125       1099                           STORE s7, preserve_s7
E: symbol not defined: `S7'.
21C 2F126       1100                           STORE s8, preserve_s8
E: symbol not defined: `S8'.
21D 2F127       1101                           STORE s9, preserve_s9
E: symbol not defined: `S9'.
21E 2F101       1102                           STORE sA, preserve_sA
E: symbol not defined: `SA'.
E: symbol not defined: `PRESERVE_SA'.
21F 2F101       1103                           STORE sB, preserve_sB
E: symbol not defined: `SB'.
E: symbol not defined: `PRESERVE_SB'.
220 2F101       1104                           STORE sC, preserve_sC
E: symbol not defined: `SC'.
E: symbol not defined: `PRESERVE_SC'.
221 2F103       1105                           STORE sD, preserve_sD
E: symbol not defined: `SD'.
222 2F101       1106                           STORE sE, preserve_sE
E: symbol not defined: `SE'.
E: symbol not defined: `PRESERVE_SE'.
223 2F101       1107                           STORE sF, preserve_sF
E: symbol not defined: `SF'.
E: symbol not defined: `PRESERVE_SF'.
                1108                           ;
                1109                           ;Ignore the first 4 interrupts except to clear the counter.
                1110                           ;This will ensure a clean start up after reset.
                1111                           ;
224 0B104       1112                           FETCH s0, ISR_count                 ;test to see if more that 4 interrupts have occurred
E: symbol not defined: `S0'.
225 1C140       1113                           COMPARE s0, 04
E: symbol not defined: `S0'.
226 32233       1114                           JUMP Z, normal_isr
227 10110       1115                           ADD s0, 01                          ;increment ISR counter until reaching 4
E: symbol not defined: `S0'.
228 2F104       1116                           STORE s0, ISR_count
E: symbol not defined: `S0'.
229 09150       1117                           INPUT s0, status_port               ;Check which counter to clear
E: symbol not defined: `S0'.
22A 0C1A0       1118                           TEST s0, AB_switch                  ;if bit0 is Low then A is counting
E: symbol not defined: `S0'.
22B 3222E       1119                           JUMP Z, clear_B_count
22C 00110       1120            clear_A_count: LOAD s0, a_count_reset              ;clear the active counter
E: symbol not defined: `S0'.
22D 2222F       1121                           JUMP clear_counter
22E 00120       1122            clear_B_count: LOAD s0, b_count_reset              ;clear the active counter
E: symbol not defined: `S0'.
22F 2D102       1123            clear_counter: OUTPUT s0, count_resetport          ;reset counter with pulse
E: symbol not defined: `S0'.
230 00100       1124                           LOAD s0, 00                         ;end reset pulse to either counter
E: symbol not defined: `S0'.
231 2D102       1125                           OUTPUT s0, count_resetport
E: symbol not defined: `S0'.
232 2224C       1126                           JUMP restore_reg
                1127                           ;
                1128                           ;Normal ISR Routine
                1129                           ;
                1130                           ;
                1131                           ;Read the new counter value and then clear it ready to start again
                1132                           ;
                1133                           ;
233 09150       1134               normal_isr: INPUT s0, status_port               ;test for active counter
E: symbol not defined: `S0'.
234 0C1A0       1135                           TEST s0, AB_switch                  ;if bit is low then A is counting
E: symbol not defined: `S0'.
235 32001       1136                           JUMP Z, capture_B_count
E: symbol not defined: `CAPTURE_B_COUNT'.
236 00110       1137          capture_A_count: LOAD s0, F0                         ;set LEDs to indicate active counter
E: symbol not defined: `S0'.
E: symbol not defined: `F0'.
237 2D101       1138                           OUTPUT s0, LED_port
E: symbol not defined: `S0'.
238 09100       1139                           INPUT sC, A_count0_port             ;read counter A into [sF,sE,SD,sC]
E: symbol not defined: `SC'.
239 0910A       1140                           INPUT sD, A_count1_port
E: symbol not defined: `SD'.
23A 09114       1141                           INPUT sE, A_count2_port
E: symbol not defined: `SE'.
23B 0911E       1142                           INPUT sF, A_count3_port
E: symbol not defined: `SF'.
23C 00110       1143                           LOAD s0, a_count_reset              ;reset counter A
E: symbol not defined: `S0'.
23D 2D102       1144                           OUTPUT s0, count_resetport
E: symbol not defined: `S0'.
23E 22246       1145                           JUMP counters_read
                1146                           ;
                1147          capture_B_count: LOAD s0, 0F                         ;set LEDs to indicate active counter
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
23F 2D101       1148                           OUTPUT s0, LED_port
E: symbol not defined: `S0'.
240 09128       1149                           INPUT sC, B_count0_port             ;read counter A into [sF,sE,SD,sC]
E: symbol not defined: `SC'.
241 09132       1150                           INPUT sD, B_count1_port
E: symbol not defined: `SD'.
242 0913C       1151                           INPUT sE, B_count2_port
E: symbol not defined: `SE'.
243 09146       1152                           INPUT sF, B_count3_port
E: symbol not defined: `SF'.
244 00120       1153                           LOAD s0, b_count_reset              ;reset counter B
E: symbol not defined: `S0'.
245 2D102       1154                           OUTPUT s0, count_resetport
E: symbol not defined: `S0'.
246 00100       1155            counters_read: LOAD s0, 00                         ;end reset pulse to either counter
E: symbol not defined: `S0'.
247 2D102       1156                           OUTPUT s0, count_resetport
E: symbol not defined: `S0'.
                1157                           ;
248 2F100       1158                           STORE sC, count0                    ;store new counter value
E: symbol not defined: `SC'.
249 2F101       1159                           STORE sD, count1
E: symbol not defined: `SD'.
24A 2F102       1160                           STORE sE, count2
E: symbol not defined: `SE'.
24B 2F103       1161                           STORE sF, count3
E: symbol not defined: `SF'.
                1162                           ;
                1163                           ;
                1164                           ;
                1165                           ;Restore registers and end ISR
                1166                           ;
24C 0B101       1167              restore_reg: FETCH sF, preserve_sF               ;restore registers
E: symbol not defined: `SF'.
E: symbol not defined: `PRESERVE_SF'.
24D 0B101       1168                           FETCH sE, preserve_sE
E: symbol not defined: `SE'.
E: symbol not defined: `PRESERVE_SE'.
24E 0B103       1169                           FETCH sD, preserve_sD
E: symbol not defined: `SD'.
24F 0B101       1170                           FETCH sC, preserve_sC
E: symbol not defined: `SC'.
E: symbol not defined: `PRESERVE_SC'.
250 0B101       1171                           FETCH sB, preserve_sB
E: symbol not defined: `SB'.
E: symbol not defined: `PRESERVE_SB'.
251 0B101       1172                           FETCH sA, preserve_sA
E: symbol not defined: `SA'.
E: symbol not defined: `PRESERVE_SA'.
252 0B127       1173                           FETCH s9, preserve_s9
E: symbol not defined: `S9'.
253 0B126       1174                           FETCH s8, preserve_s8
E: symbol not defined: `S8'.
254 0B125       1175                           FETCH s7, preserve_s7
E: symbol not defined: `S7'.
255 0B124       1176                           FETCH s6, preserve_s6
E: symbol not defined: `S6'.
256 0B123       1177                           FETCH s5, preserve_s5
E: symbol not defined: `S5'.
257 0B122       1178                           FETCH s4, preserve_s4
E: symbol not defined: `S4'.
258 0B121       1179                           FETCH s3, preserve_s3
E: symbol not defined: `S3'.
259 0B120       1180                           FETCH s2, preserve_s2
E: symbol not defined: `S2'.
25A 0B11F       1181                           FETCH s1, preserve_s1
E: symbol not defined: `S1'.
25B 0B11E       1182                           FETCH s0, preserve_s0
E: symbol not defined: `S0'.
25C 29001       1183                           RETURNI ENABLE
                1184                           ;
                1185                           ;
                1186                           ;Interrupt vector
                1187                           ;
                1188                           ADDRESS 3FF
E: identifier cannot start with a digit: `3FF'.
E: directive ADDRESS requires a single argument.
25D 22214       1189                           JUMP ISR
                1190                           ;
                1191                           ;
                1192                           ;**************************************************************************************
                1193                           ;End of Program
                1194                           ;**************************************************************************************
                1195                           ;
                1196                           ;
