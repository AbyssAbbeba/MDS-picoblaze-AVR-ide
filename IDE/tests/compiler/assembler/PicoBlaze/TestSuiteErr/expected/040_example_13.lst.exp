                   1                      CONSTANT LED_port, 80               ;8 simple LEDs
                   2                      CONSTANT LED0, 01                   ;     LED 0 - bit0
                   3                      CONSTANT LED1, 02                   ;         1 - bit1
                   4                      CONSTANT LED2, 04                   ;         2 - bit2
                   5                      CONSTANT LED3, 08                   ;         3 - bit3
                   6                      CONSTANT LED4, 10                   ;         4 - bit4
                   7                      CONSTANT LED5, 20                   ;         5 - bit5
                   8                      CONSTANT LED6, 40                   ;         6 - bit6
                   9                      CONSTANT LED7, 80                   ;         7 - bit7
                  10                      ;
                  11                      CONSTANT switch_port, 00            ;Read switches and press buttons
                  12                      CONSTANT switch0, 01                ;  Switches      SW0 - bit0
                  13                      CONSTANT switch1, 02                ;                SW1 - bit1
                  14                      CONSTANT switch2, 04                ;                SW2 - bit2
                  15                      CONSTANT switch3, 08                ;                SW3 - bit3
                  16                      CONSTANT BTN_east, 10               ;  Buttons      East - bit4
                  17                      CONSTANT BTN_south, 20              ;              South - bit5
                  18                      CONSTANT BTN_north, 40              ;              North - bit6
                  19                      CONSTANT BTN_west, 80               ;               West - bit7
                  20                      ;
                  21                      CONSTANT rotary_port, 01            ;Read status of rotary encoder
                  22                      CONSTANT rotary_left, 01            ; Direction of last move Left=1 Right=0  - bit0
                  23                      CONSTANT rotary_press, 02           ;     Centre press contact (active High) - bit1
                  24                      ;
                  25                      ;LCD interface ports
                  26                      ;
                  27                      ;The master enable signal is not used by the LCD display itself
                  28                      ;but may be required to confirm that LCD communication is active.
                  29                      ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  30                      ;is used because it shares the same data pins and conflicts must be avoided.
                  31                      ;
                  32                      CONSTANT LCD_output_port, 40        ;LCD character module output data and control
                  33                      CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
                  34                      CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
                  35                      CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
                  36                      CONSTANT LCD_drive, 08              ;   Master enable (active High) - bit3
                  37                      CONSTANT LCD_DB4, 10                ;   4-bit              Data DB4 - bit4
                  38                      CONSTANT LCD_DB5, 20                ;   interface          Data DB5 - bit5
                  39                      CONSTANT LCD_DB6, 40                ;                      Data DB6 - bit6
                  40                      CONSTANT LCD_DB7, 80                ;                      Data DB7 - bit7
                  41                      ;
                  42                      CONSTANT LCD_input_port, 02         ;LCD character module input data
                  43                      CONSTANT LCD_read_spare0, 01        ;    Spare bits               - bit0
                  44                      CONSTANT LCD_read_spare1, 02        ;    are zero                 - bit1
                  45                      CONSTANT LCD_read_spare2, 04        ;                             - bit2
                  46                      CONSTANT LCD_read_spare3, 08        ;                             - bit3
                  47                      CONSTANT LCD_read_DB4, 10           ;    4-bit           Data DB4 - bit4
                  48                      CONSTANT LCD_read_DB5, 20           ;    interface       Data DB5 - bit5
                  49                      CONSTANT LCD_read_DB6, 40           ;                    Data DB6 - bit6
                  50                      CONSTANT LCD_read_DB7, 80           ;                    Data DB7 - bit7
                  51                      CONSTANT BIT7, 80                   ;
                  52                      CONSTANT BIT6, 40                   ;
                  53                      CONSTANT BIT5, 20                   ;
                  54                      CONSTANT BIT4, 10                   ;
                  55                      CONSTANT BIT3, 08                   ;
                  56                      CONSTANT BIT2, 04                   ;
                  57                      CONSTANT BIT1, 02                   ;
                  58                      CONSTANT BIT0, 01                   ;
                  59                      ;
                  60                      ;**************************************************************************************
                  61                      ;Scratch Pad Memory Locations
                  62                      ;**************************************************************************************
                  63                      ;
                  64                      CONSTANT rotary_status, 00          ;Status of rotary encoder
                  65                      CONSTANT ISR_s0, 01                 ;Preserve s0 contents during ISR
                  66                      CONSTANT LED_pattern, 02            ;LED pattern used in rotation mode
                  67                      ;
                  68                      CONSTANT mode, 03                   ;control mode 00=switch and button FF=rotary
                  69                      CONSTANT ms1, 04
                  70                      CONSTANT secL, 05
                  71                      CONSTANT secH, 06
                  72                      CONSTANT minL, 07
                  73                      CONSTANT minH, 08
                  74                      CONSTANT hourL, 09
                  75                      CONSTANT hourH, 0A
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
                  76                      CONSTANT week, 0B
                  77                      CONSTANT year1, 0C
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
                  78                      CONSTANT year2, 0D
                  79                      CONSTANT year3, 0E
E: identifier cannot start with a digit: `0E'.
E: unexpected end of line.
                  80                      CONSTANT year4, 0F
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
                  81                      CONSTANT ms2, 10
                  82                      CONSTANT ms500, 11
                  83                      CONSTANT ISR_s1, 12
                  84                      CONSTANT ms100, 13
                  85                      CONSTANT ROTA_CNT, 14
                  86                      CONSTANT ISR_s2, 15
                  87                      CONSTANT temp, 16
                  88                      CONSTANT pressed, 17
                  89                      CONSTANT disp_flag, 18
                  90                      CONSTANT blink_flag, 19
                  91                      CONSTANT disp_flag2, 1A             ;;;;;no use
E: identifier cannot start with a digit: `1A'.
E: unexpected COMMENT.
                  92                      CONSTANT monH, 1B
                  93                      CONSTANT monL, 1C
E: identifier cannot start with a digit: `1C'.
E: unexpected end of line.
                  94                      CONSTANT dayH, 1D
                  95                      CONSTANT dayL, 1E
E: identifier cannot start with a digit: `1E'.
E: unexpected end of line.
                  96                      CONSTANT DAY_UP, 1F
E: identifier cannot start with a digit: `1F'.
E: unexpected end of line.
                  97                      CONSTANT year100, 20
                  98                      CONSTANT hourB, 21
                  99                      CONSTANT minB, 22
                 100                      CONSTANT secB, 23
                 101                      CONSTANT yearB, 24
                 102                      CONSTANT monB, 25
                 103                      CONSTANT dayB, 26
                 104                      CONSTANT DMAX, 27                   ;
                 105                      CONSTANT JAN, 28                    ;
                 106                      CONSTANT FEB, 29                    ;
                 107                      CONSTANT MAR, 2A                    ;
E: identifier cannot start with a digit: `2A'.
E: unexpected end of line.
                 108                      CONSTANT APR, 2B                    ;
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 109                      CONSTANT MAY, 2C                    ;
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 110                      CONSTANT JUN, 2D                    ;
                 111                      CONSTANT JUL, 2E                    ;
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
                 112                      CONSTANT AUG, 2F                    ;
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 113                      CONSTANT SEP, 30                    ;
                 114                      CONSTANT OCT, 31                    ;
                 115                      CONSTANT NOV, 32                    ;
                 116                      CONSTANT DEC, 33                    ;
                 117                      CONSTANT JAN2, 34                   ;
                 118                      CONSTANT FEB2, 35                   ;
                 119                      CONSTANT MAR2, 36                   ;
                 120                      CONSTANT APR2, 37                   ;
                 121                      CONSTANT MAY2, 38                   ;
                 122                      CONSTANT JUN2, 39                   ;
                 123                      CONSTANT JUL2, 3A                   ;
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 124                      CONSTANT AUG2, 3B                   ;
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
                 125                      CONSTANT SEP2, 3C                   ;
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
                 126                      CONSTANT OCT2, 3D                   ;
                 127                      CONSTANT NOV2, 3E                   ;
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
                 128                      CONSTANT DEC2, 3F                   ;
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
                 129                      ;The main operation of the program uses 1ms delays to set the shift rate
                 130                      ;of the LCD display. A 16-bit value determines how many milliseconds
                 131                      ;there are between shifts
                 132                      ;
                 133                      ;Tests indicate that the fastest shift rate that the LCD display supports is
                 134                      ;500ms. Faster than this and the display becomes less clear to read.
                 135                      ;
                 136                      CONSTANT shift_delay_msb, 01        ;delay is 500ms (01F4 hex)
                 137                      CONSTANT shift_delay_lsb, F4
                 138                      ;
                 139                      ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 140                      ;
                 141                      ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 142                      ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 143                      ;become lower than intended.
                 144                      ;
                 145                      CONSTANT delay_1us_constant, 0B
                 146                      ;ASCII table
                 147                      ;
                 148                      CONSTANT character_a, 61
                 149                      CONSTANT character_b, 62
                 150                      CONSTANT character_c, 63
                 151                      CONSTANT character_d, 64
                 152                      CONSTANT character_e, 65
                 153                      CONSTANT character_f, 66
                 154                      CONSTANT character_g, 67
                 155                      CONSTANT character_h, 68
                 156                      CONSTANT character_i, 69
                 157                      CONSTANT character_j, 6A
E: identifier cannot start with a digit: `6A'.
E: unexpected end of line.
                 158                      CONSTANT character_k, 6B
E: identifier cannot start with a digit: `6B'.
E: unexpected end of line.
                 159                      CONSTANT character_l, 6C
E: identifier cannot start with a digit: `6C'.
E: unexpected end of line.
                 160                      CONSTANT character_m, 6D
                 161                      CONSTANT character_n, 6E
E: identifier cannot start with a digit: `6E'.
E: unexpected end of line.
                 162                      CONSTANT character_o, 6F
E: identifier cannot start with a digit: `6F'.
E: unexpected end of line.
                 163                      CONSTANT character_p, 70
                 164                      CONSTANT character_q, 71
                 165                      CONSTANT character_r, 72
                 166                      CONSTANT character_s, 73
                 167                      CONSTANT character_t, 74
                 168                      CONSTANT character_u, 75
                 169                      CONSTANT character_v, 76
                 170                      CONSTANT character_w, 77
                 171                      CONSTANT character_x, 78
                 172                      CONSTANT character_y, 79
                 173                      CONSTANT character_z, 7A
E: identifier cannot start with a digit: `7A'.
E: unexpected end of line.
                 174                      CONSTANT character_A, 41
                 175                      CONSTANT character_B, 42
                 176                      CONSTANT character_C, 43
                 177                      CONSTANT character_D, 44
                 178                      CONSTANT character_E, 45
                 179                      CONSTANT character_F, 46
                 180                      CONSTANT character_G, 47
                 181                      CONSTANT character_H, 48
                 182                      CONSTANT character_I, 49
                 183                      CONSTANT character_J, 4A
E: identifier cannot start with a digit: `4A'.
E: unexpected end of line.
                 184                      CONSTANT character_K, 4B
E: identifier cannot start with a digit: `4B'.
E: unexpected end of line.
                 185                      CONSTANT character_L, 4C
E: identifier cannot start with a digit: `4C'.
E: unexpected end of line.
                 186                      CONSTANT character_M, 4D
                 187                      CONSTANT character_N, 4E
E: identifier cannot start with a digit: `4E'.
E: unexpected end of line.
                 188                      CONSTANT character_O, 4F
E: identifier cannot start with a digit: `4F'.
E: unexpected end of line.
                 189                      CONSTANT character_P, 50
                 190                      CONSTANT character_Q, 51
                 191                      CONSTANT character_R, 52
                 192                      CONSTANT character_S, 53
                 193                      CONSTANT character_T, 54
                 194                      CONSTANT character_U, 55
                 195                      CONSTANT character_V, 56
                 196                      CONSTANT character_W, 57
                 197                      CONSTANT character_X, 58
                 198                      CONSTANT character_Y, 59
                 199                      CONSTANT character_Z, 5A
E: identifier cannot start with a digit: `5A'.
E: unexpected end of line.
                 200                      CONSTANT character_0, 30
                 201                      CONSTANT character_1, 31
                 202                      CONSTANT character_2, 32
                 203                      CONSTANT character_3, 33
                 204                      CONSTANT character_4, 34
                 205                      CONSTANT character_5, 35
                 206                      CONSTANT character_6, 36
                 207                      CONSTANT character_7, 37
                 208                      CONSTANT character_8, 38
                 209                      CONSTANT character_9, 39
                 210                      CONSTANT character_colon, 3A
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 211                      CONSTANT character_stop, 2E
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
                 212                      CONSTANT character_semi_colon, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
                 213                      CONSTANT character_minus, 2D
                 214                      CONSTANT character_divide, 2F       ;'/'
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 215                      CONSTANT character_plus, 2B
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 216                      CONSTANT character_comma, 2C
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 217                      CONSTANT character_less_than, 3C
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
                 218                      CONSTANT character_greater_than, 3E
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
                 219                      CONSTANT character_equals, 3D
                 220                      CONSTANT character_space, 20
                 221                      CONSTANT character_CR, 0D           ;carriage return
                 222                      CONSTANT character_question, 3F     ;'?'
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
                 223                      CONSTANT character_dollar, 24
                 224                      CONSTANT character_exclaim, 21      ;'!'
                 225                      CONSTANT character_BS, 08           ;Back Space command character
                 226                      ;
                 227               reset: CALL LCD_reset
                 228                      ENABLE INTERRUPT
                 229                      LOAD sD, FF
                 230                      LOAD s0, 00                         ;
                 231                      STORE s0, hourH
                 232                      STORE s0, minL
                 233                      STORE s0, minH
                 234                      STORE s0, secH
                 235                      STORE s0, secL
                 236                      STORE s0, year2
                 237                      STORE s0, year3
                 238                      STORE s0, monH
                 239                      STORE s0, minB                      ;;;;;;;;;;
                 240                      STORE s0, secB                      ;;;;;;;;;;
                 241                      LOAD s0, 09                         ;
                 242                      STORE s0, hourL
                 243                      STORE s0, hourB                     ;;;;;;;;;
                 244                      LOAD s0, 02                         ;
                 245                      STORE s0, year1
                 246                      STORE s0, dayH
                 247                      LOAD s0, 06                         ;
                 248                      STORE s0, dayL
                 249                      STORE s0, year4
                 250                      STORE s0, yearB                     ;;;;;;;;;
                 251                      LOAD s0, 05                         ;
                 252                      STORE s0, monL
                 253                      STORE s0, week
                 254                      STORE s0, monB                      ;;;;;;;;;
                 255                      LOAD s0, 1A
E: identifier cannot start with a digit: `1A'.
E: unexpected end of line.
                 256                      STORE s0, dayB                      ;;;;;;;;;
                 257                      LOAD s0, 1F
E: identifier cannot start with a digit: `1F'.
E: unexpected end of line.
                 258                      STORE s0, JAN                       ;1
                 259                      STORE s0, MAR                       ;3
                 260                      STORE s0, MAY                       ;5
                 261                      STORE s0, JUL                       ;7
                 262                      STORE s0, AUG                       ;8
                 263                      STORE s0, OCT                       ;10
                 264                      STORE s0, DEC                       ;12
                 265                      LOAD s0, 1E
E: identifier cannot start with a digit: `1E'.
E: unexpected end of line.
                 266                      STORE s0, APR                       ;4
                 267                      STORE s0, JUN                       ;6
                 268                      STORE s0, SEP                       ;9
                 269                      STORE s0, NOV                       ;11
                 270                      LOAD s0, 1C
E: identifier cannot start with a digit: `1C'.
E: unexpected end of line.
                 271                      STORE s0, FEB                       ;2
                 272                      LOAD s0, 03
                 273                      STORE s0, JAN2
                 274                      STORE s0, OCT2
                 275                      LOAD s0, 06
                 276                      STORE s0, FEB2
                 277                      STORE s0, MAR2
                 278                      STORE s0, NOV2
                 279                      LOAD s0, 02
                 280                      STORE s0, APR2
                 281                      STORE s0, JUL2
                 282                      LOAD s0, 04
                 283                      STORE s0, MAY2
                 284                      LOAD s0, 00
                 285                      STORE s0, JUN2
                 286                      LOAD s0, 05
                 287                      STORE s0, AUG2
                 288                      LOAD s0, 01
                 289                      STORE s0, SEP2
                 290                      STORE s0, DEC2
                 291                      LOAD sF, 00                         ;
                 292             restart:
                 293                      LOAD s5, 10
                 294                      CALL LCD_cursor
                 295                      CALL disp_msg1
                 296                      LOAD s5, 20
                 297                      CALL LCD_cursor
                 298                      CALL disp_msg2
                 299                      LOAD s3, 35
                 300                      STORE s3, temp
                 301             BLINK10: LOAD s3, 00
                 302                      STORE s3, ms100
                 303              BLINK1: FETCH s3, ms100
                 304                      COMPARE s3, 05
                 305                      JUMP C, BLINK1
                 306                      LOAD s5, 2F
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 307                      CALL LCD_cursor
                 308                      FETCH s5, temp
                 309                      CALL LCD_write_data
                 310                      LOAD s3, 00
                 311                      STORE s3, ms100
                 312               wait1: FETCH s3, ms100
                 313                      COMPARE s3, 05
                 314                      JUMP C, wait1
                 315                      LOAD s5, 2F
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 316                      CALL LCD_cursor
                 317                      LOAD s5, 20
                 318                      CALL LCD_write_data
                 319                      FETCH s5, temp
                 320                      ADD s5, FF
                 321                      STORE s5, temp
                 322                      COMPARE s5, 2F
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 323                      JUMP NZ, BLINK10
                 324            RRESTART: LOAD s5, 10
                 325                      CALL LCD_cursor
                 326                      CALL disp_msg3
                 327                      LOAD s5, 20
                 328                      CALL LCD_cursor
                 329                      CALL disp_msg4
                 330                      LOAD s3, 35
                 331                      STORE s3, temp
                 332             BLINK20: LOAD s3, 00
                 333                      STORE s3, ms100
                 334              BLINK2: FETCH s3, ms100
                 335                      COMPARE s3, 05
                 336                      JUMP C, BLINK2
                 337                      LOAD s5, 2F
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 338                      CALL LCD_cursor
                 339                      FETCH s5, temp
                 340                      CALL LCD_write_data
                 341                      LOAD s3, 00
                 342                      STORE s3, ms100
                 343               wait2: FETCH s3, ms100
                 344                      COMPARE s3, 05
                 345                      JUMP C, wait2
                 346                      LOAD s5, 2F
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 347                      CALL LCD_cursor
                 348                      LOAD s5, 20
                 349                      CALL LCD_write_data
                 350                      FETCH s5, temp
                 351                      ADD s5, FF
                 352                      STORE s5, temp
                 353                      COMPARE s5, 2F
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 354                      JUMP NZ, BLINK20
                 355                      LOAD s0, 00
                 356                      STORE s0, LED_pattern
                 357                      STORE s0, mode
                 358                      STORE s0, blink_flag
                 359                      STORE s0, ms100
                 360                      LOAD s5, 10
                 361                      CALL LCD_cursor
                 362                      CALL disp_msg5
                 363                      LOAD s5, 20
                 364                      CALL LCD_cursor
                 365                      CALL disp_msg6
                 366               PAUSE: FETCH s0, ms100
                 367                      COMPARE s0, 32
                 368                      JUMP C, PAUSE
                 369                      CALL LCD_clear
                 370                      INPUT s0, 00
                 371                      STORE s0, disp_flag2
                 372                      STORE s0, ms100
                 373                loop:
                 374                      FETCH s0, hourB
                 375                      CALL B2BCD
                 376                      STORE s0, hourL
                 377                      STORE s1, hourH
                 378                      FETCH s0, minB
                 379                      CALL B2BCD
                 380                      STORE s0, minL
                 381                      STORE s1, minH
                 382                      FETCH s0, secB
                 383                      CALL B2BCD
                 384                      STORE s0, secL
                 385                      STORE s1, secH
                 386                      FETCH s0, dayB
                 387                      CALL B2BCD
                 388                      STORE s0, dayL
                 389                      STORE s1, dayH
                 390                      FETCH s0, monB
                 391                      CALL B2BCD
                 392                      STORE s0, monL
                 393                      STORE s1, monH
                 394                      FETCH s0, yearB
                 395                      CALL B2BCD
                 396                      STORE s0, year4
                 397                      STORE s1, year3
                 398                      AND sF, FF
                 399                      JUMP NZ, SKIP1
                 400                      ;;;DISP HH
                 401                      LOAD s5, 11
                 402                      CALL LCD_cursor
                 403                      FETCH s3, mode
                 404                      COMPARE s3, 01
                 405                      JUMP NZ, DSP_HH
                 406                      FETCH s3, ms500
                 407                      TEST s3, 01
                 408                      JUMP NZ, SPACE7
                 409              DSP_HH: FETCH s5, hourH
                 410                      ADD s5, 30
                 411                      CALL LCD_write_data
                 412                      FETCH s5, hourL
                 413                      ADD s5, 30
                 414                      CALL LCD_write_data
                 415                      JUMP MODE_2
                 416              SPACE7: CALL disp_space
                 417                      CALL disp_space
                 418              MODE_2:
                 419                      ;;;DISP MM
                 420                      LOAD s5, 14
                 421                      CALL LCD_cursor
                 422                      FETCH s3, mode
                 423                      COMPARE s3, 02
                 424                      JUMP NZ, DSP_MM
                 425                      FETCH s3, ms500
                 426                      TEST s3, 01
                 427                      JUMP NZ, SPACE6
                 428              DSP_MM: FETCH s5, minH
                 429                      ADD s5, 30
                 430                      CALL LCD_write_data
                 431                      FETCH s5, minL
                 432                      ADD s5, 30
                 433                      CALL LCD_write_data
                 434                      JUMP MODE_3
                 435              SPACE6: CALL disp_space
                 436                      CALL disp_space
                 437              MODE_3:
                 438                      ;;;DISP SS
                 439                      LOAD s5, 17
                 440                      CALL LCD_cursor
                 441                      FETCH s3, mode
                 442                      COMPARE s3, 03
                 443                      JUMP NZ, DSP_SS
                 444                      FETCH s3, ms500
                 445                      TEST s3, 01
                 446                      JUMP NZ, SPACE5
                 447              DSP_SS: FETCH s5, secH
                 448                      ADD s5, 30
                 449                      CALL LCD_write_data
                 450                      FETCH s5, secL
                 451                      ADD s5, 30
                 452                      CALL LCD_write_data
                 453                      JUMP MODE_4
                 454              SPACE5: CALL disp_space
                 455                      CALL disp_space
                 456              MODE_4:
                 457                      ;;;DISP week
                 458                      LOAD s5, 1C
E: identifier cannot start with a digit: `1C'.
E: unexpected end of line.
                 459                      CALL LCD_cursor
                 460                      FETCH s3, week
                 461                      COMPARE s3, 00
                 462                      JUMP NZ, MON
                 463                      LOAD s5, character_S
                 464                      CALL LCD_write_data
                 465                      LOAD s5, character_u
                 466                      CALL LCD_write_data
                 467                      LOAD s5, character_n
                 468                      CALL LCD_write_data
                 469                      JUMP TEST_BIT0
                 470                 MON: FETCH s3, week
                 471                      COMPARE s3, 01
                 472                      JUMP NZ, TUE
                 473                      LOAD s5, character_M
                 474                      CALL LCD_write_data
                 475                      LOAD s5, character_o
                 476                      CALL LCD_write_data
                 477                      LOAD s5, character_n
                 478                      CALL LCD_write_data
                 479                      JUMP TEST_BIT0
                 480                 TUE: FETCH s3, week
                 481                      COMPARE s3, 02
                 482                      JUMP NZ, WED
                 483                      LOAD s5, character_T
                 484                      CALL LCD_write_data
                 485                      LOAD s5, character_u
                 486                      CALL LCD_write_data
                 487                      LOAD s5, character_e
                 488                      CALL LCD_write_data
                 489                      JUMP TEST_BIT0
                 490                 WED: FETCH s3, week
                 491                      COMPARE s3, 03
                 492                      JUMP NZ, THU
                 493                      LOAD s5, character_W
                 494                      CALL LCD_write_data
                 495                      LOAD s5, character_e
                 496                      CALL LCD_write_data
                 497                      LOAD s5, character_d
                 498                      CALL LCD_write_data
                 499                      JUMP TEST_BIT0
                 500                 THU: FETCH s3, week
                 501                      COMPARE s3, 04
                 502                      JUMP NZ, FRI
                 503                      LOAD s5, character_T
                 504                      CALL LCD_write_data
                 505                      LOAD s5, character_h
                 506                      CALL LCD_write_data
                 507                      LOAD s5, character_u
                 508                      CALL LCD_write_data
                 509                      JUMP TEST_BIT0
                 510                 FRI: FETCH s3, week
                 511                      COMPARE s3, 05
                 512                      JUMP NZ, SAT
                 513                      LOAD s5, character_F
                 514                      CALL LCD_write_data
                 515                      LOAD s5, character_r
                 516                      CALL LCD_write_data
                 517                      LOAD s5, character_i
                 518                      CALL LCD_write_data
                 519                      JUMP TEST_BIT0
                 520                 SAT: LOAD s5, character_S
                 521                      CALL LCD_write_data
                 522                      LOAD s5, character_a
                 523                      CALL LCD_write_data
                 524                      LOAD s5, character_t
                 525                      CALL LCD_write_data
                 526                      JUMP TEST_BIT0
                 527           TEST_BIT0:
                 528       ROTARY_PRESS1:
                 529       ROTARY_PRESS2:
                 530               SKIP1:
                 531                      ;;;DISP month
                 532                      LOAD s5, 26
                 533                      CALL LCD_cursor
                 534                      FETCH s3, mode
                 535                      COMPARE s3, 04
                 536                      JUMP NZ, DSP_MON
                 537                      FETCH s3, ms500
                 538                      TEST s3, 01
                 539                      JUMP NZ, SPACE4
                 540             DSP_MON: FETCH s5, monH
                 541                      ADD s5, 30
                 542                      CALL LCD_write_data
                 543                      FETCH s5, monL
                 544                      ADD s5, 30
                 545                      CALL LCD_write_data
                 546                      JUMP MODE_5
                 547              SPACE4: CALL disp_space
                 548                      CALL disp_space
                 549              MODE_5:
                 550                      ;;;DISP day
                 551                      LOAD s5, 29
                 552                      CALL LCD_cursor
                 553                      FETCH s3, mode
                 554                      COMPARE s3, 05
                 555                      JUMP NZ, DSP_DD
                 556                      FETCH s3, ms500
                 557                      TEST s3, 01
                 558                      JUMP NZ, SPACE3
                 559              DSP_DD: FETCH s5, dayH
                 560                      ADD s5, 30
                 561                      CALL LCD_write_data
                 562                      FETCH s5, dayL
                 563                      ADD s5, 30
                 564                      CALL LCD_write_data
                 565                      JUMP MODE_6
                 566              SPACE3: CALL disp_space
                 567                      CALL disp_space
                 568              MODE_6:
                 569                      ;;;DISP year
                 570                      LOAD s5, 2C
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 571                      CALL LCD_cursor
                 572                      FETCH s3, mode
                 573                      COMPARE s3, 06
                 574                      JUMP NZ, DSP_YY
                 575                      FETCH s3, ms500
                 576                      TEST s3, 01
                 577                      JUMP NZ, SPACE2
                 578              DSP_YY: FETCH s5, year1
                 579                      ADD s5, 30
                 580                      CALL LCD_write_data
                 581                      FETCH s5, year2
                 582                      ADD s5, 30
                 583                      CALL LCD_write_data
                 584                      FETCH s5, year3
                 585                      ADD s5, 30
                 586                      CALL LCD_write_data
                 587                      FETCH s5, year4
                 588                      ADD s5, 30
                 589                      CALL LCD_write_data
                 590                      JUMP MODE_END
                 591              SPACE2: CALL disp_space
                 592                      CALL disp_space
                 593                      CALL disp_space
                 594                      CALL disp_space
                 595            MODE_END:
                 596                      FETCH s0, monB
                 597                      LOAD s1, DMAX
                 598                      ADD s1, s0
                 599                      FETCH s2, (s1)                      ;;28
                 600                      COMPARE s0, 02                      ;;Y
                 601                      JUMP NZ, NO_FEB
                 602                      FETCH s1, yearB
                 603                      AND s1, 03
                 604                      JUMP NZ, NO_FEB
                 605                      ADD s2, 01
                 606          NO_RUNNIAN:
                 607              NO_FEB: STORE s2, DMAX
                 608                      FETCH s1, dayB
                 609                      COMPARE s2, s1
                 610                      JUMP NC, UNDER
                 611                      STORE s2, dayB
                 612               UNDER:
                 613                      FETCH s1, DAY_UP
                 614                      AND s1, s1
                 615                      JUMP Z, NO_DAY_UP
                 616                      FETCH s1, dayB
                 617                      ADD s1, 01
                 618                      STORE s1, dayB
                 619                      FETCH s2, DMAX
                 620                      ADD s2, 01
                 621                      COMPARE s1, s2
                 622                      JUMP NZ, NO_MON_UP
                 623                      LOAD s1, 01
                 624                      STORE s1, dayB
                 625                      FETCH s1, monB
                 626                      ADD s1, 01
                 627                      STORE s1, monB
                 628                      COMPARE s1, 0D
                 629                      JUMP NZ, NO_YEAR_UP
                 630                      LOAD s1, 01
                 631                      STORE s1, monB
                 632                      FETCH s1, yearB
                 633                      ADD s1, 01
                 634                      STORE s1, yearB
                 635                      COMPARE s1, 64
                 636                      JUMP NZ, NO_YEAR_UP
                 637                      LOAD s1, 00
                 638                      STORE s1, yearB
                 639                      JUMP NO_YEAR_UP
                 640           NO_MON_UP:
                 641           NO_DAY_UP:
                 642          NO_YEAR_UP:
                 643                      LOAD s0, 00
                 644                      STORE s0, DAY_UP
                 645                      LOAD s0, DEC
                 646                      FETCH s2, monB
                 647                      ADD s0, s2
                 648                      FETCH s1, (s0)                      ;;;K
                 649                      FETCH s0, yearB
                 650                      ADD s1, s0                          ;;;;;;;K+Y
                 651                      COMPARE s2, 03
                 652                      JUMP C, RN
                 653                      ADD s0, 01                          ;;;;100+Y  >2(3..12)
                 654                  RN: ADD s0, 63                          ;;;;;99+Y   1,2
                 655                      SR0 s0
                 656                      SR0 s0                              ;;;/4
                 657                      ADD s0, s1
                 658                      ADD s0, 06
                 659                      FETCH s2, dayB
                 660                      ADD s0, s2
                 661                MOD7: ADD s0, F9
                 662                      JUMP NC, M7_END
                 663                      JUMP MOD7
                 664              M7_END: ADD s0, 07
                 665                      STORE s0, week
                 666                      FETCH s0, mode
                 667                      AND s0, FF
                 668                      JUMP NZ, SETUP
                 669                      ;;;RUN
                 670                      LOAD s5, 20
                 671                      CALL LCD_cursor
                 672                      FETCH s5, disp_flag
                 673                      CALL LCD_write_data
                 674                      CALL LCD_write_data
                 675                      CALL LCD_write_data
                 676                      JUMP MODEUPDATE
                 677               SETUP:
                 678                      ;;;SET
                 679                      LOAD s5, 20
                 680                      CALL LCD_cursor
                 681                      LOAD s5, 53                         ;;;;;;;;;;;;;;;;;;;;;;;    S
                 682                      CALL LCD_write_data
                 683                      LOAD s5, 45                         ;;;;;;;;;;;;;;;;;;;;;;;    E
                 684                      CALL LCD_write_data
                 685                      LOAD s5, 54                         ;;;;;;;;;;;;;;;;;;;;;;;    T
                 686                      CALL LCD_write_data
                 687          MODEUPDATE: FETCH s0, mode
                 688                      STORE s0, blink_flag
                 689            NOCHANGE:
                 690                      INPUT s0, 00
                 691                      FETCH s1, disp_flag2
                 692                      XOR s1, s0
                 693                      JUMP NZ, restart
                 694                      STORE s0, disp_flag2
                 695                      FETCH s0, monB
                 696                      COMPARE s0, 05
                 697                      JUMP NZ, chk_sf
                 698                      FETCH s0, dayB
                 699                      COMPARE s0, 11
                 700                      JUMP NZ, chk_sf
                 701                      FETCH s0, minB
                 702                      COMPARE s0, 00
                 703                      JUMP Z, msg7
                 704              chk_sf: COMPARE sF, FF
                 705                      JUMP NZ, NO_BD
                 706                      CALL LCD_reset
                 707                      JUMP NO_BD
                 708                msg7: LOAD s5, 10
                 709                      CALL LCD_cursor
                 710                      CALL disp_msg7                      ;
                 711                      FETCH s0, ms100
                 712                      COMPARE s0, 32
                 713                      JUMP C, WAIT
                 714                      LOAD sF, 00
                 715                      JUMP restart
                 716                WAIT: LOAD sF, FF
                 717                      JUMP loop
                 718               NO_BD: LOAD sF, 00
                 719                      STORE sF, ms100
                 720                      JUMP loop
                 721                      ;;;;;;;;;s0---BINARY, s1---BCD_H, s0---BCD_L
                 722               B2BCD: LOAD s1, 00                         ;
                 723              BCD_LP: ADD s0, F6
                 724                      JUMP NC, H_END
                 725                      ADD s1, 01                          ;
                 726                      JUMP BCD_LP
                 727               H_END: ADD s0, 0A
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
                 728                      RETURN
                 729                      ;
                 730                      ;     normal_mode: INPUT s0, switch_port               ;Read switches and buttons and directly drive LEDs
                 731                      ;                  OUTPUT s0, LED_port
                 732                      ;                  RETURN
                 733                      ;
                 734                      ;
                 735                      ;
                 736                      ;This procedure will poll the status of the rotary encoder.
                 737                      ;If rotation occurs, then the LED pattern will adjust appropriately.
                 738                      ;
                 739                      ;    rotate_mode: FETCH sA, LED_pattern               ;last known position
                 740                      ;                 FETCH s0, rotary_status             ;check status of rotation
                 741                      ;                 TEST s0, 80                         ;test flag
                 742                      ;                 JUMP Z, update_pattern
                 743                      ;                 AND s0, 7F                          ;clear flag
                 744                      ;                 STORE s0, rotary_status
                 745                      ;                 TEST s0, rotary_left                ;event occurred so update pattern
                 746                      ;                 JUMP Z, move_right
                 747                      ;                 RL sA
                 748                      ;                 JUMP update_pattern
                 749                      ;     move_right: RR sA
                 750                      ; update_pattern: STORE sA, LED_pattern
                 751                      ;                 OUTPUT sA, LED_port                 ;drive LEDs with current pattern
                 752                      ;                 RETURN
                 753                      ;                 ;
                 754                      ;
                 755                      ;
                 756                      ;
                 757                      ;**************************************************************************************
                 758                      ;LCD text messages
                 759                      ;**************************************************************************************
                 760                      ;
                 761                      ;
                 762                      ;Display 'SPARTAN-3E STARTER KIT' on LCD at current cursor position
                 763                      ;
                 764                      ;
                 765           disp_msg1:
                 766                      CALL disp_space
                 767                      LOAD s5, character_A
                 768                      CALL LCD_write_data
                 769                      CALL disp_space
                 770                      LOAD s5, character_C
                 771                      CALL LCD_write_data
                 772                      LOAD s5, character_l
                 773                      CALL LCD_write_data
                 774                      LOAD s5, character_o
                 775                      CALL LCD_write_data
                 776                      LOAD s5, character_c
                 777                      CALL LCD_write_data
                 778                      LOAD s5, character_k
                 779                      CALL LCD_write_data
                 780                      CALL disp_space
                 781                      LOAD s5, character_B
                 782                      CALL LCD_write_data
                 783                      LOAD s5, character_a
                 784                      CALL LCD_write_data
                 785                      LOAD s5, character_s
                 786                      CALL LCD_write_data
                 787                      LOAD s5, character_e
                 788                      CALL LCD_write_data
                 789                      LOAD s5, character_d
                 790                      CALL LCD_write_data
                 791                      CALL disp_space
                 792                      RETURN
                 793                      ;
                 794                      ;
                 795                      ;
                 796           disp_msg2: LOAD s5, character_S
                 797                      CALL LCD_write_data
                 798                      LOAD s5, character_3
                 799                      CALL LCD_write_data
                 800                      LOAD s5, character_E
                 801                      CALL LCD_write_data
                 802                      CALL disp_space
                 803                      LOAD s5, character_S
                 804                      CALL LCD_write_data
                 805                      LOAD s5, character_t
                 806                      CALL LCD_write_data
                 807                      LOAD s5, character_a
                 808                      CALL LCD_write_data
                 809                      LOAD s5, character_r
                 810                      CALL LCD_write_data
                 811                      LOAD s5, character_t
                 812                      CALL LCD_write_data
                 813                      LOAD s5, character_e
                 814                      CALL LCD_write_data
                 815                      LOAD s5, character_r
                 816                      CALL LCD_write_data
                 817                      CALL disp_space
                 818                      LOAD s5, character_K
                 819                      CALL LCD_write_data
                 820                      LOAD s5, character_i
                 821                      CALL LCD_write_data
                 822                      LOAD s5, character_t
                 823                      CALL LCD_write_data
                 824                      LOAD s5, character_3
                 825                      CALL LCD_write_data
                 826                      RETURN
                 827           disp_msg3: CALL disp_space
                 828                      CALL disp_space
                 829                      CALL disp_space
                 830                      CALL disp_space
                 831                      CALL disp_space
                 832                      LOAD s5, character_X
                 833                      CALL LCD_write_data
                 834                      LOAD s5, character_i
                 835                      CALL LCD_write_data
                 836                      LOAD s5, character_l
                 837                      CALL LCD_write_data
                 838                      LOAD s5, character_i
                 839                      CALL LCD_write_data
                 840                      LOAD s5, character_n
                 841                      CALL LCD_write_data
                 842                      LOAD s5, character_x
                 843                      CALL LCD_write_data
                 844                      CALL disp_space
                 845                      CALL disp_space
                 846                      CALL disp_space
                 847                      CALL disp_space
                 848                      CALL disp_space
                 849                      RETURN
                 850           disp_msg4: LOAD s5, character_P
                 851                      CALL LCD_write_data
                 852                      LOAD s5, character_i
                 853                      CALL LCD_write_data
                 854                      LOAD s5, character_c
                 855                      CALL LCD_write_data
                 856                      LOAD s5, character_o
                 857                      CALL LCD_write_data
                 858                      LOAD s5, character_B
                 859                      CALL LCD_write_data
                 860                      LOAD s5, character_l
                 861                      CALL LCD_write_data
                 862                      LOAD s5, character_a
                 863                      CALL LCD_write_data
                 864                      LOAD s5, character_z
                 865                      CALL LCD_write_data
                 866                      LOAD s5, character_e
                 867                      CALL LCD_write_data
                 868                      CALL disp_space
                 869                      LOAD s5, character_T
                 870                      CALL LCD_write_data
                 871                      LOAD s5, character_e
                 872                      CALL LCD_write_data
                 873                      LOAD s5, character_s
                 874                      CALL LCD_write_data
                 875                      LOAD s5, character_t
                 876                      CALL LCD_write_data
                 877                      CALL disp_space
                 878                      RETURN
                 879           disp_msg5: LOAD s5, character_P
                 880                      CALL LCD_write_data
                 881                      LOAD s5, character_r
                 882                      CALL LCD_write_data
                 883                      LOAD s5, character_e
                 884                      CALL LCD_write_data
                 885                      LOAD s5, character_s
                 886                      CALL LCD_write_data
                 887                      LOAD s5, character_s
                 888                      CALL LCD_write_data
                 889                      CALL disp_space
                 890                      LOAD s5, 26
                 891                      CALL LCD_write_data
                 892                      CALL disp_space
                 893                      LOAD s5, character_T
                 894                      CALL LCD_write_data
                 895                      LOAD s5, character_u
                 896                      CALL LCD_write_data
                 897                      LOAD s5, character_r
                 898                      CALL LCD_write_data
                 899                      LOAD s5, character_n
                 900                      CALL LCD_write_data
                 901                      CALL disp_space
                 902                      LOAD s5, character_t
                 903                      CALL LCD_write_data
                 904                      LOAD s5, character_h
                 905                      CALL LCD_write_data
                 906                      LOAD s5, character_e
                 907                      CALL LCD_write_data
                 908                      RETURN
                 909           disp_msg6: CALL disp_space
                 910                      LOAD s5, character_E
                 911                      CALL LCD_write_data
                 912                      LOAD s5, character_n
                 913                      CALL LCD_write_data
                 914                      LOAD s5, character_c
                 915                      CALL LCD_write_data
                 916                      LOAD s5, character_o
                 917                      CALL LCD_write_data
                 918                      LOAD s5, character_d
                 919                      CALL LCD_write_data
                 920                      LOAD s5, character_e
                 921                      CALL LCD_write_data
                 922                      LOAD s5, character_r
                 923                      CALL LCD_write_data
                 924                      CALL disp_space
                 925                      LOAD s5, character_t
                 926                      CALL LCD_write_data
                 927                      LOAD s5, character_o
                 928                      CALL LCD_write_data
                 929                      CALL disp_space
                 930                      LOAD s5, character_S
                 931                      CALL LCD_write_data
                 932                      LOAD s5, character_e
                 933                      CALL LCD_write_data
                 934                      LOAD s5, character_t
                 935                      CALL LCD_write_data
                 936                      CALL disp_space
                 937                      RETURN
                 938           disp_msg7: LOAD s5, character_H
                 939                      CALL LCD_write_data
                 940                      LOAD s5, character_a
                 941                      CALL LCD_write_data
                 942                      LOAD s5, character_p
                 943                      CALL LCD_write_data
                 944                      LOAD s5, character_p
                 945                      CALL LCD_write_data
                 946                      LOAD s5, character_y
                 947                      CALL LCD_write_data
                 948                      CALL disp_space
                 949                      LOAD s5, character_B
                 950                      CALL LCD_write_data
                 951                      LOAD s5, character_i
                 952                      CALL LCD_write_data
                 953                      LOAD s5, character_r
                 954                      CALL LCD_write_data
                 955                      LOAD s5, character_t
                 956                      CALL LCD_write_data
                 957                      LOAD s5, character_h
                 958                      CALL LCD_write_data
                 959                      LOAD s5, character_d
                 960                      CALL LCD_write_data
                 961                      LOAD s5, character_a
                 962                      CALL LCD_write_data
                 963                      LOAD s5, character_y
                 964                      CALL LCD_write_data
                 965                      LOAD s5, 21
                 966                      CALL LCD_write_data
                 967                      RETURN
                 968                      ;
                 969                      ;Display a space on LCD at current cursor position
                 970                      ;
                 971                      ;
                 972          disp_space: LOAD s5, character_space
                 973                      CALL LCD_write_data
                 974                      RETURN
                 975                      ;
                 976                      ;
                 977                      ;
                 978                      ;
                 979                      ;**************************************************************************************
                 980                      ;Software delay routines
                 981                      ;**************************************************************************************
                 982                      ;
                 983                      ;
                 984                      ;
                 985                      ;Delay of 1us.
                 986                      ;
                 987                      ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 988                      ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 989                      ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 990                      ;
                 991                      ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 992                      ;
                 993                      ;Registers used s0
                 994                      ;
                 995           delay_1us: LOAD s0, delay_1us_constant
                 996            wait_1us: SUB s0, 01
                 997                      JUMP NZ, wait_1us
                 998                      RETURN
                 999                      ;
                1000                      ;Delay of 40us.
                1001                      ;
                1002                      ;Registers used s0, s1
                1003                      ;
                1004          delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
                1005           wait_40us: CALL delay_1us
                1006                      SUB s1, 01
                1007                      JUMP NZ, wait_40us
                1008                      RETURN
                1009                      ;
                1010                      ;
                1011                      ;Delay of 1ms.
                1012                      ;
                1013                      ;Registers used s0, s1, s2
                1014                      ;
                1015           delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
                1016            wait_1ms: CALL delay_40us
                1017                      SUB s2, 01
                1018                      JUMP NZ, wait_1ms
                1019                      RETURN
                1020                      ;
                1021                      ;Delay of 20ms.
                1022                      ;
                1023                      ;Delay of 20ms used during initialisation.
                1024                      ;
                1025                      ;Registers used s0, s1, s2, s3
                1026                      ;
                1027          delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
                1028           wait_20ms: CALL delay_1ms
                1029                      SUB s3, 01
                1030                      JUMP NZ, wait_20ms
                1031                      RETURN
                1032                      ;
                1033                      ;Delay of approximately 1 second.
                1034                      ;
                1035                      ;Registers used s0, s1, s2, s3, s4
                1036                      ;
                1037            delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
                1038             wait_1s: CALL delay_20ms
                1039                      SUB s4, 01
                1040                      JUMP NZ, wait_1s
                1041                      RETURN
                1042                      ;
                1043                      ;
                1044                      ;
                1045                      ;**************************************************************************************
                1046                      ;LCD Character Module Routines
                1047                      ;**************************************************************************************
                1048                      ;
                1049                      ;LCD module is a 16 character by 2 line display but all displays are very similar
                1050                      ;The 4-wire data interface will be used (DB4 to DB7).
                1051                      ;
                1052                      ;The LCD modules are relatively slow and software delay loops are used to slow down
                1053                      ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                1054                      ;a different section (see above in this case).
                1055                      ;
                1056                      ;
                1057                      ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                1058                      ;
                1059                      ;Register s4 should define the current state of the LCD output port.
                1060                      ;
                1061                      ;Registers used s0, s4
                1062                      ;
                1063         LCD_pulse_E: XOR s4, LCD_E                       ;E=1
                1064                      OUTPUT s4, LCD_output_port
                1065                      CALL delay_1us
                1066                      XOR s4, LCD_E                       ;E=0
                1067                      OUTPUT s4, LCD_output_port
                1068                      RETURN
                1069                      ;
                1070                      ;Write 4-bit instruction to LCD display.
                1071                      ;
                1072                      ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                1073                      ;Note that this routine does not release the master enable but as it is only
                1074                      ;used during initialisation and as part of the 8-bit instruction write it
                1075                      ;should be acceptable.
                1076                      ;
                1077                      ;Registers used s4
                1078                      ;
                1079     LCD_write_inst4: AND s4, F8                          ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
                1080                      OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
                1081                      CALL LCD_pulse_E
                1082                      RETURN
                1083                      ;
                1084                      ;
                1085                      ;Write 8-bit instruction to LCD display.
                1086                      ;
                1087                      ;The 8-bit instruction should be provided in register s5.
                1088                      ;Instructions are written using the following sequence
                1089                      ; Upper nibble
                1090                      ; wait >1us
                1091                      ; Lower nibble
                1092                      ; wait >40us
                1093                      ;
                1094                      ;Registers used s0, s1, s4, s5
                1095                      ;
                1096     LCD_write_inst8: LOAD s4, s5
                1097                      AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
                1098                      OR s4, LCD_drive                    ;Enable=1
                1099                      CALL LCD_write_inst4                ;write upper nibble
                1100                      CALL delay_1us                      ;wait >1us
                1101                      LOAD s4, s5                         ;select lower nibble with
                1102                      SL1 s4                              ;Enable=1
                1103                      SL0 s4                              ;RS=0 Instruction
                1104                      SL0 s4                              ;RW=0 Write
                1105                      SL0 s4                              ;E=0
                1106                      CALL LCD_write_inst4                ;write lower nibble
                1107                      CALL delay_40us                     ;wait >40us
                1108                      LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
                1109                      OUTPUT s4, LCD_output_port          ;Release master enable
                1110                      RETURN
                1111                      ;
                1112                      ;
                1113                      ;
                1114                      ;Write 8-bit data to LCD display.
                1115                      ;
                1116                      ;The 8-bit data should be provided in register s5.
                1117                      ;Data bytes are written using the following sequence
                1118                      ; Upper nibble
                1119                      ; wait >1us
                1120                      ; Lower nibble
                1121                      ; wait >40us
                1122                      ;
                1123                      ;Registers used s0, s1, s4, s5
                1124                      ;
                1125      LCD_write_data: LOAD s4, s5
                1126                      AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
                1127                      OR s4, 0C                           ;Enable=1 RS=1 Data, RW=0 Write, E=0
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
                1128                      OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
                1129                      CALL LCD_pulse_E                    ;write upper nibble
                1130                      CALL delay_1us                      ;wait >1us
                1131                      LOAD s4, s5                         ;select lower nibble with
                1132                      SL1 s4                              ;Enable=1
                1133                      SL1 s4                              ;RS=1 Data
                1134                      SL0 s4                              ;RW=0 Write
                1135                      SL0 s4                              ;E=0
                1136                      OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
                1137                      CALL LCD_pulse_E                    ;write lower nibble
                1138                      CALL delay_40us                     ;wait >40us
                1139                      LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
                1140                      OUTPUT s4, LCD_output_port          ;Release master enable
                1141                      RETURN
                1142                      ;
                1143                      ;
                1144                      ;
                1145                      ;
                1146                      ;Read 8-bit data from LCD display.
                1147                      ;
                1148                      ;The 8-bit data will be read from the current LCD memory address
                1149                      ;and will be returned in register s5.
                1150                      ;It is advisable to set the LCD address (cursor position) before
                1151                      ;using the data read for the first time otherwise the display may
                1152                      ;generate invalid data on the first read.
                1153                      ;
                1154                      ;Data bytes are read using the following sequence
                1155                      ; Upper nibble
                1156                      ; wait >1us
                1157                      ; Lower nibble
                1158                      ; wait >40us
                1159                      ;
                1160                      ;Registers used s0, s1, s4, s5
                1161                      ;
                1162                      ;LCD_read_data8: LOAD s4, 0E                         ;Enable=1 RS=1 Data, RW=1 Read, E=0
                1163                      ;                OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
                1164                      ;                XOR s4, LCD_E                       ;E=1
                1165                      ;                OUTPUT s4, LCD_output_port
                1166                      ;                CALL delay_1us                      ;wait >260ns to access data
                1167                      ;                INPUT s5, LCD_input_port            ;read upper nibble
                1168                      ;                XOR s4, LCD_E                       ;E=0
                1169                      ;                OUTPUT s4, LCD_output_port
                1170                      ;                CALL delay_1us                      ;wait >1us
                1171                      ;                XOR s4, LCD_E                       ;E=1
                1172                      ;                OUTPUT s4, LCD_output_port
                1173                      ;                CALL delay_1us                      ;wait >260ns to access data
                1174                      ;                INPUT s0, LCD_input_port            ;read lower nibble
                1175                      ;                XOR s4, LCD_E                       ;E=0
                1176                      ;                OUTPUT s4, LCD_output_port
                1177                      ;                AND s5, F0                          ;merge upper and lower nibbles
                1178                      ;                SR0 s0
                1179                      ;                SR0 s0
                1180                      ;                SR0 s0
                1181                      ;                SR0 s0
                1182                      ;                OR s5, s0
                1183                      ;                LOAD s4, 04                         ;Enable=0 RS=1 Data, RW=0 Write, E=0
                1184                      ;                OUTPUT s4, LCD_output_port          ;Stop reading 5V device and release master enable
                1185                      ;                CALL delay_40us                     ;wait >40us
                1186                      ;                RETURN
                1187                      ;
                1188                      ;
                1189                      ;Reset and initialise display to communicate using 4-bit data mode
                1190                      ;Includes routine to clear the display.
                1191                      ;
                1192                      ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                1193                      ;following by the 8-bit instructions to set up the display.
                1194                      ;
                1195                      ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                1196                      ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
                1197                      ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                1198                      ;  01 = '00000001' Display clear
                1199                      ;
                1200                      ;Registers used s0, s1, s2, s3, s4
                1201                      ;
                1202           LCD_reset: CALL delay_20ms                     ;wait more that 15ms for display to be ready
                1203                      LOAD s4, 30
                1204                      CALL LCD_write_inst4                ;send '3'
                1205                      CALL delay_20ms                     ;wait >4.1ms
                1206                      CALL LCD_write_inst4                ;send '3'
                1207                      CALL delay_1ms                      ;wait >100us
                1208                      CALL LCD_write_inst4                ;send '3'
                1209                      CALL delay_40us                     ;wait >40us
                1210                      LOAD s4, 20
                1211                      CALL LCD_write_inst4                ;send '2'
                1212                      CALL delay_40us                     ;wait >40us
                1213                      LOAD s5, 28                         ;Function set
                1214                      CALL LCD_write_inst8
                1215                      LOAD s5, 06                         ;Entry mode
                1216                      CALL LCD_write_inst8
                1217                      LOAD s5, 0C                         ;Display control
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
                1218                      CALL LCD_write_inst8
                1219           LCD_clear: LOAD s5, 01                         ;Display clear
                1220                      CALL LCD_write_inst8
                1221                      CALL delay_1ms                      ;wait >1.64ms for display to clear
                1222                      CALL delay_1ms
                1223                      LOAD s5, 13
                1224                      CALL LCD_cursor
                1225                      LOAD s5, 3A                         ;;;;;;;;;;;;;;;;;;;;;;;    :
E: identifier cannot start with a digit: `3A'.
E: unexpected COMMENT.
                1226                      CALL LCD_write_data
                1227                      LOAD s5, 16
                1228                      CALL LCD_cursor
                1229                      LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
                1230                      CALL LCD_write_data
                1231                      LOAD s5, 20
                1232                      CALL LCD_cursor
                1233                      LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
                1234                      CALL LCD_write_data
                1235                      LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
                1236                      CALL LCD_write_data
                1237                      LOAD s5, 2D                         ;;;;;;;;;;;;;;;;;;;;;;     -
                1238                      CALL LCD_write_data
                1239                      LOAD s5, 28
                1240                      CALL LCD_cursor
                1241                      LOAD s5, 2F                         ;;;;;;;;;;;;;;;;;;;;;;     /
E: identifier cannot start with a digit: `2F'.
E: unexpected COMMENT.
                1242                      CALL LCD_write_data
                1243                      LOAD s5, 2B
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                1244                      CALL LCD_cursor
                1245                      LOAD s5, 2F                         ;;;;;;;;;;;;;;;;;;;;;;     -
E: identifier cannot start with a digit: `2F'.
E: unexpected COMMENT.
                1246                      CALL LCD_write_data
                1247                      RETURN
                1248                      ;
                1249                      ;Position the cursor ready for characters to be written.
                1250                      ;The display is formed of 2 lines of 16 characters and each
                1251                      ;position has a corresponding address as indicated below.
                1252                      ;
                1253                      ;                   Character position
                1254                      ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                1255                      ;
                1256                      ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                1257                      ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                1258                      ;
                1259                      ;This routine will set the cursor position using the value provided
                1260                      ;in register s5. The upper nibble will define the line and the lower
                1261                      ;nibble the character position on the line.
                1262                      ; Example s5 = 2B will position the cursor on line 2 position 11
                1263                      ;
                1264                      ;Registers used s0, s1, s2, s3, s4
                1265                      ;
                1266          LCD_cursor: TEST s5, 10                         ;test for line 1
                1267                      JUMP Z, set_line2
                1268                      AND s5, 0F                          ;make address in range 80 to 8F for line 1
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
                1269                      OR s5, 80
                1270                      CALL LCD_write_inst8                ;instruction write to set cursor
                1271                      RETURN
                1272           set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
                1273                      OR s5, C0
                1274                      CALL LCD_write_inst8                ;instruction write to set cursor
                1275                      RETURN
                1276                      ;
                1277                      ;This routine will shift the complete display one position to the left.
                1278                      ;The cursor position and LCD memory contents will not change.
                1279                      ;
                1280                      ;
                1281                      ;Registers used s0, s1, s2, s3, s4, s5
                1282                      ;
                1283                      ;LCD_shift_left: LOAD s5, 18                         ;shift display left
                1284                      ;                CALL LCD_write_inst8
                1285                      ;                RETURN
                1286                      ;
                1287                      ;**************************************************************************************
                1288                      ;Interrupt Service Routine (ISR)
                1289                      ;**************************************************************************************
                1290                 ISR: STORE s0, ISR_s0                    ;preserve s0
                1291                      STORE s1, ISR_s1
                1292                      STORE s2, ISR_s2
                1293                      INPUT s1, rotary_port
                1294                      LOAD s0, 00
                1295                      TEST s1, rotary_press
                1296                      JUMP Z, no_press
                1297                      FETCH s0, pressed
                1298                      COMPARE s0, 00
                1299                      JUMP NZ, no_press
                1300                      FETCH s2, LED_pattern
                1301                      ADD s2, 01
                1302                      STORE s2, LED_pattern
                1303                      FETCH s2, mode
                1304                      ADD s2, 01
                1305                      COMPARE s2, 07
                1306                      JUMP NZ, mode_save
                1307                      AND s2, 00
                1308           mode_save: STORE s2, mode                      ;;;;;0-normal;1-hour;2-min;3-sec;4-day,5-mon,6-year
                1309                      LOAD s0, FF
                1310            no_press: STORE s0, pressed
                1311                      TEST s1, 40                         ;;;rotary INT ?
                1312                      JUMP Z, T2_5m_INT                   ;;NOT rotary INT,JUMP away
                1313            CLR_INT2: LOAD s0, 40                         ;;;;;CLR_INT1
                1314                      OUTPUT s0, 20
                1315                      FETCH s0, LED_pattern
                1316                      TEST s1, rotary_left
                1317                      JUMP Z, ITS_RIGHT
                1318                      ADD s0, FF
                1319                      STORE s0, LED_pattern
                1320                      ;;;turn left,--
                1321                      FETCH s0, mode
                1322                      COMPARE s0, 00
                1323                      JUMP Z, CLR_INT1                    ;
                1324                      COMPARE s0, 01
                1325                      JUMP NZ, MODE2N
                1326                      FETCH s1, hourB
                1327                      ADD s1, FF
                1328                      COMPARE s1, FF                      ;;;24
                1329                      JUMP NZ, SAVE_HHN
                1330                      LOAD s1, 17
                1331            SAVE_HHN: STORE s1, hourB
                1332                      JUMP real_time_end
                1333              MODE2N: COMPARE s0, 02
                1334                      JUMP NZ, MODE3N
                1335                      FETCH s1, minB
                1336                      ADD s1, FF
                1337                      COMPARE s1, FF                      ;;;3C;;60
                1338                      JUMP NZ, SAVE_MMN
                1339                      LOAD s1, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
                1340            SAVE_MMN: STORE s1, minB
                1341                      JUMP real_time_end
                1342              MODE3N: COMPARE s0, 03
                1343                      JUMP NZ, MODE4N
                1344                      FETCH s1, secB
                1345                      ADD s1, FF
                1346                      COMPARE s1, FF                      ;;;60
                1347                      JUMP NZ, SAVE_SSN
                1348                      LOAD s1, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
                1349            SAVE_SSN: STORE s1, secB
                1350                      JUMP real_time_end
                1351              MODE4N: COMPARE s0, 04
                1352                      JUMP NZ, MODE5N
                1353                      FETCH s1, monB
                1354                      ADD s1, FF
                1355                      COMPARE s1, 00                      ;;;12
                1356                      JUMP NZ, SAVE_MONN
                1357                      LOAD s1, 0C
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
                1358           SAVE_MONN: STORE s1, monB
                1359                      JUMP real_time_end
                1360              MODE5N: COMPARE s0, 05
                1361                      JUMP NZ, MODE6N
                1362                      FETCH s1, dayB
                1363                      ADD s1, FF
                1364                      COMPARE s1, 00                      ;;;12
                1365                      JUMP NZ, SAVE_DAYN
                1366                      FETCH s1, DMAX
                1367           SAVE_DAYN: STORE s1, dayB
                1368                      JUMP real_time_end
                1369              MODE6N: COMPARE s0, 06
                1370                      JUMP NZ, MODE7N
                1371                      FETCH s1, yearB
                1372                      ADD s1, FF
                1373                      COMPARE s1, FF                      ;;;12
                1374                      JUMP NZ, SAVE_YEARN
                1375                      LOAD s1, 63
                1376          SAVE_YEARN: STORE s1, yearB
                1377              MODE7N:
                1378                      JUMP real_time_end
                1379           ITS_RIGHT: ADD s0, 01
                1380                      STORE s0, LED_pattern
                1381                      ;;;turn right++
                1382                      FETCH s0, mode
                1383                      COMPARE s0, 00
                1384                      JUMP Z, CLR_INT1                    ;
                1385                      COMPARE s0, 01
                1386                      JUMP NZ, MODE2P
                1387                      FETCH s1, hourB
                1388                      ADD s1, 01
                1389                      COMPARE s1, 18                      ;;;24
                1390                      JUMP NZ, SAVE_HHP
                1391                      LOAD s1, 00
                1392            SAVE_HHP: STORE s1, hourB
                1393                      JUMP real_time_end
                1394              MODE2P: COMPARE s0, 02
                1395                      JUMP NZ, MODE3P
                1396                      FETCH s1, minB
                1397                      ADD s1, 01
                1398                      COMPARE s1, 3C                      ;;;3C;;60
E: identifier cannot start with a digit: `3C'.
E: unexpected COMMENT.
                1399                      JUMP NZ, SAVE_MMP
                1400                      LOAD s1, 00
                1401            SAVE_MMP: STORE s1, minB
                1402                      JUMP real_time_end
                1403              MODE3P: COMPARE s0, 03
                1404                      JUMP NZ, MODE4P
                1405                      FETCH s1, secB
                1406                      ADD s1, 01
                1407                      COMPARE s1, 3C                      ;;;60
E: identifier cannot start with a digit: `3C'.
E: unexpected COMMENT.
                1408                      JUMP NZ, SAVE_SSP
                1409                      LOAD s1, 00
                1410            SAVE_SSP: STORE s1, secB
                1411                      JUMP real_time_end
                1412              MODE4P: COMPARE s0, 04
                1413                      JUMP NZ, MODE5P
                1414                      FETCH s1, monB
                1415                      ADD s1, 01
                1416                      COMPARE s1, 0D                      ;;;12
                1417                      JUMP NZ, SAVE_MONP
                1418                      LOAD s1, 01
                1419           SAVE_MONP: STORE s1, monB
                1420                      JUMP real_time_end
                1421              MODE5P: COMPARE s0, 05
                1422                      JUMP NZ, MODE6P
                1423                      FETCH s1, dayB
                1424                      ADD s1, 01
                1425                      FETCH s2, DMAX
                1426                      ADD s2, 01
                1427                      COMPARE s1, s2
                1428                      JUMP NZ, SAVE_DAYP
                1429                      LOAD s1, 01
                1430           SAVE_DAYP: STORE s1, dayB
                1431                      JUMP real_time_end
                1432              MODE6P: COMPARE s0, 06
                1433                      JUMP NZ, MODE7P
                1434                      FETCH s1, yearB
                1435                      ADD s1, 01
                1436                      COMPARE s1, 64                      ;;;12
                1437                      JUMP NZ, SAVE_YEARP
                1438                      LOAD s1, 00
                1439          SAVE_YEARP: STORE s1, yearB
                1440              MODE7P: JUMP real_time_end
                1441            CLR_INT1: LOAD s0, 40                         ;;;;;CLR_INT1
                1442                      OUTPUT s0, 20
                1443                      ;;;TIMER interrupt process;;;;mode:::0-normal;1-hour;2-min;3-sec;4-day,5-mon,6-year
                1444           T2_5m_INT: TEST s1, 80
                1445                      JUMP Z, end_ISR
                1446                      LOAD s0, 80                         ;;;;;;;;;;clr_int2
                1447                      OUTPUT s0, 20
                1448                      FETCH s0, ms1
                1449                      ADD s0, 01
                1450                      STORE s0, ms1
                1451                      COMPARE s0, 64
                1452                      JUMP NZ, real_time_end
                1453                      AND s0, 00                          ;;;;;;;;;;;;;CLR ms1
                1454                      STORE s0, ms1
                1455                      FETCH s0, LED_pattern               ;
                1456                      ADD s0, 10
                1457                      STORE s0, LED_pattern
                1458                      FETCH s1, ms500
                1459                      ADD s1, 01
                1460                      STORE s1, ms500
                1461                      COMPARE s1, 01                      ;
                1462                      JUMP NZ, CMP_2
                1463                      LOAD s0, 2D                         ;;;------
                1464                      JUMP CMP_4
                1465               CMP_2: COMPARE s1, 02                      ;
                1466                      JUMP NZ, CMP_3
                1467                      LOAD s0, 60                         ;;;\\\\\\
                1468                      JUMP CMP_4
                1469               CMP_3: COMPARE s1, 03                      ;
                1470                      JUMP NZ, CMP_4
                1471                      LOAD s0, 7C                         ;;;||||
E: identifier cannot start with a digit: `7C'.
E: unexpected COMMENT.
                1472               CMP_4: STORE s0, disp_flag
                1473                      COMPARE s1, 04
                1474                      JUMP NZ, real_time_end
                1475                      LOAD s0, 2F                         ;;;////
E: identifier cannot start with a digit: `2F'.
E: unexpected COMMENT.
                1476                      ;;FETCH s0,disp_flag
                1477                      ;;ADD s0,01
                1478                      STORE s0, disp_flag
                1479                      AND s1, 00                          ;;;;;;;;;;;;;CLR ms500
                1480                      STORE s1, ms500
                1481                      FETCH s0, secB                      ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CLOCK PROCESS START
                1482                      ADD s0, 01
                1483                      STORE s0, secB
                1484                      COMPARE s0, 3C                      ;;;60
E: identifier cannot start with a digit: `3C'.
E: unexpected COMMENT.
000 36013       1485                      JUMP NZ, real_time_end
001 02100       1486                      AND s0, 00
E: symbol not defined: `S0'.
002 2F101       1487                      STORE s0, secB
E: symbol not defined: `S0'.
E: symbol not defined: `SECB'.
003 0B101       1488                      FETCH s0, minB
E: symbol not defined: `S0'.
E: symbol not defined: `MINB'.
004 10110       1489                      ADD s0, 01
E: symbol not defined: `S0'.
005 2F101       1490                      STORE s0, minB
E: symbol not defined: `S0'.
E: symbol not defined: `MINB'.
                1491                      COMPARE s0, 3C
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
006 36013       1492                      JUMP NZ, real_time_end
007 02100       1493                      AND s0, 00
E: symbol not defined: `S0'.
008 2F101       1494                      STORE s0, minB
E: symbol not defined: `S0'.
E: symbol not defined: `MINB'.
                1495                      ;;;24 Hours
009 0B101       1496                      FETCH s0, hourB
E: symbol not defined: `S0'.
E: symbol not defined: `HOURB'.
00A 10110       1497                      ADD s0, 01
E: symbol not defined: `S0'.
00B 2F101       1498                      STORE s0, hourB
E: symbol not defined: `S0'.
E: symbol not defined: `HOURB'.
00C 1C120       1499                      COMPARE s0, 18
E: symbol not defined: `S0'.
W: value out of range: 18, allowed range is [0,15] (trimmed to 4 bits) which makes it 2.
00D 36013       1500                      JUMP NZ, real_time_end
00E 02100       1501                      AND s0, 00
E: symbol not defined: `S0'.
00F 2F101       1502                      STORE s0, hourB
E: symbol not defined: `S0'.
E: symbol not defined: `HOURB'.
010 0B101       1503               DAY_P: FETCH s0, DAY_UP
E: symbol not defined: `S0'.
E: symbol not defined: `DAY_UP'.
011 00110       1504                      LOAD s0, 01
E: symbol not defined: `S0'.
012 2F101       1505                      STORE s0, DAY_UP
E: symbol not defined: `S0'.
E: symbol not defined: `DAY_UP'.
013 0B101       1506       real_time_end: FETCH s0, ms2                       ;;;;;;;;2.5ms counter
E: symbol not defined: `S0'.
E: symbol not defined: `MS2'.
014 10110       1507                      ADD s0, 01
E: symbol not defined: `S0'.
015 1C1C0       1508                      COMPARE s0, 28                      ;;;;;;counter to 100ms
E: symbol not defined: `S0'.
W: value out of range: 28, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
016 3601B       1509                      JUMP NZ, store_ms2
017 0B101       1510                      FETCH s1, ms100
E: symbol not defined: `S1'.
E: symbol not defined: `MS100'.
018 10110       1511                      ADD s1, 01
E: symbol not defined: `S1'.
019 2F101       1512           SAV_ms100: STORE s1, ms100
E: symbol not defined: `S1'.
E: symbol not defined: `MS100'.
01A 00100       1513                      LOAD s0, 00
E: symbol not defined: `S0'.
01B 2F101       1514           store_ms2: STORE s0, ms2
E: symbol not defined: `S0'.
E: symbol not defined: `MS2'.
01C 0B101       1515                      FETCH s0, LED_pattern
E: symbol not defined: `S0'.
E: symbol not defined: `LED_PATTERN'.
01D 2D101       1516                      OUTPUT s0, LED_port
E: symbol not defined: `S0'.
E: symbol not defined: `LED_PORT'.
01E 0B101       1517             end_ISR: FETCH s0, ISR_s0                    ;restore s0
E: symbol not defined: `S0'.
E: symbol not defined: `ISR_S0'.
01F 0B101       1518                      FETCH s1, ISR_s1                    ;restore s1
E: symbol not defined: `S1'.
E: symbol not defined: `ISR_S1'.
020 0B101       1519                      FETCH s2, ISR_s2                    ;restore s2
E: symbol not defined: `S2'.
E: symbol not defined: `ISR_S2'.
021 29001       1520                      RETURNI ENABLE
                1521                      ;**************************************************************************************
                1522                      ;Interrupt Vector
                1523                      ;**************************************************************************************
                1524                      ;
                1525                      ADDRESS 3FF
E: identifier cannot start with a digit: `3FF'.
E: directive ADDRESS requires a single argument.
022 22001       1526                      JUMP ISR
E: symbol not defined: `ISR'.
                1527                      ;First Screen:
                1528                      ;1234567890123456
                1529                      ; Clock Based
                1530                      ;S3E Starter kit
                1531                      ;Second Screen:
                1532                      ;1234567890123456
                1533                      ;   X Xilinx
                1534                      ;PicoBlaze Test
                1535                      ;Third Screen:
                1536                      ;1234567890123456
                1537                      ; Press & Turn
                1538                      ;Encoder to Adjust
                1539                      ;1234567890123456
                1540                      ;09:00:00    Mon
                1541                      ;<->   05/01/2006
                1542                      ;Based on Ken C's
                1543                      ;S3ESK_STARTUP
                1544                      ;Modified By
                1545                      ; George W.
                1546                      ;Dear Mr. Chapman,
                1547                      ;I have just finished a design with PicoBlaze Based the hardware of S3E Starter kit platform.
                1548                      ;It's amazing that the BicoBlaze works perfect,not bad than any other professional MCU I have ever used.I like it very much.
                1549                      ;I have used up all the programme space that MicroBlaze supports and I had to remove some functions from the designs for the programme space reason
                1550                      ;My question is ,wether can I make the programme counter wider in PicoBlaze to support more programme space.
                1551                      ;Another problem,I cannot update the PROM on the starter kit PCB,I'm not sure whether it is caused by the MCS file I generated or other problem.The screen shot and bitstream are attached.Please help me to have a check. Thank you.
