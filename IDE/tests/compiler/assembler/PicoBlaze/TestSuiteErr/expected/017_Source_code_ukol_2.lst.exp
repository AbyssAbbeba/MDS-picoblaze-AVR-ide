                   1     ;##############################################################################;
                   2     ; Description of code
                   3     ;##############################################################################;
                   4     ;
                   5     ; Tutorial code for MPLD 2010/11
                   6     ; Michal Kubicek 17.4.2011
                   7     ;
                   8     ;
                   9     ;##############################################################################;
                  10     ; Start of code
                  11     ;##############################################################################;
                  12     ; Register name assignment
                  13     temp1               EQU       s0                  ; temporary data register
                  14     temp2               EQU       s1                  ; temporary data register
                  15     temp3               EQU       s2                  ; temporary data register
                  16     chreg               EQU       s3                  ; character register
                  17     RxDat               EQU       s4                  ; received character register
                  18     addr                EQU       s5                  ; address register
                  19
                  20     ; Peripherals
                  21     UART_data           DS        $01                 ; UART data register port ID
E: invalid token: `$01'.
                  22     UART_stat           DS        $02                 ; UART control register port ID
E: invalid token: `$02'.
                  23     ; UART Status register:
                  24     ;  [2] Tx ready
                  25     ;  [3] new Rx data
                  26     ;  [4] Rx buffer overflow
                  27
                  28     BCD_01              DS        $04                 ; 7 segment, upper two segments
E: invalid token: `$04'.
                  29     BCD_23              DS        $08                 ; 7 segment, lower two segments
E: invalid token: `$08'.
                  30     LED                 DS        $10                 ; LEDs
E: invalid token: `$10'.
                  31     Switch              DS        $20                 ; Switches
E: invalid token: `$20'.
                  32     Button              DS        $40                 ; Buttons (3:0)
E: invalid token: `$40'.
                  33
                  34     ;##############################################################################;
                  35     ; VHDL file declaration
                  36                         VHDL      "ROM_blank.vhd", "ROM_code.vhd", "ROM_CODE"
E: unexpected STRING.
                  37
                  38
                  39     ;##############################################################################;
                  40     ; Initialization
                  41     ;##############################################################################;
                  42
                  43     ; initial wait
000 20022         44     Start:              CALL      wait_1s             ; wait for peripheral startup
                  45     	                LOAD      Temp1,$00           ; LEDs OFF at startup
E: invalid token: `$00'.
E: unexpected end of line.
001 2D101         46     	                OUT       Temp1,LED           ; write valu to LED register
E: symbol not defined: `TEMP1'.
E: symbol not defined: `LED'.
                  47
                  48     ; end of initialization
                  49
                  50     ;##############################################################################;
                  51     ;  Main loop
                  52     ;##############################################################################;
002 2000D         53     main_loop:          CALL      GetChar             ; get (wait for) new character
003 2D101         54                         OUT       chreg,BCD_01        ; Store value on 7-segment
E: symbol not defined: `CHREG'.
E: symbol not defined: `BCD_01'.
004 10110         55                         ADD       chreg,1             ; Increment chreg
E: symbol not defined: `CHREG'.
005 2D101         56                         OUT       chreg,BCD_23        ; Store new value on 7-segment
E: symbol not defined: `CHREG'.
E: symbol not defined: `BCD_23'.
006 20008         57                         CALL      SendChar            ; And send it via UART
007 22002         58                         JUMP      main_loop
                  59
                  60     ;##############################################################################;
                  61     ;  General purpose procedures
                  62     ;##############################################################################;
                  63
                  64     ; Basic UART text output procedures (CALLs)
                  65
                  66     ;==============================================================================;
                  67     ; Send character stored in chreg via UART
                  68     ; Registers used: Temp1, chreg
                  69     ;==============================================================================;
008 09101         70     SendChar:           IN        Temp1, UART_stat    ; checking UART status
E: symbol not defined: `TEMP1'.
E: symbol not defined: `UART_STAT'.
009 0C140         71                         TEST      Temp1, 4            ; test bit 2 (is Tx ready?)
E: symbol not defined: `TEMP1'.
00A 32008         72                         JUMP      Z, SendChar         ; wait until Tx is ready
00B 2D101         73                         OUT       chreg, UART_data    ; Send the character
E: symbol not defined: `CHREG'.
E: symbol not defined: `UART_DATA'.
00C 25000         74                         RET                           ; Return from procedure
                  75
                  76     ;==============================================================================;
                  77     ; Reads a single character from UART (waits on receive when none is prepared)
                  78     ; Registers used: Temp1, chreg
                  79     ;==============================================================================;
00D 09101         80     GetChar:            IN        Temp1, UART_stat    ; checking UART status
E: symbol not defined: `TEMP1'.
E: symbol not defined: `UART_STAT'.
00E 0C180         81                         TEST      Temp1, 8            ; test bit 3 (new Rx data?)
E: symbol not defined: `TEMP1'.
00F 3200D         82                         JUMP      Z, GetChar          ; wait for new Rx data
010 09101         83                         IN        chreg, UART_data    ; Read the character
E: symbol not defined: `CHREG'.
E: symbol not defined: `UART_DATA'.
011 25000         84                         RET                           ; Return from procedure
                  85
                  86     ;==============================================================================;
                  87     ; Procedure for sending content of "chreg" register in hexadecimal ASCII format
                  88     ;   (two characters, one for each nibble)
                  89     ; Reister used: Temp1, Temp2, chreg
                  90     ; Procedures used: SendChar
                  91     ;==============================================================================;
012 00110         92     SendByte:           LOAD      Temp2, chreg        ; make a backup of chreg
E: symbol not defined: `TEMP2'.
E: symbol not defined: `CHREG'.
013 1410E         93                         SR0       chreg               ; move upper nibble to lower nibble
E: symbol not defined: `CHREG'.
014 1410E         94                         SR0       chreg
E: symbol not defined: `CHREG'.
015 1410E         95                         SR0       chreg
E: symbol not defined: `CHREG'.
016 1410E         96                         SR0       chreg
E: symbol not defined: `CHREG'.
                  97                         COMP      chreg, 10           ; if not greater than 9, than it is a number
E: macro not defined: "COMP".
017 3A001         98                         JUMP      C, SendBNum1        ; C is set when Temp < 10 (Temp-10)
E: symbol not defined: `SENDBNUM1'.
                  99                         ADD       chreg, $37          ; when letter, add $37; letter conversion
E: invalid token: `$37'.
E: unexpected end of line.
018 22019        100                         JUMP      SendB1
                 101     SendBNum1:          ADD       chreg, $30          ; when number, add $30; number conversion
E: invalid token: `$30'.
E: unexpected end of line.
019 20008        102     SendB1:             CALL      SendChar            ; Send Character
                 103
01A 00110        104                         LOAD      chreg, Temp2        ; load the whole byte again
E: symbol not defined: `CHREG'.
E: symbol not defined: `TEMP2'.
                 105                         AND       chreg, $0F          ; select second character
E: invalid token: `$0F'.
E: unexpected end of line.
                 106                         COMP      chreg, 10           ; if not greater than 9, than number
E: macro not defined: "COMP".
01B 3A001        107                         JUMP      C, SendBNum2        ; C is set when Temp < 10 (Temp-10 under 0)
E: symbol not defined: `SENDBNUM2'.
                 108                         ADD       chreg, $37          ; when letter, add $37; letter conversion
E: invalid token: `$37'.
E: unexpected end of line.
01C 2201D        109                         JUMP      SendB2
                 110     SendBNum2:          ADD       chreg, $30          ; when number, add $30; number conversion
E: invalid token: `$30'.
E: unexpected end of line.
01D 20008        111     SendB2:             CALL      SendChar            ; Send character
01E 25000        112                         RET
                 113
                 114     ;==============================================================================;
                 115     ; Send 0D and 0A character pair via UART
                 116     ; Registers used: Temp1, chreg
                 117     ; Procedures used: SendChar
                 118     ;==============================================================================;
                 119     SendCRLF:           LOAD      chreg, $0D          ; CR character
E: invalid token: `$0D'.
E: unexpected end of line.
01F 20008        120                         CALL      SendChar            ; Send character
                 121                         LOAD      chreg, $0A          ; Load LF character
E: invalid token: `$0A'.
E: unexpected end of line.
020 20008        122                         CALL      SendChar            ; Send character
021 25000        123                         RET                           ; Return from procedure
                 124
                 125     ;==============================================================================;
                 126     ; Procedures for waiting for specified time
                 127     ; Duration is set in registers Temp1, Temp2 and Temp3
                 128     ;
                 129     ;   clock           instruction execution time
                 130     ;   10.00 MHz              200.00 ns
                 131     ;   19.44 MHz              102.88 ns
                 132     ;   38.88 MHz               51.44 ns
                 133     ;   50.00 MHz               40.00 ns
                 134     ;  100.00 MHz               20.00 ns
                 135     ;
                 136     ; wait_time = (4 + (((2 * Temp1) + 2) * Temp2 + 2) * Temp3) * 2 * clk_period
                 137     ;   1s @ (10 MHz, Temp1 = 250, Temp2 = 249, Temp3 = 40)
                 138     ;==============================================================================;
022 001A0        139     wait_1s:            LOAD      Temp1, 250          ; Load Temp1 register
E: symbol not defined: `TEMP1'.
W: value out of range: 0xfa, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
023 00190        140                         LOAD      Temp2, 249          ; Load Temp2 register
E: symbol not defined: `TEMP2'.
W: value out of range: 0xf9, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
024 00180        141                         LOAD      Temp3, 200          ; Load Temp3 register
E: symbol not defined: `TEMP3'.
W: value out of range: 0xc8, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x8.
025 18110        142     wait_1s_i:          SUB       Temp1, 1
E: symbol not defined: `TEMP1'.
026 36025        143                         JUMP      NZ, wait_1s_i
027 18110        144                         SUB       Temp2, 1
E: symbol not defined: `TEMP2'.
028 36025        145                         JUMP      NZ, wait_1s_i
029 18110        146                         SUB       Temp3, 1
E: symbol not defined: `TEMP3'.
02A 36025        147                         JUMP      NZ, wait_1s_i
02B 25000        148                         RET
                 149
02C 001A0        150     wait_100ms:         LOAD      Temp1, 250          ; Load Temp1 register
E: symbol not defined: `TEMP1'.
W: value out of range: 0xfa, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0xa.
02D 00190        151                         LOAD      Temp2, 249          ; Load Temp2 register
E: symbol not defined: `TEMP2'.
W: value out of range: 0xf9, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x9.
02E 00140        152                         LOAD      Temp3, 20           ; Load Temp3 register
E: symbol not defined: `TEMP3'.
W: value out of range: 0x14, allowed range is [0x0,0xf] (trimmed to 4 bits) which makes it 0x4.
02F 18110        153     wait_100ms_i:       SUB       Temp1, 1
E: symbol not defined: `TEMP1'.
030 3602F        154                         JUMP      NZ, wait_100ms_i
031 18110        155                         SUB       Temp2, 1
E: symbol not defined: `TEMP2'.
032 3602F        156                         JUMP      NZ, wait_100ms_i
033 18110        157                         SUB       Temp3, 1
E: symbol not defined: `TEMP3'.
034 3602F        158                         JUMP      NZ, wait_100ms_i
035 25000        159                         RET
                 160
                 161     ;##############################################################################;
                 162
