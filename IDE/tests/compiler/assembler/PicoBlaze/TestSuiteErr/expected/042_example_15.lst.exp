                   1                       ;KCPSM3 Program - Control of LEDs and LCD display using switches, buttons and rotary
                   2                       ;controls on the Spartan-3E Starter Kit.
                   3                       ;
                   4                       ;
                   5                       ;Ken Chapman - Xilinx Ltd
                   6                       ;
                   7                       ;Version v1.00 - 4th January 2006
                   8                       ;
                   9                       ;**************************************************************************************
                  10                       ;Port definitions
                  11                       ;**************************************************************************************
                  12                       ;
                  13                       ;
                  14                       ;
  00050           15                       CONSTANT LED_port, 80               ;8 simple LEDs
  00001           16                       CONSTANT LED0, 01                   ;     LED 0 - bit0
  00002           17                       CONSTANT LED1, 02                   ;         1 - bit1
  00004           18                       CONSTANT LED2, 04                   ;         2 - bit2
  00008           19                       CONSTANT LED3, 08                   ;         3 - bit3
  0000A           20                       CONSTANT LED4, 10                   ;         4 - bit4
  00014           21                       CONSTANT LED5, 20                   ;         5 - bit5
  00028           22                       CONSTANT LED6, 40                   ;         6 - bit6
  00050           23                       CONSTANT LED7, 80                   ;         7 - bit7
                  24                       ;
                  25                       ;
  00000           26                       CONSTANT switch_port, 00            ;Read switches and press buttons
  00001           27                       CONSTANT switch0, 01                ;  Switches      SW0 - bit0
  00002           28                       CONSTANT switch1, 02                ;                SW1 - bit1
  00004           29                       CONSTANT switch2, 04                ;                SW2 - bit2
  00008           30                       CONSTANT switch3, 08                ;                SW3 - bit3
  0000A           31                       CONSTANT BTN_east, 10               ;  Buttons      East - bit4
  00014           32                       CONSTANT BTN_south, 20              ;              South - bit5
  00028           33                       CONSTANT BTN_north, 40              ;              North - bit6
  00050           34                       CONSTANT BTN_west, 80               ;               West - bit7
                  35                       ;
                  36                       ;
  00001           37                       CONSTANT rotary_port, 01            ;Read status of rotary encoder
  00001           38                       CONSTANT rotary_left, 01            ; Direction of last move Left=1 Right=0  - bit0
  00002           39                       CONSTANT rotary_press, 02           ;     Centre press contact (active High) - bit1
                  40                       ;
                  41                       ;
                  42                       ;LCD interface ports
                  43                       ;
                  44                       ;The master enable signal is not used by the LCD display itself
                  45                       ;but may be required to confirm that LCD communication is active.
                  46                       ;This is required on the Spartan-3E Starter Kit if the StrataFLASH
                  47                       ;is used because it shares the same data pins and conflicts must be avoided.
                  48                       ;
  00028           49                       CONSTANT LCD_output_port, 40        ;LCD character module output data and control
  00001           50                       CONSTANT LCD_E, 01                  ;   active High Enable        E - bit0
  00002           51                       CONSTANT LCD_RW, 02                 ;   Read=1 Write=0           RW - bit1
  00004           52                       CONSTANT LCD_RS, 04                 ;   Instruction=0 Data=1     RS - bit2
  00008           53                       CONSTANT LCD_drive, 08              ;   Master enable (active High) - bit3
  0000A           54                       CONSTANT LCD_DB4, 10                ;   4-bit              Data DB4 - bit4
  00014           55                       CONSTANT LCD_DB5, 20                ;   interface          Data DB5 - bit5
  00028           56                       CONSTANT LCD_DB6, 40                ;                      Data DB6 - bit6
  00050           57                       CONSTANT LCD_DB7, 80                ;                      Data DB7 - bit7
                  58                       ;
                  59                       ;
  00002           60                       CONSTANT LCD_input_port, 02         ;LCD character module input data
  00001           61                       CONSTANT LCD_read_spare0, 01        ;    Spare bits               - bit0
  00002           62                       CONSTANT LCD_read_spare1, 02        ;    are zero                 - bit1
  00004           63                       CONSTANT LCD_read_spare2, 04        ;                             - bit2
  00008           64                       CONSTANT LCD_read_spare3, 08        ;                             - bit3
  0000A           65                       CONSTANT LCD_read_DB4, 10           ;    4-bit           Data DB4 - bit4
  00014           66                       CONSTANT LCD_read_DB5, 20           ;    interface       Data DB5 - bit5
  00028           67                       CONSTANT LCD_read_DB6, 40           ;                    Data DB6 - bit6
  00050           68                       CONSTANT LCD_read_DB7, 80           ;                    Data DB7 - bit7
                  69                       ;
                  70                       ;
                  71                       ;
                  72                       ;**************************************************************************************
                  73                       ;Special Register usage
                  74                       ;**************************************************************************************
                  75                       ;
                  76                       ;**************************************************************************************
                  77                       ;Scratch Pad Memory Locations
                  78                       ;**************************************************************************************
                  79                       ;
  00000           80                       CONSTANT rotary_status, 00          ;Status of rotary encoder
  00001           81                       CONSTANT ISR_preserve_s0, 01        ;Preserve s0 contents during ISR
                  82                       ;
  00002           83                       CONSTANT LED_pattern, 02            ;LED pattern used in rotation mode
                  84                       ;
  00003           85                       CONSTANT mode, 03                   ;control mode 00=switch and button FF=rotary
                  86                       ;
                  87                       ;
                  88                       ;
                  89                       ;**************************************************************************************
                  90                       ;Useful data constants
                  91                       ;**************************************************************************************
                  92                       ;
                  93                       ;
                  94                       ;The main operation of the program uses 1ms delays to set the shift rate
                  95                       ;of the LCD display. A 16-bit value determines how many milliseconds
                  96                       ;there are between shifts
                  97                       ;
                  98                       ;Tests indicate that the fastest shift rate that the LCD display supports is
                  99                       ;500ms. Faster than this and the display becomes less clear to read.
                 100                       ;
  00001          101                       CONSTANT shift_delay_msb, 01        ;delay is 500ms (01F4 hex)
  00001          102                       CONSTANT shift_delay_lsb, F4
E: symbol not defined: `F4'.
                 103                       ;
                 104                       ;
                 105                       ;
                 106                       ;
                 107                       ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                 108                       ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                 109                       ;calculation highly predictable. The '6' in the following equation even allows for
                 110                       ;'CALL delay_1us' instruction in the initiating code.
                 111                       ;
                 112                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 113                       ;
                 114                       ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                 115                       ;For clock rates below 10MHz the value of 1 must be used and the operation will
                 116                       ;become lower than intended.
                 117                       ;
  00000          118                       CONSTANT delay_1us_constant, 0B
                 119                       ;
                 120                       ;
                 121                       ;
                 122                       ;ASCII table
                 123                       ;
  0003D          124                       CONSTANT character_a, 61
  0003E          125                       CONSTANT character_b, 62
  0003F          126                       CONSTANT character_c, 63
  00040          127                       CONSTANT character_d, 64
  00041          128                       CONSTANT character_e, 65
  00042          129                       CONSTANT character_f, 66
  00043          130                       CONSTANT character_g, 67
  00044          131                       CONSTANT character_h, 68
  00045          132                       CONSTANT character_i, 69
                 133                       CONSTANT character_j, 6A
E: identifier cannot start with a digit: `6A'.
E: unexpected end of line.
                 134                       CONSTANT character_k, 6B
E: identifier cannot start with a digit: `6B'.
E: unexpected end of line.
                 135                       CONSTANT character_l, 6C
E: identifier cannot start with a digit: `6C'.
E: unexpected end of line.
  00006          136                       CONSTANT character_m, 6D
                 137                       CONSTANT character_n, 6E
E: identifier cannot start with a digit: `6E'.
E: unexpected end of line.
                 138                       CONSTANT character_o, 6F
E: identifier cannot start with a digit: `6F'.
E: unexpected end of line.
  00046          139                       CONSTANT character_p, 70
  00047          140                       CONSTANT character_q, 71
  00048          141                       CONSTANT character_r, 72
  00049          142                       CONSTANT character_s, 73
  0004A          143                       CONSTANT character_t, 74
  0004B          144                       CONSTANT character_u, 75
  0004C          145                       CONSTANT character_v, 76
  0004D          146                       CONSTANT character_w, 77
  0004E          147                       CONSTANT character_x, 78
  0004F          148                       CONSTANT character_y, 79
                 149                       CONSTANT character_z, 7A
E: identifier cannot start with a digit: `7A'.
E: unexpected end of line.
                 150                       CONSTANT character_A, 41
E: symbol already defined: "CHARACTER_A".
                 151                       CONSTANT character_B, 42
E: symbol already defined: "CHARACTER_B".
                 152                       CONSTANT character_C, 43
E: symbol already defined: "CHARACTER_C".
                 153                       CONSTANT character_D, 44
E: symbol already defined: "CHARACTER_D".
                 154                       CONSTANT character_E, 45
E: symbol already defined: "CHARACTER_E".
                 155                       CONSTANT character_F, 46
E: symbol already defined: "CHARACTER_F".
                 156                       CONSTANT character_G, 47
E: symbol already defined: "CHARACTER_G".
                 157                       CONSTANT character_H, 48
E: symbol already defined: "CHARACTER_H".
                 158                       CONSTANT character_I, 49
E: symbol already defined: "CHARACTER_I".
                 159                       CONSTANT character_J, 4A
E: identifier cannot start with a digit: `4A'.
E: unexpected end of line.
                 160                       CONSTANT character_K, 4B
E: identifier cannot start with a digit: `4B'.
E: unexpected end of line.
                 161                       CONSTANT character_L, 4C
E: identifier cannot start with a digit: `4C'.
E: unexpected end of line.
                 162                       CONSTANT character_M, 4D
E: symbol already defined: "CHARACTER_M".
                 163                       CONSTANT character_N, 4E
E: identifier cannot start with a digit: `4E'.
E: unexpected end of line.
                 164                       CONSTANT character_O, 4F
E: identifier cannot start with a digit: `4F'.
E: unexpected end of line.
                 165                       CONSTANT character_P, 50
E: symbol already defined: "CHARACTER_P".
                 166                       CONSTANT character_Q, 51
E: symbol already defined: "CHARACTER_Q".
                 167                       CONSTANT character_R, 52
E: symbol already defined: "CHARACTER_R".
                 168                       CONSTANT character_S, 53
E: symbol already defined: "CHARACTER_S".
                 169                       CONSTANT character_T, 54
E: symbol already defined: "CHARACTER_T".
                 170                       CONSTANT character_U, 55
E: symbol already defined: "CHARACTER_U".
                 171                       CONSTANT character_V, 56
E: symbol already defined: "CHARACTER_V".
                 172                       CONSTANT character_W, 57
E: symbol already defined: "CHARACTER_W".
                 173                       CONSTANT character_X, 58
E: symbol already defined: "CHARACTER_X".
                 174                       CONSTANT character_Y, 59
E: symbol already defined: "CHARACTER_Y".
                 175                       CONSTANT character_Z, 5A
E: identifier cannot start with a digit: `5A'.
E: unexpected end of line.
  0001E          176                       CONSTANT character_0, 30
  0001F          177                       CONSTANT character_1, 31
  00020          178                       CONSTANT character_2, 32
  00021          179                       CONSTANT character_3, 33
  00022          180                       CONSTANT character_4, 34
  00023          181                       CONSTANT character_5, 35
  00024          182                       CONSTANT character_6, 36
  00025          183                       CONSTANT character_7, 37
  00026          184                       CONSTANT character_8, 38
  00027          185                       CONSTANT character_9, 39
                 186                       CONSTANT character_colon, 3A
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 187                       CONSTANT character_stop, 2E
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
                 188                       CONSTANT character_semi_colon, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
  00002          189                       CONSTANT character_minus, 2D
                 190                       CONSTANT character_divide, 2F       ;'/'
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 191                       CONSTANT character_plus, 2B
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 192                       CONSTANT character_comma, 2C
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 193                       CONSTANT character_less_than, 3C
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
                 194                       CONSTANT character_greater_than, 3E
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
  00003          195                       CONSTANT character_equals, 3D
  00014          196                       CONSTANT character_space, 20
  00000          197                       CONSTANT character_CR, 0D           ;carriage return
                 198                       CONSTANT character_question, 3F     ;'?'
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
  00018          199                       CONSTANT character_dollar, 24
  00015          200                       CONSTANT character_exclaim, 21      ;'!'
  00008          201                       CONSTANT character_BS, 08           ;Back Space command character
                 202                       ;
                 203                       ;
                 204                       ;
                 205                       ;
                 206                       ;
                 207                       ;**************************************************************************************
                 208                       ;Initialise the system
                 209                       ;**************************************************************************************
                 210                       ;
000 200F2        211           cold_start: CALL LCD_reset                      ;initialise LCD display
001 28001        212                       ENABLE INTERRUPT
                 213                       ;
                 214                       ;Write welcome message to LCD display
                 215                       ;
002 001A0        216                       LOAD s5, 10                         ;Line 1 position 0
E: symbol not defined: `S5'.
003 20107        217                       CALL LCD_cursor
004 20038        218                       CALL disp_SPARTAN                   ;Display 'SPARTAN-3E STARTER KIT'
                 219                       LOAD s5, 2E                         ;Line 2 position 14
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
005 20107        220                       CALL LCD_cursor
006 20063        221                       CALL disp_www                       ;Display 'www.xilinx.com/s3estarter'
                 222                       ;
007 00180        223                       LOAD s0, 08                         ;initialise walking '1' pattern
E: symbol not defined: `S0'.
008 2F102        224                       STORE s0, LED_pattern
E: symbol not defined: `S0'.
                 225                       ;
009 00110        226                       LOAD sD, FF                         ;initial mode is rotary control
E: symbol not defined: `SD'.
E: symbol not defined: `FF'.
00A 2F103        227                       STORE sD, mode
E: symbol not defined: `SD'.
                 228                       ;
                 229                       ;**************************************************************************************
                 230                       ;Main program
                 231                       ;**************************************************************************************
                 232                       ;
                 233                       ;The main program is responsible for continuously shifting the LCD display
                 234                       ;at 0.5 second intervals. It also polls the centre press button of the rotary
                 235                       ;encoder to determine which mode of LED control should be active.
                 236                       ;
                 237                       ;
00B 00110        238      LCD_shift_delay: LOAD sF, shift_delay_msb            ; [sF,sE]=loop delay in ms
E: symbol not defined: `SF'.
00C 00110        239                       LOAD sE, shift_delay_lsb
E: symbol not defined: `SE'.
00D 09101        240       LCD_delay_loop: INPUT s0, rotary_port               ;test for press of rotary
E: symbol not defined: `S0'.
00E 0C120        241                       TEST s0, rotary_press
E: symbol not defined: `S0'.
00F 3601B        242                       JUMP NZ, mode_switch
010 0B103        243                       FETCH sD, mode                      ;perform control task required
E: symbol not defined: `SD'.
011 1C100        244                       COMPARE sD, 00
E: symbol not defined: `SD'.
012 30028        245                       CALL Z, normal_mode
013 1C110        246                       COMPARE sD, FF
E: symbol not defined: `SD'.
E: symbol not defined: `FF'.
014 3002B        247                       CALL Z, rotate_mode
015 200A2        248                       CALL delay_1ms                      ;1ms delay
016 18110        249                       SUB sE, 01                          ;decrement delay counter
E: symbol not defined: `SE'.
017 1A100        250                       SUBCY sF, 00
E: symbol not defined: `SF'.
018 3E00D        251                       JUMP NC, LCD_delay_loop
019 2010F        252                       CALL LCD_shift_left                 ;shift LCD display
01A 2200B        253                       JUMP LCD_shift_delay
                 254                       ;
01B 06110        255          mode_switch: XOR sD, FF                          ;toggle mode
E: symbol not defined: `SD'.
E: symbol not defined: `FF'.
01C 2F103        256                       STORE sD, mode
E: symbol not defined: `SD'.
01D 200A2        257     wait_mode_switch: CALL delay_1ms                      ;keep shifting LCD display #WHILE waiting
01E 18110        258                       SUB sE, 01
E: symbol not defined: `SE'.
01F 1A100        259                       SUBCY sF, 00
E: symbol not defined: `SF'.
020 3E024        260                       JUMP NC, wait_no_shift
021 2010F        261                       CALL LCD_shift_left                 ;shift LCD display
022 00110        262                       LOAD sF, shift_delay_msb            ; [sF,sE]=loop delay in ms
E: symbol not defined: `SF'.
023 00110        263                       LOAD sE, shift_delay_lsb
E: symbol not defined: `SE'.
024 09101        264        wait_no_shift: INPUT s0, rotary_port               ;wait for release of press button
E: symbol not defined: `S0'.
025 0C120        265                       TEST s0, rotary_press
E: symbol not defined: `S0'.
026 3601D        266                       JUMP NZ, wait_mode_switch
027 2200D        267                       JUMP LCD_delay_loop
                 268                       ;
                 269                       ;This procedure will copy the condition of the slide switches and press
                 270                       ;buttons to the LEDs.
                 271                       ;
                 272                       ;
028 09100        273          normal_mode: INPUT s0, switch_port               ;Read switches and buttons and directly drive LEDs
E: symbol not defined: `S0'.
029 2D150        274                       OUTPUT s0, LED_port
E: symbol not defined: `S0'.
02A 25000        275                       RETURN
                 276                       ;
                 277                       ;
                 278                       ;
                 279                       ;This procedure will poll the status of the rotary encoder.
                 280                       ;If rotation occurs, then the LED pattern will adjust appropriately.
                 281                       ;
02B 0B102        282          rotate_mode: FETCH sA, LED_pattern               ;last known position
E: symbol not defined: `SA'.
02C 0B100        283                       FETCH s0, rotary_status             ;check status of rotation
E: symbol not defined: `S0'.
02D 0C100        284                       TEST s0, 80                         ;test flag
E: symbol not defined: `S0'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
02E 32035        285                       JUMP Z, update_pattern
                 286                       AND s0, 7F                          ;clear flag
E: identifier cannot start with a digit: `7F'.
E: unexpected end of line.
02F 2F100        287                       STORE s0, rotary_status
E: symbol not defined: `S0'.
030 0C110        288                       TEST s0, rotary_left                ;event occurred so update pattern
E: symbol not defined: `S0'.
031 32034        289                       JUMP Z, move_right
032 14102        290                       RL sA
E: symbol not defined: `SA'.
033 22035        291                       JUMP update_pattern
034 1410C        292           move_right: RR sA
E: symbol not defined: `SA'.
035 2F102        293       update_pattern: STORE sA, LED_pattern
E: symbol not defined: `SA'.
036 2D150        294                       OUTPUT sA, LED_port                 ;drive LEDs with current pattern
E: symbol not defined: `SA'.
037 25000        295                       RETURN
                 296                       ;
                 297                       ;
                 298                       ;
                 299                       ;
                 300                       ;**************************************************************************************
                 301                       ;LCD text messages
                 302                       ;**************************************************************************************
                 303                       ;
                 304                       ;
                 305                       ;Display 'SPARTAN-3E STARTER KIT' on LCD at current cursor position
                 306                       ;
                 307                       ;
038 00190        308         disp_SPARTAN: LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
039 200CA        309                       CALL LCD_write_data
03A 00160        310                       LOAD s5, character_P
E: symbol not defined: `S5'.
W: value out of range: 70, allowed range is [0,15] (trimmed to 4 bits) which makes it 6.
03B 200CA        311                       CALL LCD_write_data
03C 001D0        312                       LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
03D 200CA        313                       CALL LCD_write_data
03E 00180        314                       LOAD s5, character_R
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
03F 200CA        315                       CALL LCD_write_data
040 001A0        316                       LOAD s5, character_T
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
041 200CA        317                       CALL LCD_write_data
042 001D0        318                       LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
043 200CA        319                       CALL LCD_write_data
044 00110        320                       LOAD s5, character_N
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
045 200CA        321                       CALL LCD_write_data
046 00120        322                       LOAD s5, character_minus
E: symbol not defined: `S5'.
047 200CA        323                       CALL LCD_write_data
048 00110        324                       LOAD s5, character_3
E: symbol not defined: `S5'.
W: value out of range: 33, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
049 200CA        325                       CALL LCD_write_data
04A 00110        326                       LOAD s5, character_E
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
04B 200CA        327                       CALL LCD_write_data
04C 20096        328                       CALL disp_space
04D 00190        329                       LOAD s5, character_S
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
04E 200CA        330                       CALL LCD_write_data
04F 001A0        331                       LOAD s5, character_T
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
050 200CA        332                       CALL LCD_write_data
051 001D0        333                       LOAD s5, character_A
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
052 200CA        334                       CALL LCD_write_data
053 00180        335                       LOAD s5, character_R
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
054 200CA        336                       CALL LCD_write_data
055 001A0        337                       LOAD s5, character_T
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
056 200CA        338                       CALL LCD_write_data
057 00110        339                       LOAD s5, character_E
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
058 200CA        340                       CALL LCD_write_data
059 00180        341                       LOAD s5, character_R
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
05A 200CA        342                       CALL LCD_write_data
05B 20096        343                       CALL disp_space
05C 00110        344                       LOAD s5, character_K
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_K'.
05D 200CA        345                       CALL LCD_write_data
05E 00150        346                       LOAD s5, character_I
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
05F 200CA        347                       CALL LCD_write_data
060 001A0        348                       LOAD s5, character_T
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
061 200CA        349                       CALL LCD_write_data
062 25000        350                       RETURN
                 351                       ;
                 352                       ;
                 353                       ;Display 'www.xilinx.com/s3estarter' on LCD at current cursor position
                 354                       ;
                 355                       ;
063 001D0        356             disp_www: LOAD s5, character_w
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
064 200CA        357                       CALL LCD_write_data
065 001D0        358                       LOAD s5, character_w
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
066 200CA        359                       CALL LCD_write_data
067 001D0        360                       LOAD s5, character_w
E: symbol not defined: `S5'.
W: value out of range: 77, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
068 200CA        361                       CALL LCD_write_data
069 00110        362                       LOAD s5, character_stop
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_STOP'.
06A 200CA        363                       CALL LCD_write_data
06B 001E0        364                       LOAD s5, character_x
E: symbol not defined: `S5'.
W: value out of range: 78, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
06C 200CA        365                       CALL LCD_write_data
06D 00150        366                       LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
06E 200CA        367                       CALL LCD_write_data
06F 00110        368                       LOAD s5, character_l
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_L'.
070 200CA        369                       CALL LCD_write_data
071 00150        370                       LOAD s5, character_i
E: symbol not defined: `S5'.
W: value out of range: 69, allowed range is [0,15] (trimmed to 4 bits) which makes it 5.
072 200CA        371                       CALL LCD_write_data
073 00110        372                       LOAD s5, character_n
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_N'.
074 200CA        373                       CALL LCD_write_data
075 001E0        374                       LOAD s5, character_x
E: symbol not defined: `S5'.
W: value out of range: 78, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
076 200CA        375                       CALL LCD_write_data
077 00110        376                       LOAD s5, character_stop
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_STOP'.
078 200CA        377                       CALL LCD_write_data
079 001F0        378                       LOAD s5, character_c
E: symbol not defined: `S5'.
W: value out of range: 63, allowed range is [0,15] (trimmed to 4 bits) which makes it 15.
07A 200CA        379                       CALL LCD_write_data
07B 00110        380                       LOAD s5, character_o
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_O'.
07C 200CA        381                       CALL LCD_write_data
07D 00160        382                       LOAD s5, character_m
E: symbol not defined: `S5'.
07E 200CA        383                       CALL LCD_write_data
07F 00110        384                       LOAD s5, character_divide
E: symbol not defined: `S5'.
E: symbol not defined: `CHARACTER_DIVIDE'.
080 200CA        385                       CALL LCD_write_data
081 00190        386                       LOAD s5, character_s
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
082 200CA        387                       CALL LCD_write_data
083 00110        388                       LOAD s5, character_3
E: symbol not defined: `S5'.
W: value out of range: 33, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
084 200CA        389                       CALL LCD_write_data
085 00110        390                       LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
086 200CA        391                       CALL LCD_write_data
087 00190        392                       LOAD s5, character_s
E: symbol not defined: `S5'.
W: value out of range: 73, allowed range is [0,15] (trimmed to 4 bits) which makes it 9.
088 200CA        393                       CALL LCD_write_data
089 001A0        394                       LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
08A 200CA        395                       CALL LCD_write_data
08B 001D0        396                       LOAD s5, character_a
E: symbol not defined: `S5'.
W: value out of range: 61, allowed range is [0,15] (trimmed to 4 bits) which makes it 13.
08C 200CA        397                       CALL LCD_write_data
08D 00180        398                       LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
08E 200CA        399                       CALL LCD_write_data
08F 001A0        400                       LOAD s5, character_t
E: symbol not defined: `S5'.
W: value out of range: 74, allowed range is [0,15] (trimmed to 4 bits) which makes it 10.
090 200CA        401                       CALL LCD_write_data
091 00110        402                       LOAD s5, character_e
E: symbol not defined: `S5'.
W: value out of range: 65, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
092 200CA        403                       CALL LCD_write_data
093 00180        404                       LOAD s5, character_r
E: symbol not defined: `S5'.
W: value out of range: 72, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
094 200CA        405                       CALL LCD_write_data
095 25000        406                       RETURN
                 407                       ;
                 408                       ;Display a space on LCD at current cursor position
                 409                       ;
                 410                       ;
096 00140        411           disp_space: LOAD s5, character_space
E: symbol not defined: `S5'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
097 200CA        412                       CALL LCD_write_data
098 25000        413                       RETURN
                 414                       ;
                 415                       ;
                 416                       ;
                 417                       ;
                 418                       ;**************************************************************************************
                 419                       ;Software delay routines
                 420                       ;**************************************************************************************
                 421                       ;
                 422                       ;
                 423                       ;
                 424                       ;Delay of 1us.
                 425                       ;
                 426                       ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 427                       ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 428                       ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 429                       ;
                 430                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 431                       ;
                 432                       ;Registers used s0
                 433                       ;
099 00100        434            delay_1us: LOAD s0, delay_1us_constant
E: symbol not defined: `S0'.
09A 18110        435             wait_1us: SUB s0, 01
E: symbol not defined: `S0'.
09B 3609A        436                       JUMP NZ, wait_1us
09C 25000        437                       RETURN
                 438                       ;
                 439                       ;Delay of 40us.
                 440                       ;
                 441                       ;Registers used s0, s1
                 442                       ;
09D 001C0        443           delay_40us: LOAD s1, 28                         ;40 x 1us = 40us
E: symbol not defined: `S1'.
W: value out of range: 28, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
09E 20099        444            wait_40us: CALL delay_1us
09F 18110        445                       SUB s1, 01
E: symbol not defined: `S1'.
0A0 3609E        446                       JUMP NZ, wait_40us
0A1 25000        447                       RETURN
                 448                       ;
                 449                       ;
                 450                       ;Delay of 1ms.
                 451                       ;
                 452                       ;Registers used s0, s1, s2
                 453                       ;
0A2 00130        454            delay_1ms: LOAD s2, 19                         ;25 x 40us = 1ms
E: symbol not defined: `S2'.
W: value out of range: 19, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
0A3 2009D        455             wait_1ms: CALL delay_40us
0A4 18110        456                       SUB s2, 01
E: symbol not defined: `S2'.
0A5 360A3        457                       JUMP NZ, wait_1ms
0A6 25000        458                       RETURN
                 459                       ;
                 460                       ;Delay of 20ms.
                 461                       ;
                 462                       ;Delay of 20ms used during initialisation.
                 463                       ;
                 464                       ;Registers used s0, s1, s2, s3
                 465                       ;
0A7 001E0        466           delay_20ms: LOAD s3, 14                         ;20 x 1ms = 20ms
E: symbol not defined: `S3'.
0A8 200A2        467            wait_20ms: CALL delay_1ms
0A9 18110        468                       SUB s3, 01
E: symbol not defined: `S3'.
0AA 360A8        469                       JUMP NZ, wait_20ms
0AB 25000        470                       RETURN
                 471                       ;
                 472                       ;Delay of approximately 1 second.
                 473                       ;
                 474                       ;Registers used s0, s1, s2, s3, s4
                 475                       ;
0AC 00100        476             delay_1s: LOAD s4, 32                         ;50 x 20ms = 1000ms
E: symbol not defined: `S4'.
W: value out of range: 32, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
0AD 200A7        477              wait_1s: CALL delay_20ms
0AE 18110        478                       SUB s4, 01
E: symbol not defined: `S4'.
0AF 360AD        479                       JUMP NZ, wait_1s
0B0 25000        480                       RETURN
                 481                       ;
                 482                       ;
                 483                       ;
                 484                       ;**************************************************************************************
                 485                       ;LCD Character Module Routines
                 486                       ;**************************************************************************************
                 487                       ;
                 488                       ;LCD module is a 16 character by 2 line display but all displays are very similar
                 489                       ;The 4-wire data interface will be used (DB4 to DB7).
                 490                       ;
                 491                       ;The LCD modules are relatively slow and software delay loops are used to slow down
                 492                       ;KCPSM3 adequately for the LCD to communicate. The delay routines are provided in
                 493                       ;a different section (see above in this case).
                 494                       ;
                 495                       ;
                 496                       ;Pulse LCD enable signal 'E' high for greater than 230ns (1us is used).
                 497                       ;
                 498                       ;Register s4 should define the current state of the LCD output port.
                 499                       ;
                 500                       ;Registers used s0, s4
                 501                       ;
0B1 06110        502          LCD_pulse_E: XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
0B2 2D128        503                       OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
0B3 20099        504                       CALL delay_1us
0B4 06110        505                       XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
0B5 2D128        506                       OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
0B6 25000        507                       RETURN
                 508                       ;
                 509                       ;Write 4-bit instruction to LCD display.
                 510                       ;
                 511                       ;The 4-bit instruction should be provided in the upper 4-bits of register s4.
                 512                       ;Note that this routine does not release the master enable but as it is only
                 513                       ;used during initialisation and as part of the 8-bit instruction write it
                 514                       ;should be acceptable.
                 515                       ;
                 516                       ;Registers used s4
                 517                       ;
0B7 02110        518      LCD_write_inst4: AND s4, F8                          ;Enable=1 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F8'.
0B8 2D128        519                       OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
0B9 200B1        520                       CALL LCD_pulse_E
0BA 25000        521                       RETURN
                 522                       ;
                 523                       ;
                 524                       ;Write 8-bit instruction to LCD display.
                 525                       ;
                 526                       ;The 8-bit instruction should be provided in register s5.
                 527                       ;Instructions are written using the following sequence
                 528                       ; Upper nibble
                 529                       ; wait >1us
                 530                       ; Lower nibble
                 531                       ; wait >40us
                 532                       ;
                 533                       ;Registers used s0, s1, s4, s5
                 534                       ;
0BB 00110        535      LCD_write_inst8: LOAD s4, s5
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
0BC 02110        536                       AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
0BD 04180        537                       OR s4, LCD_drive                    ;Enable=1
E: symbol not defined: `S4'.
0BE 200B7        538                       CALL LCD_write_inst4                ;write upper nibble
0BF 20099        539                       CALL delay_1us                      ;wait >1us
0C0 00110        540                       LOAD s4, s5                         ;select lower nibble with
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
0C1 14107        541                       SL1 s4                              ;Enable=1
E: symbol not defined: `S4'.
0C2 14106        542                       SL0 s4                              ;RS=0 Instruction
E: symbol not defined: `S4'.
0C3 14106        543                       SL0 s4                              ;RW=0 Write
E: symbol not defined: `S4'.
0C4 14106        544                       SL0 s4                              ;E=0
E: symbol not defined: `S4'.
0C5 200B7        545                       CALL LCD_write_inst4                ;write lower nibble
0C6 2009D        546                       CALL delay_40us                     ;wait >40us
0C7 00110        547                       LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
0C8 2D128        548                       OUTPUT s4, LCD_output_port          ;Release master enable
E: symbol not defined: `S4'.
0C9 25000        549                       RETURN
                 550                       ;
                 551                       ;
                 552                       ;
                 553                       ;Write 8-bit data to LCD display.
                 554                       ;
                 555                       ;The 8-bit data should be provided in register s5.
                 556                       ;Data bytes are written using the following sequence
                 557                       ; Upper nibble
                 558                       ; wait >1us
                 559                       ; Lower nibble
                 560                       ; wait >40us
                 561                       ;
                 562                       ;Registers used s0, s1, s4, s5
                 563                       ;
0CA 00110        564       LCD_write_data: LOAD s4, s5
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
0CB 02110        565                       AND s4, F0                          ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
                 566                       OR s4, 0C                           ;Enable=1 RS=1 Data, RW=0 Write, E=0
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
0CC 2D128        567                       OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
0CD 200B1        568                       CALL LCD_pulse_E                    ;write upper nibble
0CE 20099        569                       CALL delay_1us                      ;wait >1us
0CF 00110        570                       LOAD s4, s5                         ;select lower nibble with
E: symbol not defined: `S4'.
E: symbol not defined: `S5'.
0D0 14107        571                       SL1 s4                              ;Enable=1
E: symbol not defined: `S4'.
0D1 14107        572                       SL1 s4                              ;RS=1 Data
E: symbol not defined: `S4'.
0D2 14106        573                       SL0 s4                              ;RW=0 Write
E: symbol not defined: `S4'.
0D3 14106        574                       SL0 s4                              ;E=0
E: symbol not defined: `S4'.
0D4 2D128        575                       OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
0D5 200B1        576                       CALL LCD_pulse_E                    ;write lower nibble
0D6 2009D        577                       CALL delay_40us                     ;wait >40us
0D7 00110        578                       LOAD s4, F0                         ;Enable=0 RS=0 Instruction, RW=0 Write, E=0
E: symbol not defined: `S4'.
E: symbol not defined: `F0'.
0D8 2D128        579                       OUTPUT s4, LCD_output_port          ;Release master enable
E: symbol not defined: `S4'.
0D9 25000        580                       RETURN
                 581                       ;
                 582                       ;
                 583                       ;
                 584                       ;
                 585                       ;Read 8-bit data from LCD display.
                 586                       ;
                 587                       ;The 8-bit data will be read from the current LCD memory address
                 588                       ;and will be returned in register s5.
                 589                       ;It is advisable to set the LCD address (cursor position) before
                 590                       ;using the data read for the first time otherwise the display may
                 591                       ;generate invalid data on the first read.
                 592                       ;
                 593                       ;Data bytes are read using the following sequence
                 594                       ; Upper nibble
                 595                       ; wait >1us
                 596                       ; Lower nibble
                 597                       ; wait >40us
                 598                       ;
                 599                       ;Registers used s0, s1, s4, s5
                 600                       ;
                 601       LCD_read_data8: LOAD s4, 0E                         ;Enable=1 RS=1 Data, RW=1 Read, E=0
E: identifier cannot start with a digit: `0E'.
E: unexpected end of line.
0DA 2D128        602                       OUTPUT s4, LCD_output_port          ;set up RS and RW >40ns before enable pulse
E: symbol not defined: `S4'.
0DB 06110        603                       XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
0DC 2D128        604                       OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
0DD 20099        605                       CALL delay_1us                      ;wait >260ns to access data
0DE 09102        606                       INPUT s5, LCD_input_port            ;read upper nibble
E: symbol not defined: `S5'.
0DF 06110        607                       XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
0E0 2D128        608                       OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
0E1 20099        609                       CALL delay_1us                      ;wait >1us
0E2 06110        610                       XOR s4, LCD_E                       ;E=1
E: symbol not defined: `S4'.
0E3 2D128        611                       OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
0E4 20099        612                       CALL delay_1us                      ;wait >260ns to access data
0E5 09102        613                       INPUT s0, LCD_input_port            ;read lower nibble
E: symbol not defined: `S0'.
0E6 06110        614                       XOR s4, LCD_E                       ;E=0
E: symbol not defined: `S4'.
0E7 2D128        615                       OUTPUT s4, LCD_output_port
E: symbol not defined: `S4'.
0E8 02110        616                       AND s5, F0                          ;merge upper and lower nibbles
E: symbol not defined: `S5'.
E: symbol not defined: `F0'.
0E9 1410E        617                       SR0 s0
E: symbol not defined: `S0'.
0EA 1410E        618                       SR0 s0
E: symbol not defined: `S0'.
0EB 1410E        619                       SR0 s0
E: symbol not defined: `S0'.
0EC 1410E        620                       SR0 s0
E: symbol not defined: `S0'.
0ED 04110        621                       OR s5, s0
E: symbol not defined: `S5'.
E: symbol not defined: `S0'.
0EE 00140        622                       LOAD s4, 04                         ;Enable=0 RS=1 Data, RW=0 Write, E=0
E: symbol not defined: `S4'.
0EF 2D128        623                       OUTPUT s4, LCD_output_port          ;Stop reading 5V device and release master enable
E: symbol not defined: `S4'.
0F0 2009D        624                       CALL delay_40us                     ;wait >40us
0F1 25000        625                       RETURN
                 626                       ;
                 627                       ;
                 628                       ;Reset and initialise display to communicate using 4-bit data mode
                 629                       ;Includes routine to clear the display.
                 630                       ;
                 631                       ;Requires the 4-bit instructions 3,3,3,2 to be sent with suitable delays
                 632                       ;following by the 8-bit instructions to set up the display.
                 633                       ;
                 634                       ;  28 = '001' Function set, '0' 4-bit mode, '1' 2-line, '0' 5x7 dot matrix, 'xx'
                 635                       ;  06 = '000001' Entry mode, '1' increment, '0' no display shift
                 636                       ;  0C = '00001' Display control, '1' display on, '0' cursor off, '0' cursor blink off
                 637                       ;  01 = '00000001' Display clear
                 638                       ;
                 639                       ;Registers used s0, s1, s2, s3, s4
                 640                       ;
0F2 200A7        641            LCD_reset: CALL delay_20ms                     ;wait more that 15ms for display to be ready
0F3 001E0        642                       LOAD s4, 30
E: symbol not defined: `S4'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
0F4 200B7        643                       CALL LCD_write_inst4                ;send '3'
0F5 200A7        644                       CALL delay_20ms                     ;wait >4.1ms
0F6 200B7        645                       CALL LCD_write_inst4                ;send '3'
0F7 200A2        646                       CALL delay_1ms                      ;wait >100us
0F8 200B7        647                       CALL LCD_write_inst4                ;send '3'
0F9 2009D        648                       CALL delay_40us                     ;wait >40us
0FA 00140        649                       LOAD s4, 20
E: symbol not defined: `S4'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
0FB 200B7        650                       CALL LCD_write_inst4                ;send '2'
0FC 2009D        651                       CALL delay_40us                     ;wait >40us
0FD 001C0        652                       LOAD s5, 28                         ;Function set
E: symbol not defined: `S5'.
W: value out of range: 28, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
0FE 200BB        653                       CALL LCD_write_inst8
0FF 00160        654                       LOAD s5, 06                         ;Entry mode
E: symbol not defined: `S5'.
100 200BB        655                       CALL LCD_write_inst8
                 656                       LOAD s5, 0C                         ;Display control
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
101 200BB        657                       CALL LCD_write_inst8
102 00110        658            LCD_clear: LOAD s5, 01                         ;Display clear
E: symbol not defined: `S5'.
103 200BB        659                       CALL LCD_write_inst8
104 200A2        660                       CALL delay_1ms                      ;wait >1.64ms for display to clear
105 200A2        661                       CALL delay_1ms
106 25000        662                       RETURN
                 663                       ;
                 664                       ;Position the cursor ready for characters to be written.
                 665                       ;The display is formed of 2 lines of 16 characters and each
                 666                       ;position has a corresponding address as indicated below.
                 667                       ;
                 668                       ;                   Character position
                 669                       ;           0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15
                 670                       ;
                 671                       ; Line 1 - 80 81 82 83 84 85 86 87 88 89 8A 8B 8C 8D 8E 8F
                 672                       ; Line 2 - C0 C1 C2 C3 C4 C5 C6 C7 C8 C9 CA CB CC CD CE CF
                 673                       ;
                 674                       ;This routine will set the cursor position using the value provided
                 675                       ;in register s5. The upper nibble will define the line and the lower
                 676                       ;nibble the character position on the line.
                 677                       ; Example s5 = 2B will position the cursor on line 2 position 11
                 678                       ;
                 679                       ;Registers used s0, s1, s2, s3, s4
                 680                       ;
107 0C1A0        681           LCD_cursor: TEST s5, 10                         ;test for line 1
E: symbol not defined: `S5'.
108 32001        682                       JUMP Z, set_line2
E: symbol not defined: `SET_LINE2'.
                 683                       AND s5, 0F                          ;make address in range 80 to 8F for line 1
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
109 04100        684                       OR s5, 80
E: symbol not defined: `S5'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
10A 200BB        685                       CALL LCD_write_inst8                ;instruction write to set cursor
10B 25000        686                       RETURN
                 687            set_line2: AND s5, 0F                          ;make address in range C0 to CF for line 2
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
10C 04110        688                       OR s5, C0
E: symbol not defined: `S5'.
E: symbol not defined: `C0'.
10D 200BB        689                       CALL LCD_write_inst8                ;instruction write to set cursor
10E 25000        690                       RETURN
                 691                       ;
                 692                       ;This routine will shift the complete display one position to the left.
                 693                       ;The cursor position and LCD memory contents will not change.
                 694                       ;
                 695                       ;
                 696                       ;Registers used s0, s1, s2, s3, s4, s5
                 697                       ;
10F 00120        698       LCD_shift_left: LOAD s5, 18                         ;shift display left
E: symbol not defined: `S5'.
W: value out of range: 18, allowed range is [0,15] (trimmed to 4 bits) which makes it 2.
110 200BB        699                       CALL LCD_write_inst8
111 25000        700                       RETURN
                 701                       ;
                 702                       ;**************************************************************************************
                 703                       ;Interrupt Service Routine (ISR)
                 704                       ;**************************************************************************************
                 705                       ;
                 706                       ;Interrupts occur when the rotary control has been moved.
                 707                       ;
                 708                       ;The ISR captures the state of the direction which it writes to scratch pad memory (SPM).
                 709                       ;The most significant bit is also set at this location to provide a 'flag' to the
                 710                       ;main body of the program.
                 711                       ;
                 712                       ;If the main program is not in rotation mode then the ISR effectively ignores the
                 713                       ;event although the hardware interface will be cleared by the interrupt_ack signal.
                 714                       ;This prevents a rotation event which has been made during normal switch and button
                 715                       ;mode from having any effect.
                 716                       ;
112 2F101        717                  ISR: STORE s0, ISR_preserve_s0           ;preserve s0
E: symbol not defined: `S0'.
113 0B103        718                       FETCH s0, mode                      ;test operation mode
E: symbol not defined: `S0'.
114 1C100        719                       COMPARE s0, 00                      ;ignore events under normal mode
E: symbol not defined: `S0'.
115 32119        720                       JUMP Z, end_ISR
116 09101        721                       INPUT s0, rotary_port               ;read rotary encoder
E: symbol not defined: `S0'.
117 04100        722                       OR s0, 80                           ;set flag
E: symbol not defined: `S0'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
118 2F100        723                       STORE s0, rotary_status             ;put result in SCM
E: symbol not defined: `S0'.
119 0B101        724              end_ISR: FETCH s0, ISR_preserve_s0           ;restore s0
E: symbol not defined: `S0'.
11A 29001        725                       RETURNI ENABLE
                 726                       ;
                 727                       ;
                 728                       ;**************************************************************************************
                 729                       ;Interrupt Vector
                 730                       ;**************************************************************************************
                 731                       ;
                 732                       ADDRESS 3FF
E: identifier cannot start with a digit: `3FF'.
E: directive ADDRESS requires a single argument.
11B 22112        733                       JUMP ISR
                 734                       ;
                 735                       ;
