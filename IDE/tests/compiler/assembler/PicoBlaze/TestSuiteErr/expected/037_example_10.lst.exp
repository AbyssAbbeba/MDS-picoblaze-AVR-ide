                   1                             ;KCPSM3 Program - UART programming of StrataFLASH memory on the Spartan-3E Starter Kit.
                   2                             ;
                   3                             ;Ken Chapman - Xilinx Ltd
                   4                             ;
                   5                             ;Version v1.00 - 28th March 2006
                   6                             ;
                   7                             ;This program uses a 115200 baud UART connection with XON/XOFF flow control
                   8                             ;to allow a standard MCS file for the configuration of a Spartan-3E device to
                   9                             ;be programmed into the Intel StrataFLASH device on the board.
                  10                             ;
                  11                             ;
                  12                             ;
                  13                             ;
                  14                             ;**************************************************************************************
                  15                             ; Port definitions
                  16                             ;**************************************************************************************
                  17                             ;
                  18                             ;
                  19                             CONSTANT status_port, 00               ;UART and filter status input
                  20                             CONSTANT tx_data_present, 01           ;  Transmitter  data present - bit0
                  21                             CONSTANT tx_half_full, 02              ;    FIFO          half full - bit1
                  22                             CONSTANT tx_full, 04                   ;                       full - bit2
                  23                             CONSTANT rx_data_present, 08           ;               data present - bit3
                  24                             CONSTANT rx_half_full, 10              ;  Receiver        half full - bit4
                  25                             CONSTANT rx_full, 20                   ;    FIFO               full - bit5
                  26                             CONSTANT spare1, 40                    ;                  spare '0' - bit6
                  27                             CONSTANT SF_STS, 80                    ;            StrataFLASH STS - bit7
                  28                             ;
                  29                             CONSTANT UART_read_port, 01            ;UART Rx data input
                  30                             ;
                  31                             CONSTANT UART_write_port, 04           ;UART Tx data output
                  32                             ;
                  33                             ;
                  34                             CONSTANT SF_data_in_port, 02           ;Read data from StrataFLASH device
                  35                             ;
                  36                             CONSTANT SF_data_out_port, 10          ;Data to write into StrataFLASH device
                  37                             ;
                  38                             CONSTANT SF_addr_hi_port, 80           ;StrataFLASH address[23:16]
                  39                             CONSTANT SF_addr_mi_port, 40           ;StrataFLASH address[15:8]
                  40                             CONSTANT SF_addr_lo_port, 20           ;StrataFLASH address[7:0]
                  41                             ;
                  42                             CONSTANT SF_control_port, 08           ;StrataFLASH control
                  43                             CONSTANT SF_read, 01                   ;         active High read - bit0
                  44                             CONSTANT SF_ce, 02                     ; active Low device enable - bit1
                  45                             CONSTANT SF_we, 04                     ;         active Low write - bit2
                  46                             ;
                  47                             ;
                  48                             ;
                  49                             ;**************************************************************************************
                  50                             ; Special Register usage
                  51                             ;**************************************************************************************
                  52                             ;
                  53                             NAMEREG sF, UART_data                  ;used to pass data to and from the UART
                  54                             ;
                  55                             ;
                  56                             ;**************************************************************************************
                  57                             ; Useful data constants
                  58                             ;**************************************************************************************
                  59                             ;
                  60                             ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                  61                             ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                  62                             ;calculation highly predictable. The '6' in the following equation even allows for
                  63                             ;'CALL delay_1us' instruction in the initiating code.
                  64                             ;
                  65                             ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                  66                             ;
                  67                             ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                  68                             ;For clock rates below 10MHz the value of 1 must be used and the operation will
                  69                             ;become lower than intended.
                  70                             ;
                  71                             CONSTANT delay_1us_constant, 0B
                  72                             ;
                  73                             ;
                  74                             ;
                  75                             ;ASCII table
                  76                             ;
                  77                             CONSTANT character_a, 61
                  78                             CONSTANT character_b, 62
                  79                             CONSTANT character_c, 63
                  80                             CONSTANT character_d, 64
                  81                             CONSTANT character_e, 65
                  82                             CONSTANT character_f, 66
                  83                             CONSTANT character_g, 67
                  84                             CONSTANT character_h, 68
                  85                             CONSTANT character_i, 69
                  86                             CONSTANT character_j, 6A
E: identifier cannot start with a digit: `6A'.
E: unexpected end of line.
                  87                             CONSTANT character_k, 6B
E: identifier cannot start with a digit: `6B'.
E: unexpected end of line.
                  88                             CONSTANT character_l, 6C
E: identifier cannot start with a digit: `6C'.
E: unexpected end of line.
                  89                             CONSTANT character_m, 6D
                  90                             CONSTANT character_n, 6E
E: identifier cannot start with a digit: `6E'.
E: unexpected end of line.
                  91                             CONSTANT character_o, 6F
E: identifier cannot start with a digit: `6F'.
E: unexpected end of line.
                  92                             CONSTANT character_p, 70
                  93                             CONSTANT character_q, 71
                  94                             CONSTANT character_r, 72
                  95                             CONSTANT character_s, 73
                  96                             CONSTANT character_t, 74
                  97                             CONSTANT character_u, 75
                  98                             CONSTANT character_v, 76
                  99                             CONSTANT character_w, 77
                 100                             CONSTANT character_x, 78
                 101                             CONSTANT character_y, 79
                 102                             CONSTANT character_z, 7A
E: identifier cannot start with a digit: `7A'.
E: unexpected end of line.
                 103                             CONSTANT character_A, 41
                 104                             CONSTANT character_B, 42
                 105                             CONSTANT character_C, 43
                 106                             CONSTANT character_D, 44
                 107                             CONSTANT character_E, 45
                 108                             CONSTANT character_F, 46
                 109                             CONSTANT character_G, 47
                 110                             CONSTANT character_H, 48
                 111                             CONSTANT character_I, 49
                 112                             CONSTANT character_J, 4A
E: identifier cannot start with a digit: `4A'.
E: unexpected end of line.
                 113                             CONSTANT character_K, 4B
E: identifier cannot start with a digit: `4B'.
E: unexpected end of line.
                 114                             CONSTANT character_L, 4C
E: identifier cannot start with a digit: `4C'.
E: unexpected end of line.
                 115                             CONSTANT character_M, 4D
                 116                             CONSTANT character_N, 4E
E: identifier cannot start with a digit: `4E'.
E: unexpected end of line.
                 117                             CONSTANT character_O, 4F
E: identifier cannot start with a digit: `4F'.
E: unexpected end of line.
                 118                             CONSTANT character_P, 50
                 119                             CONSTANT character_Q, 51
                 120                             CONSTANT character_R, 52
                 121                             CONSTANT character_S, 53
                 122                             CONSTANT character_T, 54
                 123                             CONSTANT character_U, 55
                 124                             CONSTANT character_V, 56
                 125                             CONSTANT character_W, 57
                 126                             CONSTANT character_X, 58
                 127                             CONSTANT character_Y, 59
                 128                             CONSTANT character_Z, 5A
E: identifier cannot start with a digit: `5A'.
E: unexpected end of line.
                 129                             CONSTANT character_0, 30
                 130                             CONSTANT character_1, 31
                 131                             CONSTANT character_2, 32
                 132                             CONSTANT character_3, 33
                 133                             CONSTANT character_4, 34
                 134                             CONSTANT character_5, 35
                 135                             CONSTANT character_6, 36
                 136                             CONSTANT character_7, 37
                 137                             CONSTANT character_8, 38
                 138                             CONSTANT character_9, 39
                 139                             CONSTANT character_colon, 3A
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 140                             CONSTANT character_fullstop, 2E
E: identifier cannot start with a digit: `2E'.
E: unexpected end of line.
                 141                             CONSTANT character_semi_colon, 3B
E: identifier cannot start with a digit: `3B'.
E: unexpected end of line.
                 142                             CONSTANT character_minus, 2D
                 143                             CONSTANT character_plus, 2B
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 144                             CONSTANT character_comma, 2C
E: identifier cannot start with a digit: `2C'.
E: unexpected end of line.
                 145                             CONSTANT character_less_than, 3C       ;'<'
E: identifier cannot start with a digit: `3C'.
E: unexpected end of line.
                 146                             CONSTANT character_greater_than, 3E    ;'>'
E: identifier cannot start with a digit: `3E'.
E: unexpected end of line.
                 147                             CONSTANT character_open, 28            ;'('
                 148                             CONSTANT character_close, 29           ;')'
                 149                             CONSTANT character_divide, 2F          ;'/'
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 150                             CONSTANT character_equals, 3D
                 151                             CONSTANT character_space, 20
                 152                             CONSTANT character_CR, 0D              ;carriage return
                 153                             CONSTANT character_LF, 0A              ;line feed
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
                 154                             CONSTANT character_question, 3F        ;'?'
E: identifier cannot start with a digit: `3F'.
E: unexpected end of line.
                 155                             CONSTANT character_dollar, 24
                 156                             CONSTANT character_exclaim, 21         ;'!'
                 157                             CONSTANT character_BS, 08              ;Back Space command character
                 158                             CONSTANT character_XON, 11             ;Flow control ON
                 159                             CONSTANT character_XOFF, 13            ;Flow control OFF
                 160                             ;
                 161                             ;
                 162                             ;**************************************************************************************
                 163                             ; Scratch Pad Memory Locations
                 164                             ;**************************************************************************************
                 165                             ;
                 166                             CONSTANT ISR_preserve_s0, 00           ;preserve register during ISR
                 167                             ;
                 168                             ;
                 169                             ;
                 170                             ;Store up to one line of an MCS file as bytes
                 171                             ;A typical data line consists of:-
                 172                             ;:     Start character which is not stored
                 173                             ;10    Number of data bytes included (16 in this case)
                 174                             ;aaaa  Lower 16-bits of the storage address
                 175                             ;00    Record type (data in this case)
                 176                             ;dddd...   Data bytes (typically 16 which is the maximum)
                 177                             ;cc    Checksum
                 178                             ;CR/LF Line will end in carriage return and/or line feed which is not stored.
                 179                             ;
                 180                             ;So a total of 21 bytes could be stored before processing.
                 181                             ;This is located at the end of scratch pad memory.
                 182                             ;
                 183                             CONSTANT line_start, 2B                ;21 bytes until end of memory
E: identifier cannot start with a digit: `2B'.
E: unexpected end of line.
                 184                             CONSTANT data_start, 2F                ;Start of data field if present
E: identifier cannot start with a digit: `2F'.
E: unexpected end of line.
                 185                             ;
                 186                             ;
                 187                             ;**************************************************************************************
                 188                             ; Initialise the system and welcome message
                 189                             ;**************************************************************************************
                 190                             ;
                 191                 cold_start: CALL SF_init                           ;initialise StrataFLASH controls
                 192                             CALL delay_1s                          ;delay because UART is fast and JTAG startup sequence can be slow
                 193                             ENABLE INTERRUPT                       ;Interrupt is used for XON/XOFF flow control
                 194              welcome_start: CALL send_CR
                 195                             CALL send_welcome                      ;start up message and version number
                 196                             ;
                 197                             ;
                 198                             ;**************************************************************************************
                 199                             ; Main menu and command selection
                 200                             ;**************************************************************************************
                 201                             ;
                 202                             ;
                 203                 warm_start: CALL send_Menu                         ;Menu and command selection
                 204                             CALL send_CR
                 205                             ;
                 206                     prompt: CALL send_CR
                 207                             CALL send_CR
                 208                             LOAD UART_data, character_greater_than ;prompt for input
                 209                             CALL send_to_UART
                 210                             CALL read_upper_case
                 211                             COMPARE s0, character_E                ;test for commands and execute as required
                 212                             JUMP Z, erase_command
                 213                             COMPARE s0, character_B
                 214                             JUMP Z, block_erase_command
                 215                             COMPARE s0, character_P
                 216                             JUMP Z, program_command
                 217                             COMPARE s0, character_W
                 218                             JUMP Z, write_command
                 219                             COMPARE s0, character_R
                 220                             JUMP Z, read_command
                 221                             COMPARE s0, character_I
                 222                             JUMP Z, SF_information
                 223                             COMPARE s0, character_H
                 224                             JUMP Z, welcome_start
                 225                             COMPARE s0, character_S
                 226                             JUMP Z, SF_status
                 227                             CALL send_CR                           ;no valid command input
                 228                             LOAD UART_data, character_question     ;display ???
                 229                             CALL send_to_UART
                 230                             CALL send_to_UART
                 231                             CALL send_to_UART
                 232                             JUMP prompt                            ;Try again!
                 233                             ;
                 234                             ;
                 235            read_upper_case: CALL read_from_UART                    ;read command character from UART
                 236                             CALL send_to_UART                      ;echo character
                 237                             LOAD s0, UART_data                     ;convert to upper case
                 238                             CALL upper_case
                 239                             RETURN
                 240                             ;
                 241                             ;
                 242                             ;**************************************************************************************
                 243                             ; Initialise the StrataFlash Memory control signals.
                 244                             ;**************************************************************************************
                 245                             ;
                 246                             ; SF_read = 0   - Output enable off
                 247                             ; SF_ce = 1     - Deselect StrataFLASH memory
                 248                             ; SF_we = 1     - Write enable off
                 249                             ;
                 250                             ; Register used s0
                 251                             ;
                 252                    SF_init: LOAD s0, 06
                 253                             OUTPUT s0, SF_control_port
                 254                             RETURN
                 255                             ;
                 256                             ;
                 257                             ;**************************************************************************************
                 258                             ; Erase Command - Perform bulk erase of the StrataFLASH memory
                 259                             ;**************************************************************************************
                 260                             ;
                 261                             ; This routine executes the block erase command 128 times with a different base
                 262                             ; address in each case.
                 263                             ;
                 264                             ; Note that this could take as long as 8 minutes 30 seconds
                 265                             ; and even typical times will be approximately 2 minutes.
                 266                             ;
                 267                             ; Registers used s1,s7,s8,s9
                 268                             ;
                 269              erase_command: LOAD s9, FE                            ;define base address of block 127 = FE0000
                 270                             JUMP blocks_erase
                 271                             ;
                 272                             ;
                 273                             ;**************************************************************************************
                 274                             ; Block Erase Command - Performs erase of lowest 3 blocks of StrataFLASH memory which
                 275                             ; covers the address range 000000 to 05FFFF in which the configuration for an XC3S500E
                 276                             ; would be able to fit (000000 to 045470).
                 277                             ;**************************************************************************************
                 278                             ;
                 279                             ; This routine executes the block erase command 3 times with a different base
                 280                             ; address in each case.
                 281                             ;
                 282                             ; Each block is 128K bytes and therefore has an address range of 000000 to 01FFFF.
                 283                             ; So each block is separated by 020000 hex.
                 284                             ;
                 285                             ; Registers used s0,s1,s7,s8,s9
                 286                             ;
                 287        block_erase_command: LOAD s9, 04                            ;define base address of block 3 = 040000
                 288               blocks_erase: CALL send_CR
                 289                             CALL send_Confirm                      ;confirm command with a 'Y' which must be upper case
                 290                             CALL read_from_UART                    ;read command character from UART
                 291                             CALL send_to_UART                      ;echo input
                 292                             COMPARE UART_data, character_Y
                 293                             JUMP NZ, abort_erase
                 294                             CALL send_CR
                 295                             CALL send_Erase_in_progress
                 296                             CALL send_CR
                 297                             LOAD s8, 00                            ;define lower address of each block = xx0000
                 298                             LOAD s7, 00
                 299          blocks_erase_loop: LOAD UART_data, character_fullstop     ;progress dots
                 300                             CALL send_to_UART
                 301                             CALL SF_erase_block                    ;erase block
                 302                             SUB s9, 02                             ;decrement base address by 1 block
                 303                             JUMP NC, blocks_erase_loop             ;repeat until block 0 is erased
                 304                             CALL send_OK
                 305                             JUMP prompt
                 306                             ;
                 307                abort_erase: CALL send_Abort
                 308                             JUMP prompt
                 309                             ;
                 310                             ;
                 311                             ;**************************************************************************************
                 312                             ; Erase a single 128K Byte block of the StrataFlash Memory
                 313                             ;**************************************************************************************
                 314                             ;
                 315                             ; The 24-bit address of the block should be supplied in register set [s9,s8,s7].
                 316                             ;
                 317                             ; To erase a block the address must be set and then the block erase command (20 hex)
                 318                             ; written to the memory followed by the write confirm command (D0 hex).
                 319                             ;
                 320                             ; The act of erasing a block may take up to 1 second to complete. This routine
                 321                             ; waits for the memory to be ready before restoring the normal read array mode and
                 322                             ; returning.
                 323                             ;
                 324                             ; Registers used s1,s7,s8,s9
                 325                             ;
                 326             SF_erase_block: LOAD s1, 20                            ;block erase command
                 327                             CALL SF_byte_write
                 328                             LOAD s1, D0                            ;write confirm command
                 329                             CALL SF_byte_write
                 330                             CALL wait_SF_ready                     ;wait for erase to complete
                 331                             RETURN
                 332                             ;
                 333                             ;
                 334                             ;**************************************************************************************
                 335                             ; Program Command - Program StrataFLASH memory with data defined in an MCS file
                 336                             ;**************************************************************************************
                 337                             ;
                 338            program_command: CALL send_CR
                 339                             CALL send_Waiting_MCS_file
                 340                             CALL program_MCS
                 341                             CALL send_OK
                 342                             JUMP prompt
                 343                             ;
                 344                             ;**************************************************************************************
                 345                             ; Program StrataFLASH memory with data defined in an MCS file
                 346                             ;**************************************************************************************
                 347                             ;
                 348                             ;Reads the MCS file from the UART and programs the Strata FLASH device at the locations.
                 349                             ;specified by the file contents.
                 350                             ;
                 351                             ;This routine will continue until an end of file record is detected.
                 352                             ;For each line of MCS received, the current address will be output so that
                 353                             ;progress can be monitored.
                 354                             ;
                 355                             ;
                 356                program_MCS: CALL read_MCS_line                     ;read line from UART
                 357                             CALL MCS_address                       ;find start address and record type
                 358                             COMPARE sB, 01                         ;test for end record
                 359                             RETURN Z                               ;end of programming
                 360                             COMPARE sB, 04                         ;test for extended address record
                 361                             JUMP Z, program_MCS                    ;no data with this record and upper address now correct
                 362                             ;
                 363                             ;Assume data record type 00 which is data so need to program specified number
                 364                             ;of bytes into memory at correct address.
                 365                             ;
                 366             write_spm_data: CALL send_hex_3bytes                   ;send address to indicate progress
                 367                             CALL send_CR
                 368                             FETCH sA, line_start                   ;read number of data bytes to program
                 369                             CALL SF_buffer_write                   ;write bytes to memory
                 370                             JUMP program_MCS
                 371                             ;
                 372                             ;
                 373                             ;**************************************************************************************
                 374                             ;Read one line of an MCS file into scratch pad memory
                 375                             ;**************************************************************************************
                 376                             ;
                 377                             ;Reads one line of MCS file format into scratch pad memory starting at location 'line_start'.
                 378                             ;
                 379                             ;The routine detects the line start character ':' ignoring any preceding characters. This
                 380                             ;will remove any additional CR or LF characters.
                 381                             ;
                 382                             ;It then reads each subsequent pair of ASCII characters, converts them to true hex in the
                 383                             ;range 00 to FF and stores them in scratch pad memory.
                 384                             ;
                 385                             ;The end of the line is determined by either a CR or LF character.
                 386                             ;
                 387                             ;The value last returned in register 'sE' will be the pointer to the location in
                 388                             ;scratch pad memory following the last byte for the line read.
                 389                             ;
                 390              read_MCS_line: LOAD sE, line_start                    ;initialise SPM memory pointer
                 391        wait_MCS_line_Start: CALL read_from_UART                    ;read character
                 392                             COMPARE UART_data, character_colon     ;test for start character
                 393                             JUMP NZ, wait_MCS_line_Start
                 394              read_MCS_byte: CALL read_from_UART                    ;read character
                 395                             COMPARE UART_data, character_CR        ;test for end of line
                 396                             RETURN Z
                 397                             COMPARE UART_data, character_LF        ;test for end of line
                 398                             RETURN Z
                 399                             LOAD s3, UART_data                     ;upper nibble character
                 400                             CALL read_from_UART                    ;read character
                 401                             LOAD s2, UART_data                     ;lower nibble character
                 402                             CALL ASCII_byte_to_hex                 ;convert to true hex value
                 403                             STORE s0, (sE)                         ;write to SPM
                 404                             ADD sE, 01                             ;increment pointer
                 405                             JUMP read_MCS_byte
                 406                             ;
                 407                             ;
                 408                             ;**************************************************************************************
                 409                             ;Determine the current address for the line of an MCS file in scratch pad memory
                 410                             ;**************************************************************************************
                 411                             ;
                 412                             ;Checks the existing line data stored in scratch pad memory starting at location
                 413                             ;'line_start' and determines the current address.
                 414                             ;
                 415                             ;The address is in the register set [s9,s8,s7] before and after this routine is
                 416                             ;executed because not all address bits are defined by a given line of MCS and
                 417                             ;the undefined bits remain constant.
                 418                             ;
                 419                             ;A record type of 04 will update [s9].
                 420                             ;A record type of 00 will update [s8,s7].
                 421                             ;
                 422                             ;On return, the register sB will contain the record type and
                 423                             ;register sC will indicate the number of data bytes stored.
                 424                             ;
                 425                MCS_address: LOAD sD, line_start                    ;initialise SPM memory pointer
                 426                             FETCH sC, (sD)                         ;read number of bytes on line
                 427                             ADD sD, 03                             ;move to record type
                 428                             FETCH sB, (sD)                         ;read record type
                 429                             COMPARE sB, 00                         ;test for data record
                 430                             JUMP Z, new_low_address
                 431                             COMPARE sB, 04                         ;test for data record
                 432                             RETURN NZ
                 433                             ADD sD, 02                             ;read upper 8-bits
                 434                             FETCH s9, (sD)
                 435                             RETURN
                 436            new_low_address: SUB sD, 01                             ;read lower 8-bits
                 437                             FETCH s7, (sD)
                 438                             SUB sD, 01                             ;read middle 8-bits
                 439                             FETCH s8, (sD)
                 440                             RETURN
                 441                             ;
                 442                             ;
                 443                             ;**************************************************************************************
                 444                             ; Write to Buffer of StrataFlash Memory and program
                 445                             ;**************************************************************************************
                 446                             ;
                 447                             ; Writing to the buffer allows faster operation than writing individual bytes.
                 448                             ; The buffer size is limited to 32 locations. To perform a buffer write the process
                 449                             ; is as follows:-
                 450                             ;   Write command for buffer write to StrataFLASH memory (E8 hex).
                 451                             ;      Base address for writing should also be set.
                 452                             ;   Read Status register and if not ready repeat command until it is.
                 453                             ;   Write a value specifying the number of bytes to be written LESS ONE.
                 454                             ;      In this program the number of bytes will be specified in register sA
                 455                             ;      and this value needs to be decremented before writing to the memory.
                 456                             ;   Write the correct number of actual data bytes with appropriate addresses.
                 457                             ;      Ideally the addresses do not cross the boundary of 32 locations
                 458                             ;      such that LSBs are always in the range 00000 to 11111 binary.
                 459                             ;      Crossing the boundary is OK but will take longer to program.
                 460                             ;   Write command to confirm operation (D0 hex).
                 461                             ;   Read Status register and wait for ready.
                 462                             ;
                 463                             ;   This routine additionally restores the normal read array mode before returning.
                 464                             ;
                 465                             ; The number of bytes to be written should be supplied in register sA and must be
                 466                             ; a value between 1 and 32 (01 and 20 hex).
                 467                             ;
                 468                             ; The 24-bit base address should be supplied in register set [s9,s8,s7].
                 469                             ; On return, this will be increased by the number of locations written.
                 470                             ;
                 471                             ; Scratch pad memory locations starting at location defined by constant
                 472                             ; 'data_start' should contain the data bytes to be written.
                 473                             ;
                 474                             ; The act of writing the buffer to the memory array may take up to 654us to complete.
                 475                             ; The time taken to program is recorded by register pair [sE,sD]. Each count
                 476                             ; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
                 477                             ;
                 478                             ; Registers used s0,s1,s7,s8,s9,sA,sD,sE
                 479                             ;
                 480                             ;
                 481            SF_buffer_write: LOAD s1, E8                            ;command for buffer write
                 482                             CALL SF_byte_write
                 483                             CALL SF_byte_read                      ;read status register into s0
                 484                             TEST s0, 80                            ;test ready/busy flag
                 485                             JUMP Z, SF_buffer_write                ;repeat command until ready
                 486                             LOAD s1, sA                            ;Specify number of bytes to write
                 487                             SUB s1, 01                             ;one less than actual number!
                 488                             CALL SF_byte_write
                 489                             LOAD s3, data_start                    ;point to data in scratch pad memory
                 490          write_buffer_loop: FETCH s1, (s3)                         ;fetch data
                 491                             CALL SF_byte_write                     ;write to buffer
                 492                             ADD s7, 01                             ;increment address
                 493                             ADDCY s8, 00
                 494                             ADDCY s9, 00
                 495                             ADD s3, 01                             ;increment SPM pointer
                 496                             SUB sA, 01                             ;count bytes remaining
                 497                             JUMP NZ, write_buffer_loop
                 498                             LOAD s1, D0                            ;command to confirm write
                 499                             CALL SF_byte_write
                 500                             CALL wait_SF_ready                     ;wait for program to complete and set read array mode
                 501                             RETURN
                 502                             ;
                 503                             ;
                 504                             ;**************************************************************************************
                 505                             ; Write Command - Write one byte to specified address
                 506                             ;**************************************************************************************
                 507                             ;
                 508              write_command: CALL send_address                      ;obtain 24-bit address 000000 to FFFFFF
                 509                             CALL obtain_8bits
                 510                             JUMP C, write_command                  ;bad input address
                 511                             LOAD s9, s0
                 512                             CALL obtain_8bits
                 513                             JUMP C, write_command                  ;bad input address
                 514                             LOAD s8, s0
                 515                             CALL obtain_8bits
                 516                             JUMP C, write_command                  ;bad input address
                 517                             LOAD s7, s0
                 518                   get_data: CALL send_data                         ;obtain 8-bit data 00 to FF into s0
                 519                             CALL obtain_8bits
                 520                             JUMP C, get_data                       ;bad input data
                 521                             CALL SF_single_byte_write
                 522                             CALL send_CR
                 523                             CALL send_OK
                 524                             JUMP prompt
                 525                             ;
                 526                             ;
                 527                             ;**************************************************************************************
                 528                             ; Write a single byte to StrataFlash Memory
                 529                             ;**************************************************************************************
                 530                             ;
                 531                             ; To write a single byte to StrataFLASH memory the address must be set and the
                 532                             ; single-word/byte program command (40 hex) sent to the memory. Then the data byte can
                 533                             ; be written to the memory using the same address.
                 534                             ;
                 535                             ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 536                             ; Register s0 should contain the byte data to be written to the memory.
                 537                             ;
                 538                             ; The act of writing the memory array may take up to 175us to complete. This routine
                 539                             ; waits for the memory to be ready before restoring the normal read array mode and
                 540                             ; returning. The time taken to program is recorded by register pair [sE,sD]. Each count
                 541                             ; equates to 15 instructions which is equivalent to 30 clock cycles (600ns at 50MHz).
                 542                             ;
                 543                             ; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
                 544                             ;
                 545                             ; Registers used s0,s1,s7,s8,s9
                 546                             ;
                 547       SF_single_byte_write: LOAD s1, 40                            ;command for single byte program
                 548                             CALL SF_byte_write
                 549                             LOAD s1, s0                            ;write data to be programmed
                 550                             CALL SF_byte_write
                 551                             CALL wait_SF_ready                     ;wait for program to complete
                 552                             RETURN
                 553                             ;
                 554                             ;
                 555                             ;**************************************************************************************
                 556                             ;Read Command - Read one page of memory at specified address
                 557                             ;**************************************************************************************
                 558                             ;
                 559               read_command: CALL send_address                      ;obtain 24-bit address 000000 to FFFFFF
                 560                             CALL obtain_8bits                      ;read value from UART
                 561                             JUMP C, read_command                   ;bad input address
                 562                             LOAD s9, s0
                 563                             CALL obtain_8bits
                 564                             JUMP C, read_command                   ;bad input address
                 565                             LOAD s8, s0
                 566                             CALL obtain_8bits
                 567                             JUMP C, read_command                   ;bad input address
                 568                             LOAD s7, s0
                 569                             CALL send_CR
                 570                             CALL send_SF_page
                 571                             CALL send_OK
                 572                             JUMP prompt
                 573                             ;
                 574                             ;The start address should be provided in register set [s9,s8,s7].
                 575                             ;The display will be next 256 bytes displayed as 16 lines of 16 bytes
                 576                             ;with each line commencing with the address of the first byte.
                 577                             ;
                 578               send_SF_page: LOAD s6, 10                            ;16 lines to display
                 579               send_SF_line: CALL send_CR
                 580                             CALL send_hex_3bytes                   ;display address
                 581                             CALL send_space
                 582                             LOAD s5, 10                            ;16 bytes to display on a line
                 583               send_SF_byte: CALL send_space
                 584                             CALL SF_byte_read                      ;read byte into s0
                 585                             ADD s7, 01                             ;increment StrataFLASH address
                 586                             ADDCY s8, 00
                 587                             ADDCY s9, 00
                 588                             CALL send_hex_byte                     ;display byte
                 589                             SUB s5, 01                             ;count bytes per line
                 590                             JUMP NZ, send_SF_byte
                 591                             SUB s6, 01                             ;count lines
                 592                             JUMP NZ, send_SF_line
                 593                             CALL send_CR
                 594                             RETURN
                 595                             ;
                 596                             ;
                 597                             ;**************************************************************************************
                 598                             ; ID Command - Read and display the device information for the StrataFLASH FLASH memory
                 599                             ;**************************************************************************************
                 600                             ;
                 601                             ; Normal response should be
                 602                             ;   Device Manufacturer Code (Intel) = 89 hex
                 603                             ;   Memory ID code for 128Mbit = 18 hex
                 604                             ;
                 605                             ; To read the device information the Read device information command (90)
                 606                             ; must be written to the memory. The information is read back but assumes
                 607                             ; that 16-bit words are being used and hence address bit0 is not really used.
                 608                             ; hence addresses 000000 and 0000001 both return the Device Manufacturer Code and
                 609                             ; addresses 000002 and 0000003 both return the Memory ID code.
                 610                             ;
                 611                             ; After reading the device information the read array command is written to the
                 612                             ; device to put it back to normal read mode.
                 613                             ;
                 614                             ; Registers used s0,s7,s8,s9
                 615                             ;
                 616             SF_information: CALL send_CR                           ;send 'ID=' to terminal
                 617                             CALL send_ID
                 618                             LOAD UART_data, character_equals
                 619                             CALL send_to_UART
                 620                             CALL send_space
                 621                             LOAD s9, 00                            ;define base address 000000
                 622                             LOAD s8, 00
                 623                             LOAD s7, 00
                 624                             LOAD s1, 90                            ;command to read device information
                 625                             CALL SF_byte_write
                 626                             CALL SF_byte_read                      ;read Device Manufacturer Code into s0
                 627                             CALL send_hex_byte                     ;display byte
                 628                             CALL send_space
                 629                             LOAD s7, 02                            ;change address
                 630                             CALL SF_byte_read                      ;read Memory ID code into s0
                 631                             CALL send_hex_byte                     ;display byte
                 632                             CALL send_CR
                 633                             CALL set_SF_read_array_mode            ;restore normal read array mode
                 634                             JUMP prompt
                 635                             ;
                 636                             ;
                 637                             ;**************************************************************************************
                 638                             ; Read StrataFLASH status register
                 639                             ;**************************************************************************************
                 640                             ;
                 641                             ; The main reason for reading the status register is to determine when the memory
                 642                             ; is ready or busy. This information is provided by bit7 (0=busy and 1=ready).
                 643                             ;
                 644                             ; The lower bits all indicate errors of some kind and therefore the only desirable
                 645                             ; response is 00 hex or 80 hex. In this program, no error checking or clearing
                 646                             ; is performed and the way this routine is executed from the menu only 80 hex is
                 647                             ; expected.
                 648                             ;
                 649                             ; To read the status register the read status register command must be written to
                 650                             ; the device. All subsequent reads are then result in the return of the status
                 651                             ; register. A different read command must be written to the device to stop this
                 652                             ; mode.
                 653                             ;
                 654                             ; This mode is also entered automatically when performing program and erase operations.
                 655                             ;
                 656                  SF_status: LOAD s9, 00                            ;define base address 000000
                 657                             LOAD s8, 00
                 658                             LOAD s7, 00
                 659                             LOAD s1, 70                            ;command to read status register
                 660                             CALL SF_byte_write
                 661                             CALL send_CR
                 662                             CALL SF_byte_read                      ;read status register into s0
                 663                             CALL send_hex_byte                     ;display byte
                 664                             CALL send_CR
                 665                             CALL set_SF_read_array_mode
                 666                             JUMP prompt
                 667                             ;
                 668                             ;
                 669                             ;**************************************************************************************
                 670                             ; Read a byte from StrataFlash Memory
                 671                             ;**************************************************************************************
                 672                             ;
                 673                             ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 674                             ; Register s0 will return the byte data retrieved from the memory.
                 675                             ;
                 676                             ; To read a byte, the address needs to be set up on the address lines
                 677                             ; and the controls set as follows
                 678                             ;    SF_read = 1 - disable Spartan data outputs and enable StrataFlash outputs (OE=0)
                 679                             ;      SF_ce = 0 - enable StrataFLASH memory
                 680                             ;      SF_we = 1 - Write enable off
                 681                             ;
                 682                             ; The access time of the memory is 75ns. This is equivalent to 3.75 clock cycles at
                 683                             ; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
                 684                             ; provides adequate delay for the memory to be accessed.
                 685                             ;
                 686                             ; Registers used s0,s1,s7,s8,s9
                 687                             ;
                 688               SF_byte_read: OUTPUT s9, SF_addr_hi_port             ;set 24-bit address
                 689                             OUTPUT s8, SF_addr_mi_port
                 690                             OUTPUT s7, SF_addr_lo_port
                 691                             LOAD s1, 05                            ;set controls
                 692                             OUTPUT s1, SF_control_port
                 693                             LOAD s1, 06                            ;>75ns delay
                 694                             LOAD s1, 06                            ;but do something useful!
                 695                             INPUT s0, SF_data_in_port              ;read data byte
                 696                             OUTPUT s1, SF_control_port             ;clear controls
                 697                             RETURN
                 698                             ;
                 699                             ;
                 700                             ;**************************************************************************************
                 701                             ; Write data or command byte to StrataFlash Memory
                 702                             ;**************************************************************************************
                 703                             ;
                 704                             ; The 24-bit address should be supplied in register set [s9,s8,s7].
                 705                             ; Register s1 should contain the byte to be written to the memory.
                 706                             ;
                 707                             ; To write a byte, the address needs to be set up on the address lines
                 708                             ; and the controls set as follows
                 709                             ;    SF_read = 0 - enable Spartan data outputs and disable StrataFlash outputs (OE=1)
                 710                             ;      SF_ce = 0 - enable StrataFLASH memory
                 711                             ;      SF_we = 0 - Write enable on
                 712                             ;
                 713                             ; The setup time of the memory is 60ns. This is equivalent to 3 clock cycles at
                 714                             ; 50MHz. Since each KCPSM3 instruction takes 2 clock cycles to execute, two instructions
                 715                             ; provides adequate delay for the memory.
                 716                             ;
                 717                             ; Registers used s1,s7,s8,s9
                 718                             ;
                 719              SF_byte_write: OUTPUT s9, SF_addr_hi_port             ;set 24-bit address
                 720                             OUTPUT s8, SF_addr_mi_port
                 721                             OUTPUT s7, SF_addr_lo_port
                 722                             OUTPUT s1, SF_data_out_port            ;set data byte to be written
                 723                             LOAD s1, 00                            ;set controls
                 724                             OUTPUT s1, SF_control_port
                 725                             LOAD s1, 06                            ;>60ns delay
                 726                             LOAD s1, 06                            ;but do something useful!
                 727                             OUTPUT s1, SF_control_port             ;clear controls
                 728                             RETURN
                 729                             ;
                 730                             ;
                 731                             ;**************************************************************************************
                 732                             ; Set 'Read Array' mode on StrataFLASH
                 733                             ;**************************************************************************************
                 734                             ;
                 735                             ; The read array mode is the default mode of the memory and allows the contents
                 736                             ; of the memory to be read based on the supplied address.
                 737                             ;
                 738                             ; Read array is the default mode of the device, but it must also be placed back
                 739                             ; into this mode after programming, erasing or reading the status register.
                 740                             ;
                 741                             ; The read array command (FF hex) is written to the Strata flash memory.
                 742                             ;
                 743                             ; Registers used s1,s7,s8,s9
                 744                             ;
                 745     set_SF_read_array_mode: LOAD s1, FF                            ;command to read array
                 746                             CALL SF_byte_write
                 747                             RETURN
                 748                             ;
                 749                             ;
                 750                             ;**************************************************************************************
                 751                             ; Wait for StrataFLASH to be ready
                 752                             ;**************************************************************************************
                 753                             ;
                 754                             ; This routine will typically be used after instigating a program or erase
                 755                             ; command. It continuously reads the StrataFLASH status register and tests the
                 756                             ; information provided by bit7 which indicates if the memory is busy(0) or ready(1).
                 757                             ; The routine waits for the ready condition before sending a read array command
                 758                             ; which puts the memory back to normal read mode.
                 759                             ;
                 760                             ; During the polling process, a counter formed by register pair [sE,sD] records
                 761                             ; approximately how long the memory is busy. This can be used to evaluate programming
                 762                             ; and erase times if required. The timing loop is 15 instructions which is equivalent
                 763                             ; to 30 clock cycles (600ns at 50MHz)
                 764                             ;
                 765                             ; Registers used s0,s1,s7,s8,s9,sD,sE   (s7,s8,s9 not changed)
                 766                             ;
                 767                             ;
                 768              wait_SF_ready: LOAD sE, 00                            ;clear 16-bit counter timer
                 769                             LOAD sD, 00
                 770               wait_SF_loop: ADD sD, 01                             ;increment counter timer
                 771                             ADDCY sE, 00
                 772                             CALL SF_byte_read                      ;read status register into s0
                 773                             TEST s0, 80                            ;test ready/busy flag
                 774                             JUMP Z, wait_SF_loop
                 775                             CALL set_SF_read_array_mode            ;restore normal read array mode
                 776                             RETURN
                 777                             ;
                 778                             ;
                 779                             ;**************************************************************************************
                 780                             ; Send 16-bit value in register pair [sE,sD] to UART
                 781                             ;**************************************************************************************
                 782                             ;
                 783                             ; In this program the register pair [sE,sD] indicates the programming time of the
                 784                             ; StrataFLASH memory in 600ns increments. This routine can be used to display that
                 785                             ; value if required.
                 786                             ;
                 787         send_counter_timer: CALL send_CR
                 788                             LOAD s0, sE
                 789                             CALL send_hex_byte
                 790                             LOAD s0, sD
                 791                             CALL send_hex_byte
                 792                             CALL send_CR
                 793                             RETURN
                 794                             ;
                 795                             ;
                 796                             ;**************************************************************************************
                 797                             ;Software delay routines
                 798                             ;**************************************************************************************
                 799                             ;
                 800                             ;Delay of 1us.
                 801                             ;
                 802                             ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 803                             ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 804                             ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 805                             ;
                 806                             ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 807                             ;
                 808                             ;Registers used s0
                 809                             ;
                 810                  delay_1us: LOAD s0, delay_1us_constant
                 811                   wait_1us: SUB s0, 01
                 812                             JUMP NZ, wait_1us
                 813                             RETURN
                 814                             ;
                 815                             ;Delay of 40us.
                 816                             ;
                 817                             ;Registers used s0, s1
                 818                             ;
                 819                 delay_40us: LOAD s1, 28                            ;40 x 1us = 40us
                 820                  wait_40us: CALL delay_1us
                 821                             SUB s1, 01
                 822                             JUMP NZ, wait_40us
                 823                             RETURN
                 824                             ;
                 825                             ;
                 826                             ;Delay of 1ms.
                 827                             ;
                 828                             ;Registers used s0, s1, s2
                 829                             ;
                 830                  delay_1ms: LOAD s2, 19                            ;25 x 40us = 1ms
                 831                   wait_1ms: CALL delay_40us
                 832                             SUB s2, 01
                 833                             JUMP NZ, wait_1ms
                 834                             RETURN
                 835                             ;
                 836                             ;Delay of 20ms.
                 837                             ;
                 838                             ;Delay of 20ms used during initialisation.
                 839                             ;
                 840                             ;Registers used s0, s1, s2, s3
                 841                             ;
                 842                 delay_20ms: LOAD s3, 14                            ;20 x 1ms = 20ms
                 843                  wait_20ms: CALL delay_1ms
                 844                             SUB s3, 01
                 845                             JUMP NZ, wait_20ms
                 846                             RETURN
                 847                             ;
                 848                             ;Delay of approximately 1 second.
                 849                             ;
                 850                             ;Registers used s0, s1, s2, s3, s4
                 851                             ;
                 852                   delay_1s: LOAD s4, 14                            ;50 x 20ms = 1000ms
                 853                    wait_1s: CALL delay_20ms
                 854                             SUB s4, 01
                 855                             JUMP NZ, wait_1s
                 856                             RETURN
                 857                             ;
                 858                             ;
                 859                             ;**************************************************************************************
                 860                             ;UART communication routines
                 861                             ;**************************************************************************************
                 862                             ;
                 863                             ;Read one character from the UART
                 864                             ;
                 865                             ;Character read will be returned in a register called 'UART_data'.
                 866                             ;
                 867                             ;The routine first tests the receiver FIFO buffer to see if data is present.
                 868                             ;If the FIFO is empty, the routine waits until there is a character to read.
                 869                             ;As this could take any amount of time the wait loop could include a call to a
                 870                             ;subroutine which performs a useful function.
                 871                             ;
                 872                             ;If the received character is an XOFF, then the routine will then wait
                 873                             ;for an XON to be received. This means that the rest of the program is held
                 874                             ;in suspense and therefore it can not transmit. Once an XON is received, it will
                 875                             ;again wait for a normal character before returning.
                 876                             ;
                 877                             ;NOTE: Characters between the XOFF and XON will be ignored in this version of the
                 878                             ;program!!!
                 879                             ;
                 880                             ;Interrupt is disabled during this routine to prevent a false situation. If the
                 881                             ;receiver half-full flag went High it should result in an interrupt transmitting
                 882                             ;an XOFF character. However, if this routine were able to read the receiver buffer
                 883                             ;at just about the same as the hardware detects the half-full flag, then it could
                 884                             ;think that an XON needs to be transmitted.
                 885                             ;
                 886                             ;
                 887                             ;Registers used s0 and UART_data
                 888                             ;
                 889             read_from_UART: DISABLE INTERRUPT
                 890          wait_Rx_character: INPUT s0, status_port                  ;test Rx_FIFO buffer
                 891                             TEST s0, rx_data_present
                 892                             JUMP NZ, read_character
                 893                             JUMP wait_Rx_character
                 894             read_character: INPUT UART_data, UART_read_port        ;read from FIFO
                 895                             COMPARE UART_data, character_XOFF      ;test for XOFF
                 896                             JUMP Z, wait_XON
                 897                             ENABLE INTERRUPT                       ;normal finish
                 898                             RETURN
                 899                   wait_XON: INPUT s0, status_port                  ;test Rx_FIFO buffer
                 900                             TEST s0, rx_data_present
                 901                             JUMP NZ, read_XON
                 902                             JUMP wait_XON
                 903                   read_XON: INPUT UART_data, UART_read_port        ;read from FIFO
                 904                             COMPARE UART_data, character_XON       ;test for XON
                 905                             JUMP Z, wait_Rx_character              ;now wait for normal character
                 906                             JUMP wait_XON                          ;continue to wait for XON
                 907                             ;
                 908                             ;
                 909                             ;
                 910                             ;Transmit one character to the UART
                 911                             ;
                 912                             ;Character supplied in register called 'UART_data'.
                 913                             ;
                 914                             ;The routine first tests the transmit FIFO buffer is empty.
                 915                             ;If the FIFO currently has any data, the routine waits until it is empty.
                 916                             ;Ultimately this means that only one character is sent at a time which
                 917                             ;could be important if the PC at the other end of the link transmits
                 918                             ;an XOFF and needs the flow of data to terminate as soon as possible.
                 919                             ;
                 920                             ;Registers used s0
                 921                             ;
                 922               send_to_UART: INPUT s0, status_port                  ;test Tx_FIFO buffer
                 923                             TEST s0, tx_data_present
                 924                             JUMP Z, UART_write
                 925                             JUMP send_to_UART
                 926                 UART_write: OUTPUT UART_data, UART_write_port
                 927                             RETURN
                 928                             ;
                 929                             ;
                 930                             ;**************************************************************************************
                 931                             ;Useful ASCII conversion and handling routines
                 932                             ;**************************************************************************************
                 933                             ;
                 934                             ;Convert value provided in register s0 into ASCII characters
                 935                             ;
                 936                             ;The value provided must in the range 0 to 99 and will be converted into
                 937                             ;two ASCII characters.
                 938                             ;     The number of 'tens' will be represented by an ASCII character returned in register s1.
                 939                             ;     The number of 'units' will be represented by an ASCII character returned in register s0.
                 940                             ;
                 941                             ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex added to
                 942                             ;the actual decimal value.
                 943                             ;
                 944                             ;Registers used s0 and s1.
                 945                             ;
                 946           decimal_to_ASCII: LOAD s1, 30                            ;load 'tens' counter with ASCII for '0'
                 947               test_for_ten: ADD s1, 01                             ;increment 'tens' value
                 948                             SUB s0, 0A                             ;try to subtract 10 from the supplied value
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
                 949                             JUMP NC, test_for_ten                  ;repeat if subtraction was possible without underflow.
                 950                             SUB s1, 01                             ;'tens' value one less ten due to underflow
                 951                             ADD s0, 3A                             ;restore units value (the remainder) and convert to ASCII
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
                 952                             RETURN
                 953                             ;
                 954                             ;
                 955                             ;
                 956                             ;Convert character to upper case
                 957                             ;
                 958                             ;The character supplied in register s0.
                 959                             ;If the character is in the range 'a' to 'z', it is converted
                 960                             ;to the equivalent upper case character in the range 'A' to 'Z'.
                 961                             ;All other characters remain unchanged.
                 962                             ;
                 963                             ;Registers used s0.
                 964                             ;
                 965                 upper_case: COMPARE s0, 61                         ;eliminate character codes below 'a' (61 hex)
                 966                             RETURN C
                 967                             COMPARE s0, 7B                         ;eliminate character codes above 'z' (7A hex)
E: identifier cannot start with a digit: `7B'.
E: unexpected end of line.
                 968                             RETURN NC
                 969                             AND s0, DF                             ;mask bit5 to convert to upper case
                 970                             RETURN
                 971                             ;
                 972                             ;
                 973                             ;Convert character '0' to '9' to numerical value in range 0 to 9
                 974                             ;
                 975                             ;The character supplied in register s0. If the character is in the
                 976                             ;range '0' to '9', it is converted to the equivalent decimal value.
                 977                             ;Characters not in the range '0' to '9' are signified by the return
                 978                             ;with the CARRY flag set.
                 979                             ;
                 980                             ;Registers used s0.
                 981                             ;
                 982             1char_to_value: ADD s0, C6                             ;reject character codes above '9' (39 hex)
E: identifier cannot start with a digit: `1char_to_value'.
E: unexpected :.
                 983                             RETURN C                               ;carry flag is set
                 984                             SUB s0, F6                             ;reject character codes below '0' (30 hex)
                 985                             RETURN                                 ;carry is set if value not in range
                 986                             ;
                 987                             ;
                 988                             ;Determine the numerical value of a two character decimal string held in
                 989                             ;scratch pad memory such the result is in the range 0 to 99 (00 to 63 hex).
                 990                             ;
                 991                             ;The string must be stored in two consecutive memory locations and the
                 992                             ;location of the first (tens) character supplied in the s1 register.
                 993                             ;The result is provided in register s2. Strings not using characters in the
                 994                             ;range '0' to '9' are signified by the return with the CARRY flag set.
                 995                             ;
                 996                             ;Registers used s0, s1 and s2.
                 997                             ;
                 998             2char_to_value: FETCH s0, (s1)                         ;read 'tens' character
E: identifier cannot start with a digit: `2char_to_value'.
E: unexpected :.
                 999                             CALL 1char_to_value                    ;convert to numerical value
E: identifier cannot start with a digit: `1char_to_value'.
E: invalid number of operands, instruction CALL takes 1 or 2 operand(s).
000 39000       1000                             RETURN C                               ;bad character - CARRY set
001 00110       1001                             LOAD s2, s0
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
002 14106       1002                             SL0 s2                                 ;multiply 'tens' value by 10 (0A hex)
E: symbol not defined: `S2'.
003 14106       1003                             SL0 s2
E: symbol not defined: `S2'.
004 10110       1004                             ADD s2, s0
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
005 14106       1005                             SL0 s2
E: symbol not defined: `S2'.
006 10110       1006                             ADD s1, 01                             ;read 'units' character
E: symbol not defined: `S1'.
007 0B101       1007                             FETCH s0, (s1)
E: symbol not defined: `S0'.
E: symbol not defined: `S1'.
                1008                             CALL 1char_to_value                    ;convert to numerical value
E: identifier cannot start with a digit: `1char_to_value'.
E: invalid number of operands, instruction CALL takes 1 or 2 operand(s).
008 39000       1009                             RETURN C                               ;bad character - CARRY set
009 10110       1010                             ADD s2, s0                             ;add units to result and clear CARRY flag
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
00A 25000       1011                             RETURN
                1012                             ;
                1013                             ;
                1014                             ;Convert hexadecimal value provided in register s0 into ASCII characters
                1015                             ;
                1016                             ;The value provided must can be any value in the range 00 to FF and will be converted into
                1017                             ;two ASCII characters.
                1018                             ;     The upper nibble will be represented by an ASCII character returned in register s2.
                1019                             ;     The lower nibble will be represented by an ASCII character returned in register s1.
                1020                             ;
                1021                             ;The ASCII representations of '0' to '9' are 30 to 39 hexadecimal which is simply 30 hex
                1022                             ;added to the actual decimal value. The ASCII representations of 'A' to 'F' are 41 to 46
                1023                             ;hexadecimal requiring a further addition of 07 to the 30 already added.
                1024                             ;
                1025                             ;Registers used s0, s1 and s2.
                1026                             ;
00B 00110       1027          hex_byte_to_ASCII: LOAD s1, s0                            ;remember value supplied
E: symbol not defined: `S1'.
E: symbol not defined: `S0'.
00C 1410E       1028                             SR0 s0                                 ;isolate upper nibble
E: symbol not defined: `S0'.
00D 1410E       1029                             SR0 s0
E: symbol not defined: `S0'.
00E 1410E       1030                             SR0 s0
E: symbol not defined: `S0'.
00F 1410E       1031                             SR0 s0
E: symbol not defined: `S0'.
010 20001       1032                             CALL hex_to_ASCII                      ;convert
E: symbol not defined: `HEX_TO_ASCII'.
011 00110       1033                             LOAD s2, s0                            ;upper nibble value in s2
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
012 00110       1034                             LOAD s0, s1                            ;restore complete value
E: symbol not defined: `S0'.
E: symbol not defined: `S1'.
                1035                             AND s0, 0F                             ;isolate lower nibble
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
013 20001       1036                             CALL hex_to_ASCII                      ;convert
E: symbol not defined: `HEX_TO_ASCII'.
014 00110       1037                             LOAD s1, s0                            ;lower nibble value in s1
E: symbol not defined: `S1'.
E: symbol not defined: `S0'.
015 25000       1038                             RETURN
                1039                             ;
                1040                             ;Convert hexadecimal value provided in register s0 into ASCII character
                1041                             ;
                1042                             ;Register used s0
                1043                             ;
                1044               hex_to_ASCII: SUB s0, 0A                             ;test if value is in range 0 to 9
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
016 3A001       1045                             JUMP C, number_char
E: symbol not defined: `NUMBER_CHAR'.
017 10170       1046                             ADD s0, 07                             ;ASCII char A to F in range 41 to 46
E: symbol not defined: `S0'.
                1047                number_char: ADD s0, 3A                             ;ASCII char 0 to 9 in range 30 to 40
E: identifier cannot start with a digit: `3A'.
E: unexpected end of line.
018 25000       1048                             RETURN
                1049                             ;
                1050                             ;
                1051                             ;Send the two character HEX value of the register contents 's0' to the UART
                1052                             ;
                1053                             ;Registers used s0, s1, s2
                1054                             ;
019 2000B       1055              send_hex_byte: CALL hex_byte_to_ASCII
01A 00110       1056                             LOAD UART_data, s2
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `S2'.
01B 20001       1057                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
01C 00110       1058                             LOAD UART_data, s1
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `S1'.
01D 20001       1059                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
01E 25000       1060                             RETURN
                1061                             ;
                1062                             ;
                1063                             ;
                1064                             ;Send the six character HEX value of the register contents [s9,s8,s7] to the UART
                1065                             ;
                1066                             ;Registers used s0, s1, s2
                1067                             ;
01F 00110       1068            send_hex_3bytes: LOAD s0, s9
E: symbol not defined: `S0'.
E: symbol not defined: `S9'.
020 20019       1069                             CALL send_hex_byte
021 00110       1070                             LOAD s0, s8
E: symbol not defined: `S0'.
E: symbol not defined: `S8'.
022 20019       1071                             CALL send_hex_byte
023 00110       1072                             LOAD s0, s7
E: symbol not defined: `S0'.
E: symbol not defined: `S7'.
024 20019       1073                             CALL send_hex_byte
025 25000       1074                             RETURN
                1075                             ;
                1076                             ;
                1077                             ;Convert the HEX ASCII characters contained in 's3' and 's2' into
                1078                             ;an equivalent hexadecimal value in register 's0'.
                1079                             ;     The upper nibble is represented by an ASCII character in register s3.
                1080                             ;     The lower nibble is represented by an ASCII character in register s2.
                1081                             ;
                1082                             ;Input characters must be in the range 00 to FF hexadecimal or the CARRY flag
                1083                             ;will be set on return.
                1084                             ;
                1085                             ;Registers used s0, s2 and s3.
                1086                             ;
026 00110       1087          ASCII_byte_to_hex: LOAD s0, s3                            ;Take upper nibble
E: symbol not defined: `S0'.
E: symbol not defined: `S3'.
027 20033       1088                             CALL ASCII_to_hex                      ;convert to value
028 39000       1089                             RETURN C                               ;reject if out of range
029 00110       1090                             LOAD s3, s0                            ;remember value
E: symbol not defined: `S3'.
E: symbol not defined: `S0'.
02A 14106       1091                             SL0 s3                                 ;multiply value by 16 to put in upper nibble
E: symbol not defined: `S3'.
02B 14106       1092                             SL0 s3
E: symbol not defined: `S3'.
02C 14106       1093                             SL0 s3
E: symbol not defined: `S3'.
02D 14106       1094                             SL0 s3
E: symbol not defined: `S3'.
02E 00110       1095                             LOAD s0, s2                            ;Take lower nibble
E: symbol not defined: `S0'.
E: symbol not defined: `S2'.
02F 20033       1096                             CALL ASCII_to_hex                      ;convert to value
030 39000       1097                             RETURN C                               ;reject if out of range
031 04110       1098                             OR s0, s3                              ;merge in the upper nibble with CARRY reset
E: symbol not defined: `S0'.
E: symbol not defined: `S3'.
032 25000       1099                             RETURN
                1100                             ;
                1101                             ;
                1102                             ;Routine to convert ASCII data in 's0' to an equivalent HEX value.
                1103                             ;
                1104                             ;If character is not valid for hex, then CARRY is set on return.
                1105                             ;
                1106                             ;Register used s0
                1107                             ;
033 10110       1108               ASCII_to_hex: ADD s0, B9                             ;test for above ASCII code 46 ('F')
E: symbol not defined: `S0'.
E: symbol not defined: `B9'.
034 39000       1109                             RETURN C
035 18110       1110                             SUB s0, E9                             ;normalise 0 to 9 with A-F in 11 to 16 hex
E: symbol not defined: `S0'.
E: symbol not defined: `E9'.
036 39000       1111                             RETURN C                               ;reject below ASCII code 30 ('0')
037 181B0       1112                             SUB s0, 11                             ;isolate A-F down to 00 to 05 hex
E: symbol not defined: `S0'.
038 3E001       1113                             JUMP NC, ASCII_letter
E: symbol not defined: `ASCII_LETTER'.
039 10170       1114                             ADD s0, 07                             ;test for above ASCII code 46 ('F')
E: symbol not defined: `S0'.
03A 39000       1115                             RETURN C
03B 18110       1116                             SUB s0, F6                             ;convert to range 00 to 09
E: symbol not defined: `S0'.
E: symbol not defined: `F6'.
03C 25000       1117                             RETURN
                1118               ASCII_letter: ADD s0, 0A                             ;convert to range 0A to 0F
E: identifier cannot start with a digit: `0A'.
E: unexpected end of line.
03D 25000       1119                             RETURN
                1120                             ;
                1121                             ;
                1122                             ;Read two hex characters from UART and convert to single byte data
                1123                             ;
03E 20001       1124               obtain_8bits: CALL read_upper_case                   ;obtain one byte from UART
E: symbol not defined: `READ_UPPER_CASE'.
03F 00110       1125                             LOAD s3, s0
E: symbol not defined: `S3'.
E: symbol not defined: `S0'.
040 20001       1126                             CALL read_upper_case
E: symbol not defined: `READ_UPPER_CASE'.
041 00110       1127                             LOAD s2, s0
E: symbol not defined: `S2'.
E: symbol not defined: `S0'.
042 20026       1128                             CALL ASCII_byte_to_hex
043 25000       1129                             RETURN
                1130                             ;
                1131                             ;**************************************************************************************
                1132                             ;Text messages
                1133                             ;**************************************************************************************
                1134                             ;
                1135                             ;
                1136                             ;Send Carriage Return to the UART
                1137                             ;
044 00110       1138                    send_CR: LOAD UART_data, character_CR
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_CR'.
045 20001       1139                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
046 25000       1140                             RETURN
                1141                             ;
                1142                             ;Send a space to the UART
                1143                             ;
047 00110       1144                 send_space: LOAD UART_data, character_space
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_SPACE'.
048 20001       1145                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
049 25000       1146                             RETURN
                1147                             ;
                1148                             ;
                1149                             ;Send 'PicoBlaze NOR FLASH Programmer' string to the UART
                1150                             ;
04A 20044       1151               send_welcome: CALL send_CR
04B 20044       1152                             CALL send_CR
04C 00110       1153                             LOAD UART_data, character_P
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_P'.
04D 20001       1154                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
04E 00110       1155                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
04F 20001       1156                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
050 00110       1157                             LOAD UART_data, character_c
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_C'.
051 20001       1158                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
052 00110       1159                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
053 20001       1160                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
054 00110       1161                             LOAD UART_data, character_B
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_B'.
055 20001       1162                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
056 00110       1163                             LOAD UART_data, character_l
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_L'.
057 20001       1164                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
058 00110       1165                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
059 20001       1166                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
05A 00110       1167                             LOAD UART_data, character_z
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_Z'.
05B 20001       1168                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
05C 00110       1169                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
05D 20001       1170                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
05E 20047       1171                             CALL send_space
05F 00110       1172                             LOAD UART_data, character_N
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_N'.
060 20001       1173                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
061 00110       1174                             LOAD UART_data, character_O
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
062 20001       1175                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
063 00110       1176                             LOAD UART_data, character_R
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
064 20001       1177                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
065 20047       1178                             CALL send_space
066 00110       1179                             LOAD UART_data, character_F
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_F'.
067 20001       1180                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
068 00110       1181                             LOAD UART_data, character_L
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_L'.
069 20001       1182                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
06A 00110       1183                             LOAD UART_data, character_A
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
06B 20001       1184                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
06C 00110       1185                             LOAD UART_data, character_S
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
06D 20001       1186                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
06E 00110       1187                             LOAD UART_data, character_H
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_H'.
06F 20001       1188                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
070 20047       1189                             CALL send_space
071 00110       1190                             LOAD UART_data, character_P
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_P'.
072 20001       1191                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
073 00110       1192                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
074 20001       1193                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
075 00110       1194                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
076 20001       1195                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
077 00110       1196                             LOAD UART_data, character_g
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_G'.
078 20001       1197                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
079 00110       1198                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
07A 20001       1199                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
07B 00110       1200                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
07C 20001       1201                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
07D 00110       1202                             LOAD UART_data, character_m
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_M'.
07E 20001       1203                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
07F 00110       1204                             LOAD UART_data, character_m
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_M'.
080 20001       1205                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
081 00110       1206                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
082 20001       1207                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
083 00110       1208                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
084 20001       1209                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
085 20047       1210                             CALL send_space
086 00110       1211                             LOAD UART_data, character_v
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_V'.
087 20001       1212                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
088 00110       1213                             LOAD UART_data, character_1
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_1'.
089 20001       1214                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
08A 00110       1215                             LOAD UART_data, character_fullstop
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_FULLSTOP'.
08B 20001       1216                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
08C 00110       1217                             LOAD UART_data, character_0
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_0'.
08D 20001       1218                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
08E 00110       1219                             LOAD UART_data, character_0
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_0'.
08F 20001       1220                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
090 20044       1221                             CALL send_CR
091 20044       1222                             CALL send_CR
092 25000       1223                             RETURN
                1224                             ;
                1225                             ;
                1226                             ;
                1227                             ;Send 'Waiting_MCS_file' string to the UART
                1228                             ;
093 00110       1229      send_Waiting_MCS_file: LOAD UART_data, character_W
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_W'.
094 20001       1230                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
095 00110       1231                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
096 20001       1232                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
097 00110       1233                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
098 20001       1234                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
099 00110       1235                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
09A 20001       1236                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
09B 00110       1237                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
09C 20001       1238                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
09D 00110       1239                             LOAD UART_data, character_n
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_N'.
09E 20001       1240                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
09F 00110       1241                             LOAD UART_data, character_g
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_G'.
0A0 20001       1242                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0A1 20047       1243                             CALL send_space
0A2 00110       1244                             LOAD UART_data, character_f
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_F'.
0A3 20001       1245                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0A4 00110       1246                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
0A5 20001       1247                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0A6 00110       1248                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
0A7 20001       1249                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0A8 20047       1250              send_MCS_file: CALL send_space
0A9 00110       1251                             LOAD UART_data, character_M
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_M'.
0AA 20001       1252                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0AB 00110       1253                             LOAD UART_data, character_C
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_C'.
0AC 20001       1254                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0AD 00110       1255                             LOAD UART_data, character_S
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
0AE 20001       1256                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0AF 20047       1257                             CALL send_space
0B0 00110       1258                             LOAD UART_data, character_F
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_F'.
0B1 20001       1259                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0B2 00110       1260                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
0B3 20001       1261                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0B4 00110       1262                             LOAD UART_data, character_l
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_L'.
0B5 20001       1263                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0B6 00110       1264                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
0B7 20001       1265                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0B8 20044       1266                             CALL send_CR
0B9 25000       1267                             RETURN
                1268                             ;
                1269                             ;
                1270                             ;Send 'Erase in progress' string to the UART
                1271                             ;
0BA 200D1       1272     send_Erase_in_progress: CALL send_Erase
0BB 00110       1273                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
0BC 20001       1274                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0BD 00110       1275                             LOAD UART_data, character_n
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_N'.
0BE 20001       1276                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0BF 20047       1277                             CALL send_space
0C0 00110       1278                             LOAD UART_data, character_P
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_P'.
0C1 20001       1279                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0C2 00110       1280                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
0C3 20001       1281                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0C4 00110       1282                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
0C5 20001       1283                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0C6 00110       1284                             LOAD UART_data, character_g
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_G'.
0C7 20001       1285                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0C8 00110       1286                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
0C9 20001       1287                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0CA 00110       1288                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
0CB 20001       1289                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0CC 00110       1290                             LOAD UART_data, character_s
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
0CD 20001       1291                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0CE 20001       1292                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0CF 20044       1293                             CALL send_CR
0D0 25000       1294                             RETURN
                1295                             ;
                1296                             ;
                1297                             ;Send 'Erase ' string to the UART
                1298                             ;
0D1 00110       1299                 send_Erase: LOAD UART_data, character_E
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
0D2 20001       1300                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0D3 00110       1301                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
0D4 20001       1302                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0D5 00110       1303                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
0D6 20001       1304                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0D7 00110       1305                             LOAD UART_data, character_s
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
0D8 20001       1306                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0D9 00110       1307                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
0DA 20001       1308                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0DB 20047       1309                             CALL send_space
0DC 25000       1310                             RETURN
                1311                             ;
                1312                             ;
                1313                             ;Send carriage return, 'OK' and carriage return to the UART
                1314                             ;
0DD 20044       1315                    send_OK: CALL send_CR
0DE 00110       1316                             LOAD UART_data, character_O
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
0DF 20001       1317                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0E0 00110       1318                             LOAD UART_data, character_K
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_K'.
0E1 20001       1319                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0E2 20044       1320                             CALL send_CR
0E3 25000       1321                             RETURN
                1322                             ;
                1323                             ;
                1324                             ;
                1325                             ;Send menu to the UART
                1326                             ;
0E4 20044       1327                  send_Menu: CALL send_CR
0E5 00110       1328                             LOAD UART_data, character_E
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
0E6 20001       1329                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0E7 00110       1330                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
0E8 20001       1331                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0E9 200D1       1332                             CALL send_Erase
0EA 00110       1333                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
0EB 20001       1334                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0EC 00110       1335                             LOAD UART_data, character_l
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_L'.
0ED 20001       1336                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0EE 20001       1337                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0EF 20044       1338                             CALL send_CR
0F0 00110       1339                             LOAD UART_data, character_B
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_B'.
0F1 20001       1340                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0F2 00110       1341                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
0F3 20001       1342                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0F4 200D1       1343                             CALL send_Erase
0F5 00110       1344                             LOAD UART_data, character_b
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_B'.
0F6 20001       1345                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0F7 00110       1346                             LOAD UART_data, character_l
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_L'.
0F8 20001       1347                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0F9 00110       1348                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
0FA 20001       1349                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0FB 00110       1350                             LOAD UART_data, character_c
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_C'.
0FC 20001       1351                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0FD 00110       1352                             LOAD UART_data, character_k
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_K'.
0FE 20001       1353                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
0FF 00110       1354                             LOAD UART_data, character_s
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
100 20001       1355                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
101 20047       1356                             CALL send_space
102 00110       1357                             LOAD UART_data, character_1
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_1'.
103 20001       1358                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
104 00110       1359                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
105 20001       1360                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
106 00110       1361                             LOAD UART_data, character_3
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_3'.
107 20001       1362                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
108 20044       1363                             CALL send_CR
109 00110       1364                             LOAD UART_data, character_P
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_P'.
10A 20001       1365                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
10B 00110       1366                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
10C 20001       1367                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
10D 00110       1368                             LOAD UART_data, character_P
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_P'.
10E 20001       1369                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
10F 00110       1370                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
110 20001       1371                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
111 00110       1372                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
112 20001       1373                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
113 00110       1374                             LOAD UART_data, character_g
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_G'.
114 20001       1375                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
115 00110       1376                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
116 20001       1377                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
117 00110       1378                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
118 20001       1379                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
119 00110       1380                             LOAD UART_data, character_m
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_M'.
11A 20001       1381                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
11B 200A8       1382                             CALL send_MCS_file
11C 00110       1383                             LOAD UART_data, character_W
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_W'.
11D 20001       1384                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
11E 00110       1385                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
11F 20001       1386                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
120 00110       1387                             LOAD UART_data, character_W
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_W'.
121 20001       1388                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
122 00110       1389                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
123 20001       1390                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
124 00110       1391                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
125 20001       1392                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
126 00110       1393                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
127 20001       1394                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
128 00110       1395                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
129 20001       1396                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
12A 20047       1397                             CALL send_space
12B 2017C       1398                             CALL send_byte
12C 20044       1399                             CALL send_CR
12D 00110       1400                             LOAD UART_data, character_R
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
12E 20001       1401                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
12F 00110       1402                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
130 20001       1403                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
131 00110       1404                             LOAD UART_data, character_R
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
132 20001       1405                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
133 00110       1406                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
134 20001       1407                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
135 00110       1408                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
136 20001       1409                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
137 00110       1410                             LOAD UART_data, character_d
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_D'.
138 20001       1411                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
139 20047       1412                             CALL send_space
13A 00110       1413                             LOAD UART_data, character_2
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_2'.
13B 20001       1414                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
13C 00110       1415                             LOAD UART_data, character_5
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_5'.
13D 20001       1416                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
13E 00110       1417                             LOAD UART_data, character_6
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_6'.
13F 20001       1418                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
140 20047       1419                             CALL send_space
141 2017C       1420                             CALL send_byte
142 00110       1421                             LOAD UART_data, character_s
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
143 20001       1422                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
144 20044       1423                             CALL send_CR
145 00110       1424                             LOAD UART_data, character_I
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
146 20001       1425                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
147 00110       1426                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
148 20001       1427                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
149 00110       1428                             LOAD UART_data, character_D
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_D'.
14A 20001       1429                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
14B 00110       1430                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
14C 20001       1431                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
14D 00110       1432                             LOAD UART_data, character_v
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_V'.
14E 20001       1433                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
14F 00110       1434                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
150 20001       1435                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
151 00110       1436                             LOAD UART_data, character_c
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_C'.
152 20001       1437                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
153 00110       1438                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
154 20001       1439                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
155 20047       1440                             CALL send_space
156 20177       1441                             CALL send_ID
157 20044       1442                             CALL send_CR
158 00110       1443                             LOAD UART_data, character_H
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_H'.
159 20001       1444                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
15A 00110       1445                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
15B 20001       1446                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
15C 00110       1447                             LOAD UART_data, character_H
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_H'.
15D 20001       1448                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
15E 00110       1449                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
15F 20001       1450                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
160 00110       1451                             LOAD UART_data, character_l
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_L'.
161 20001       1452                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
162 00110       1453                             LOAD UART_data, character_p
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_P'.
163 20001       1454                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
164 20044       1455                             CALL send_CR
165 00110       1456                             LOAD UART_data, character_S
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
166 20001       1457                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
167 00110       1458                             LOAD UART_data, character_minus
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_MINUS'.
168 20001       1459                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
169 00110       1460                             LOAD UART_data, character_S
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
16A 20001       1461                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
16B 00110       1462                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
16C 20001       1463                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
16D 00110       1464                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
16E 20001       1465                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
16F 00110       1466                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
170 20001       1467                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
171 00110       1468                             LOAD UART_data, character_u
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_U'.
172 20001       1469                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
173 00110       1470                             LOAD UART_data, character_s
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
174 20001       1471                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
175 20044       1472                             CALL send_CR
176 25000       1473                             RETURN
                1474                             ;
                1475                             ;
                1476                             ;Send 'ID' to the UART
                1477                             ;
177 00110       1478                    send_ID: LOAD UART_data, character_I
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
178 20001       1479                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
179 00110       1480                             LOAD UART_data, character_D
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_D'.
17A 20001       1481                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
17B 25000       1482                             RETURN
                1483                             ;
                1484                             ;
                1485                             ;Send 'byte' to the UART
                1486                             ;
17C 00110       1487                  send_byte: LOAD UART_data, character_b
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_B'.
17D 20001       1488                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
17E 00110       1489                             LOAD UART_data, character_y
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_Y'.
17F 20001       1490                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
180 00110       1491                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
181 20001       1492                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
182 00110       1493                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
183 20001       1494                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
184 25000       1495                             RETURN
                1496                             ;
                1497                             ;
                1498                             ;Send 'Confirm Erase (Y/n) ' to the UART
                1499                             ;
185 20044       1500               send_Confirm: CALL send_CR
186 00110       1501                             LOAD UART_data, character_C
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_C'.
187 20001       1502                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
188 00110       1503                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
189 20001       1504                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
18A 00110       1505                             LOAD UART_data, character_n
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_N'.
18B 20001       1506                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
18C 00110       1507                             LOAD UART_data, character_f
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_F'.
18D 20001       1508                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
18E 00110       1509                             LOAD UART_data, character_i
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_I'.
18F 20001       1510                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
190 00110       1511                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
191 20001       1512                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
192 00110       1513                             LOAD UART_data, character_m
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_M'.
193 20001       1514                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
194 20047       1515                             CALL send_space
195 200D1       1516                             CALL send_Erase
196 00110       1517                             LOAD UART_data, character_open
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_OPEN'.
197 20001       1518                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
198 00110       1519                             LOAD UART_data, character_Y
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_Y'.
199 20001       1520                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
19A 00110       1521                             LOAD UART_data, character_divide
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_DIVIDE'.
19B 20001       1522                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
19C 00110       1523                             LOAD UART_data, character_n
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_N'.
19D 20001       1524                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
19E 00110       1525                             LOAD UART_data, character_close
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_CLOSE'.
19F 20001       1526                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1A0 20047       1527                             CALL send_space
1A1 25000       1528                             RETURN
                1529                             ;
                1530                             ;
                1531                             ;Send 'Abort' to the UART
                1532                             ;
1A2 20044       1533                 send_Abort: CALL send_CR
1A3 00110       1534                             LOAD UART_data, character_A
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
1A4 20001       1535                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1A5 00110       1536                             LOAD UART_data, character_b
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_B'.
1A6 20001       1537                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1A7 00110       1538                             LOAD UART_data, character_o
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_O'.
1A8 20001       1539                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1A9 00110       1540                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
1AA 20001       1541                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1AB 00110       1542                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
1AC 20001       1543                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1AD 20044       1544                             CALL send_CR
1AE 25000       1545                             RETURN
                1546                             ;
                1547                             ;Send 'address=' to the UART
                1548                             ;
1AF 20044       1549               send_address: CALL send_CR
1B0 00110       1550                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
1B1 20001       1551                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1B2 00110       1552                             LOAD UART_data, character_d
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_D'.
1B3 20001       1553                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1B4 20001       1554                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1B5 00110       1555                             LOAD UART_data, character_r
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_R'.
1B6 20001       1556                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1B7 00110       1557                             LOAD UART_data, character_e
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_E'.
1B8 20001       1558                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1B9 00110       1559                             LOAD UART_data, character_s
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_S'.
1BA 20001       1560                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1BB 20001       1561                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1BC 00110       1562                send_equals: LOAD UART_data, character_equals
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_EQUALS'.
1BD 20001       1563                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1BE 25000       1564                             RETURN
                1565                             ;
                1566                             ;
                1567                             ;Send 'data=' to the UART
                1568                             ;
1BF 20044       1569                  send_data: CALL send_CR
1C0 00110       1570                             LOAD UART_data, character_d
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_D'.
1C1 20001       1571                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1C2 00110       1572                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
1C3 20001       1573                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1C4 00110       1574                             LOAD UART_data, character_t
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_T'.
1C5 20001       1575                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1C6 00110       1576                             LOAD UART_data, character_a
E: symbol not defined: `UART_DATA'.
E: symbol not defined: `CHARACTER_A'.
1C7 20001       1577                             CALL send_to_UART
E: symbol not defined: `SEND_TO_UART'.
1C8 221BC       1578                             JUMP send_equals
                1579                             ;
                1580                             ;
                1581                             ;**************************************************************************************
                1582                             ;Interrupt Service Routine (ISR)
                1583                             ;**************************************************************************************
                1584                             ;
                1585                             ;An interrupt occurs whenever the status of the UART receiver FIFO 'half_full' flag
                1586                             ;changes.
                1587                             ;
                1588                             ;A change from Low to High means that the buffer is becoming full and therefore
                1589                             ;an XOFF character must be transmitted.
                1590                             ;
                1591                             ;A change from High to Low means that the buffer is starting to empty and therefore
                1592                             ;an XON character can be transmitted to restart the flow of new characters.
                1593                             ;
                1594                             ;
                1595                             ADDRESS 3F5                            ;place at end of memory to keep separate
E: identifier cannot start with a digit: `3F5'.
E: directive ADDRESS requires a single argument.
1C9 2F101       1596                        ISR: STORE s0, ISR_preserve_s0              ;preserve register contents
E: symbol not defined: `S0'.
E: symbol not defined: `ISR_PRESERVE_S0'.
1CA 09101       1597                             INPUT s0, status_port                  ;test 'half_full' status of receiver buffer.
E: symbol not defined: `S0'.
E: symbol not defined: `STATUS_PORT'.
1CB 0C110       1598                             TEST s0, rx_half_full
E: symbol not defined: `S0'.
E: symbol not defined: `RX_HALF_FULL'.
1CC 321CF       1599                             JUMP Z, isr_send_xon
1CD 00110       1600                             LOAD s0, character_XOFF
E: symbol not defined: `S0'.
E: symbol not defined: `CHARACTER_XOFF'.
1CE 221D0       1601                             JUMP isr_send_character
1CF 00110       1602               isr_send_xon: LOAD s0, character_XON
E: symbol not defined: `S0'.
E: symbol not defined: `CHARACTER_XON'.
1D0 2D101       1603         isr_send_character: OUTPUT s0, UART_write_port
E: symbol not defined: `S0'.
E: symbol not defined: `UART_WRITE_PORT'.
1D1 0B101       1604                             FETCH s0, ISR_preserve_s0              ;restore register contents
E: symbol not defined: `S0'.
E: symbol not defined: `ISR_PRESERVE_S0'.
1D2 29001       1605                             RETURNI ENABLE
                1606                             ;
                1607                             ;
                1608                             ;**************************************************************************************
                1609                             ;Interrupt Vector
                1610                             ;**************************************************************************************
                1611                             ;
                1612                             ADDRESS 3FF
E: identifier cannot start with a digit: `3FF'.
E: directive ADDRESS requires a single argument.
1D3 221C9       1613                             JUMP ISR
                1614                             ;
                1615                             ;
