                   1                       ;KCPSM3 Program - SPI Control of D/A converter on Spartan-3E Starter Kit.
                   2                       ;
                   3                       ;
                   4                       ;Ken Chapman - Xilinx Ltd
                   5                       ;
                   6                       ;Version v1.00 - 24th November 2005
                   7                       ;
                   8                       ;This program uses an 8KHz interrupt to generate test waveforms on the
                   9                       ;4 analogue outputs provided by the Linear Technology LTC2624 device.
                  10                       ;
                  11                       ;As well as the port connections vital to communication with the UART and the SPI
                  12                       ;FLASH memory, there are additional port connections used to disable the other
                  13                       ;devices sharing the SPI bus on the Starter Kit board. Although these could have been
                  14                       ;controlled at the hardware level, they are included in this code to aid
                  15                       ;future investigations of communication with the other SPI devices using PicoBlaze.
                  16                       ;
                  17                       ;Connections to the LEDs, switches and press buttons are provided to aid
                  18                       ;development and enable further experiments. Otherwise know as having fun!
                  19                       ;
                  20                       ;Port definitions
                  21                       ;
                  22                       ;
  00008           23                       CONSTANT SPI_control_port, 08   ;SPI clock and chip selects
  00001           24                       CONSTANT SPI_sck, 01            ;                  SCK - bit0
  00002           25                       CONSTANT SPI_rom_cs, 02         ;    serial rom select - bit1
  00004           26                       CONSTANT SPI_spare_control, 04  ;                spare - bit2
  00008           27                       CONSTANT SPI_amp_cs, 08         ;     amplifier select - bit3
  0000A           28                       CONSTANT SPI_adc_conv, 10       ;          A/D convert - bit4
  00014           29                       CONSTANT SPI_dac_cs, 20         ;           D/A select - bit5
  00028           30                       CONSTANT SPI_amp_shdn, 40       ;       amplifier SHDN - bit6
  00050           31                       CONSTANT SPI_dac_clr, 80        ;            D/A clear - bit7
                  32                       ;
  00004           33                       CONSTANT SPI_output_port, 04    ;SPI data output
  00050           34                       CONSTANT SPI_sdo, 80            ;   SDO - bit7
                  35                       ;
  00001           36                       CONSTANT SPI_input_port, 01     ;SPI data input
  00050           37                       CONSTANT SPI_sdi, 80            ;             SDI - bit7
  00028           38                       CONSTANT SPI_amp_sdi, 40        ;   amplifier SDI - bit6
                  39                       ;
                  40                       ;
  00050           41                       CONSTANT LED_port, 80           ;8 simple LEDs
  00001           42                       CONSTANT LED0, 01               ;     LED 0 - bit0
  00002           43                       CONSTANT LED1, 02               ;         1 - bit1
  00004           44                       CONSTANT LED2, 04               ;         2 - bit2
  00008           45                       CONSTANT LED3, 08               ;         3 - bit3
  0000A           46                       CONSTANT LED4, 10               ;         4 - bit4
  00014           47                       CONSTANT LED5, 20               ;         5 - bit5
  00028           48                       CONSTANT LED6, 40               ;         6 - bit6
  00050           49                       CONSTANT LED7, 80               ;         7 - bit7
                  50                       ;
                  51                       ;
  00000           52                       CONSTANT switch_port, 00        ;Read switches and press buttons
  00001           53                       CONSTANT BTN_north, 01          ;  Buttons     North - bit0
  00002           54                       CONSTANT BTN_east, 02           ;               East - bit1
  00004           55                       CONSTANT BTN_south, 04          ;              South - bit2
  00008           56                       CONSTANT BTN_west, 08           ;               West - bit3
  0000A           57                       CONSTANT switch0, 10            ;  Switches        0 - bit4
  00014           58                       CONSTANT switch1, 20            ;                  1 - bit5
  00028           59                       CONSTANT switch2, 40            ;                  2 - bit6
  00050           60                       CONSTANT switch3, 80            ;                  3 - bit7
                  61                       ;
                  62                       ;
                  63                       ;
                  64                       ;
                  65                       ;Special Register usage
                  66                       ;
                  67                       ;
                  68                       ;Useful data constants
                  69                       ;
                  70                       ;
                  71                       ;Constant to define a software delay of 1us. This must be adjusted to reflect the
                  72                       ;clock applied to KCPSM3. Every instruction executes in 2 clock cycles making the
                  73                       ;calculation highly predictable. The '6' in the following equation even allows for
                  74                       ;'CALL delay_1us' instruction in the initiating code.
                  75                       ;
                  76                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                  77                       ;
                  78                       ;Example: For a 50MHz clock the constant value is (10-6)/4 = 11  (0B Hex).
                  79                       ;For clock rates below 10MHz the value of 1 must be used and the operation will
                  80                       ;become lower than intended.
                  81                       ;
  00000           82                       CONSTANT delay_1us_constant, 0B
                  83                       ;
                  84                       ;
                  85                       ;
                  86                       ;
                  87                       ;
                  88                       ;
                  89                       ;Scratch Pad Memory Locations
                  90                       ;
                  91                       ;Values to be written to the D/A converter
                  92                       ;
                  93                       ;
  00000           94                       CONSTANT chan_A_lsb, 00         ;Channel A value LS-Byte
  00001           95                       CONSTANT chan_A_msb, 01         ;                MS-Byte
                  96                       ;
  00002           97                       CONSTANT chan_B_lsb, 02         ;Channel B value LS-Byte
  00003           98                       CONSTANT chan_B_msb, 03         ;                MS-Byte
                  99                       ;
  00004          100                       CONSTANT chan_C_lsb, 04         ;Channel C value LS-Byte
  00005          101                       CONSTANT chan_C_msb, 05         ;                MS-Byte
                 102                       ;
  00006          103                       CONSTANT chan_D_lsb, 06         ;Channel D value LS-Byte
  00007          104                       CONSTANT chan_D_msb, 07         ;                MS-Byte
                 105                       ;
                 106                       ;
                 107                       ;Value used to synthesise a triangle wave
                 108                       ;
  00008          109                       CONSTANT triangle_up_down, 08   ;Determines up or down slope
                 110                       ;
                 111                       ;Value used to synthesise a square wave
                 112                       ;
  00009          113                       CONSTANT square_count, 09       ;Counts samples in square wave
                 114                       ;
                 115                       ;
                 116                       ;Values used to synthesise a sine wave
                 117                       ;
  0000A          118                       CONSTANT sine_y_lsb, 10         ;Sine wave value LS-Byte
  0000B          119                       CONSTANT sine_y_msb, 11         ;                 MS-Byte
  0000C          120                       CONSTANT sine_y1_lsb, 12        ;Sine wave delayed LS-Byte
  0000D          121                       CONSTANT sine_y1_msb, 13        ;                  MS-Byte
  0000E          122                       CONSTANT sine_k_lsb, 14         ;Sine constant LS-Byte
  0000F          123                       CONSTANT sine_k_msb, 15         ;              MS-Byte
                 124                       ;
                 125                       ;
                 126                       ;Sample counter used to give activity indication on LEDs
                 127                       ;
  00014          128                       CONSTANT sample_count_lsb, 20   ;16-bit counter LS-Byte
  00015          129                       CONSTANT sample_count_msb, 21   ;               MS-Byte
                 130                       ;
                 131                       ;Initialise the system
                 132                       ;
                 133                       ;
000 20075        134           cold_start: CALL SPI_init                   ;initialise SPI bus ports
001 20050        135                       CALL init_sine_wave             ;initialise sine wave synthesis values
002 200B8        136                       CALL delay_1s                   ;bus settling delay
003 00100        137                       LOAD s0, 00                     ;clear all internal D/A values
E: symbol not defined: `S0'.
004 2F100        138                       STORE s0, chan_A_lsb
E: symbol not defined: `S0'.
005 2F101        139                       STORE s0, chan_A_msb
E: symbol not defined: `S0'.
006 2F102        140                       STORE s0, chan_B_lsb
E: symbol not defined: `S0'.
007 2F103        141                       STORE s0, chan_B_msb
E: symbol not defined: `S0'.
008 2F104        142                       STORE s0, chan_C_lsb
E: symbol not defined: `S0'.
009 2F105        143                       STORE s0, chan_C_msb
E: symbol not defined: `S0'.
00A 2F106        144                       STORE s0, chan_D_lsb
E: symbol not defined: `S0'.
00B 2F107        145                       STORE s0, chan_D_msb
E: symbol not defined: `S0'.
00C 2F108        146                       STORE s0, triangle_up_down      ;initial slope is up
E: symbol not defined: `S0'.
00D 2009F        147                       CALL dac_reset                  ;reset D/A converter on all channels
00E 28001        148                       ENABLE INTERRUPT                ;Interrupts define 8KHz sample rate
                 149                       ;
                 150                       ;
                 151                       ;The program is interrupt driven to maintain an 8KHz sample rate. The main body
                 152                       ;of the program waits for an interrupt to occur. The interrupt updates all four
                 153                       ;analogue outputs with values stored in scratch pad memory. This takes approximately
                 154                       ;58us of the 125us available between interrupts. The main program then prepares
                 155                       ;new values for the analogue outputs (in less than 67us) before waiting for the
                 156                       ;next interrupt.
                 157                       ;
                 158                       ;
00F 00110        159           warm_start: LOAD sF, FF                     ;flag set and wait for interrupt to be serviced
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
010 1C110        160             wait_int: COMPARE sF, FF
E: symbol not defined: `SF'.
E: symbol not defined: `FF'.
011 32010        161                       JUMP Z, wait_int                ;interrupt clears the flag
                 162                       ;
                 163                       ;
                 164                       ;Channel A is a square wave of 2KHz.
                 165                       ;
                 166                       ;This is formed from the 2KHz square wave on channel C and demonstrates that the
                 167                       ;D/A converter echoes the previously sent 32-bit command word.
                 168                       ;
                 169                       ;Following the interrupt service routine (ISR), the register set [s9,s8,s7,s6]
                 170                       ;will contain the command which was last sent for the setting of channel C. The
                 171                       ;12-bit sample value is extracted from this word and stored in the location for
                 172                       ;channel A. This should mean that channel A is one sample behind channel C. In this
                 173                       ;version that does not mean a lag of 90 degrees because each output is updated
                 174                       ;sequentially and that takes approximatly 14.5us per channel.
                 175                       ;
                 176                       ;This will also demonstrate that the reference voltage on channels A and B is 3.3v
                 177                       ;compared with 2.5v on channels C and D. So whilst the square wave on channel C is
                 178                       ;set for 0.50v to 2.00v, it should be 0.66v to 2.64v on channel A.
                 179                       ;
012 1410E        180                       SR0 s7                          ; shift 12-bit value right 4 places
E: symbol not defined: `S7'.
013 14108        181                       SRA s6
E: symbol not defined: `S6'.
014 1410E        182                       SR0 s7
E: symbol not defined: `S7'.
015 14108        183                       SRA s6
E: symbol not defined: `S6'.
016 1410E        184                       SR0 s7
E: symbol not defined: `S7'.
017 14108        185                       SRA s6
E: symbol not defined: `S6'.
018 1410E        186                       SR0 s7
E: symbol not defined: `S7'.
019 14108        187                       SRA s6
E: symbol not defined: `S6'.
01A 2F101        188                       STORE s7, chan_A_msb            ;store value for D/A output
E: symbol not defined: `S7'.
01B 2F100        189                       STORE s6, chan_A_lsb
E: symbol not defined: `S6'.
                 190                       ;
                 191                       ;
                 192                       ;
                 193                       ;
                 194                       ;Channel B is a triangle waveform of 200Hz.
                 195                       ;
                 196                       ;Given the sample rate of 8KHz, there are 40 samples per waveform period.
                 197                       ;To achieve close to full scale deflection, the waveform needs to increase or
                 198                       ;decrease by 204 each sample so that over the first 20 samples it rises from
                 199                       ;0 to 4080 and then over the next 20 samples it reduces back to zero.
                 200                       ;
01C 0B102        201                       FETCH s0, chan_B_lsb            ;load current value into [s1,s0]
E: symbol not defined: `S0'.
01D 0B103        202                       FETCH s1, chan_B_msb
E: symbol not defined: `S1'.
01E 0B108        203                       FETCH s2, triangle_up_down      ;read current slope direction
E: symbol not defined: `S2'.
01F 1C100        204                       COMPARE s2, 00                  ;determine current direction
E: symbol not defined: `S2'.
020 36029        205                       JUMP NZ, slope_down
021 10110        206                       ADD s0, CC                      ;add 204 (00CC hex) to current value
E: symbol not defined: `S0'.
E: symbol not defined: `CC'.
022 12100        207                       ADDCY s1, 00
E: symbol not defined: `S1'.
                 208                       COMPARE s1, 0F                  ;test for peak value of 4080 (0FF0 hex)
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
023 36031        209                       JUMP NZ, store_channel_B
024 1C110        210                       COMPARE s0, F0
E: symbol not defined: `S0'.
E: symbol not defined: `F0'.
025 36031        211                       JUMP NZ, store_channel_B
026 00110        212                       LOAD s2, 01                     ;change to slope down next time
E: symbol not defined: `S2'.
027 2F108        213                       STORE s2, triangle_up_down
E: symbol not defined: `S2'.
028 22031        214                       JUMP store_channel_B
029 18110        215           slope_down: SUB s0, CC                      ;subtract 204 (00CC hex) from current value
E: symbol not defined: `S0'.
E: symbol not defined: `CC'.
02A 1A100        216                       SUBCY s1, 00
E: symbol not defined: `S1'.
02B 1C100        217                       COMPARE s1, 00                  ;test for zero (0000 hex)
E: symbol not defined: `S1'.
02C 36031        218                       JUMP NZ, store_channel_B
02D 1C100        219                       COMPARE s0, 00
E: symbol not defined: `S0'.
02E 36031        220                       JUMP NZ, store_channel_B
02F 00100        221                       LOAD s2, 00                     ;change to slope up next time
E: symbol not defined: `S2'.
030 2F108        222                       STORE s2, triangle_up_down
E: symbol not defined: `S2'.
031 2F102        223      store_channel_B: STORE s0, chan_B_lsb            ;store value for D/A output
E: symbol not defined: `S0'.
032 2F103        224                       STORE s1, chan_B_msb
E: symbol not defined: `S1'.
                 225                       ;
                 226                       ;
                 227                       ;Channel C is a square wave of 2KHz.
                 228                       ;
                 229                       ;Since the sample rate is 8KHz, this square wave is formed of two samples at a
                 230                       ;low level and two samples at a high level. This is used to demonstrate when the
                 231                       ;D/A converter output actually changes and how to determine the voltage levels.
                 232                       ;It is also used indirectly to form the signal for channel A.
                 233                       ;
                 234                       ;The low level voltage is 0.50v.
                 235                       ;   The 12-bit value is therefore 4096 x 0.5 / 2.5 = 819 (333 hex)
                 236                       ;
                 237                       ;The high level voltage is 2.00v.
                 238                       ;   The 12-bit value is therefore 4096 x 2.0 / 2.5 = 3277 (CCD hex)
                 239                       ;
                 240                       ;
033 0B109        241                       FETCH s2, square_count          ;read sample counter
E: symbol not defined: `S2'.
034 0C120        242                       TEST s2, 02                     ;bit 1 has correct frequency
E: symbol not defined: `S2'.
035 36001        243                       JUMP NZ, square_high
E: symbol not defined: `SQUARE_HIGH'.
036 00130        244                       LOAD s1, 03                     ;Set low level
E: symbol not defined: `S1'.
037 00110        245                       LOAD s0, 33
E: symbol not defined: `S0'.
W: value out of range: 33, allowed range is [0,15] (trimmed to 4 bits) which makes it 1.
038 2203A        246                       JUMP store_channel_C
                 247          square_high: LOAD s1, 0C                     ;Set high level
E: identifier cannot start with a digit: `0C'.
E: unexpected end of line.
039 00110        248                       LOAD s0, CD
E: symbol not defined: `S0'.
E: symbol not defined: `CD'.
03A 2F104        249      store_channel_C: STORE s0, chan_C_lsb            ;store value for D/A output
E: symbol not defined: `S0'.
03B 2F105        250                       STORE s1, chan_C_msb
E: symbol not defined: `S1'.
03C 10110        251                       ADD s2, 01                      ;increment sampel count
E: symbol not defined: `S2'.
03D 2F109        252                       STORE s2, square_count          ;store new sample count
E: symbol not defined: `S2'.
                 253                       ;
                 254                       ;Sine wave for channel D
                 255                       ;
                 256                       ;A synthesis algorithm is used to generate a stable 770Hz sine wave
                 257                       ;which is one of the 8 tines used in DTMF telephone dialing.
                 258                       ;
03E 2005C        259                       CALL calc_next_sine
03F 1410E        260                       SR0 s9                          ;reduce value to 12-bits
E: symbol not defined: `S9'.
040 14108        261                       SRA s8
E: symbol not defined: `S8'.
041 1410E        262                       SR0 s9
E: symbol not defined: `S9'.
042 14108        263                       SRA s8
E: symbol not defined: `S8'.
043 1410E        264                       SR0 s9
E: symbol not defined: `S9'.
044 14108        265                       SRA s8
E: symbol not defined: `S8'.
045 10180        266                       ADD s9, 08                      ;Scale signed number to mid-rail of unsigned output
E: symbol not defined: `S9'.
046 2F107        267                       STORE s9, chan_D_msb            ;store value for D/A output
E: symbol not defined: `S9'.
047 2F106        268                       STORE s8, chan_D_lsb
E: symbol not defined: `S8'.
                 269                       ;
                 270                       ;
                 271                       ;Drive LEDs with simple binary count of the samples to indicate
                 272                       ;that the design is active.
                 273                       ;
048 0B114        274                       FETCH s0, sample_count_lsb      ;read sample counter
E: symbol not defined: `S0'.
049 0B115        275                       FETCH s1, sample_count_msb
E: symbol not defined: `S1'.
04A 10110        276                       ADD s0, 01                      ;increment counter
E: symbol not defined: `S0'.
04B 12100        277                       ADDCY s1, 00
E: symbol not defined: `S1'.
04C 2F114        278                       STORE s0, sample_count_lsb      ;store new value
E: symbol not defined: `S0'.
04D 2F115        279                       STORE s1, sample_count_msb
E: symbol not defined: `S1'.
04E 2D150        280                       OUTPUT s1, LED_port             ;upper bits are 31.25Hz and lower
E: symbol not defined: `S1'.
                 281                       ;
04F 2200F        282                       JUMP warm_start                 ;wait for next interrupt
                 283                       ;
                 284                       ;**************************************************************************************
                 285                       ;Sine wave synthesis algorithm
                 286                       ;**************************************************************************************
                 287                       ;
                 288                       ;This example is set to generate 770Hz at a sample rate of 8KHz. 770Hz is one of
                 289                       ;the eight DTMF frequences. Please see design documentation for more details.
                 290                       ;
050 00180        291       init_sine_wave: LOAD s0, 24                     ;initial value 9216 (2400 hex)
E: symbol not defined: `S0'.
W: value out of range: 24, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
051 2F10B        292                       STORE s0, sine_y_msb
E: symbol not defined: `S0'.
052 00100        293                       LOAD s0, 00
E: symbol not defined: `S0'.
053 2F10A        294                       STORE s0, sine_y_lsb
E: symbol not defined: `S0'.
054 00100        295                       LOAD s0, 00                     ;initial delayed value 0 (0000 hex)
E: symbol not defined: `S0'.
055 2F10D        296                       STORE s0, sine_y1_msb
E: symbol not defined: `S0'.
056 2F10C        297                       STORE s0, sine_y1_lsb
E: symbol not defined: `S0'.
057 00110        298                       LOAD s0, D2                     ;Coefficient for 770Hz is UFIX_16_15 value 53913/32768 = 1.64529
E: symbol not defined: `S0'.
E: symbol not defined: `D2'.
058 2F10F        299                       STORE s0, sine_k_msb
E: symbol not defined: `S0'.
059 00130        300                       LOAD s0, 99
E: symbol not defined: `S0'.
W: value out of range: 99, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
05A 2F10E        301                       STORE s0, sine_k_lsb
E: symbol not defined: `S0'.
05B 25000        302                       RETURN
                 303                       ;
                 304                       ;
                 305                       ;Calculate a new output sample for a single tone.
                 306                       ;
                 307                       ;The tone sample is generated as a 16-bit signed integer.
                 308                       ;The waveform is virtually full scale deflection for a 15-bit integer
                 309                       ;such that the addition of two tones for DTMF will not exceed the 16-bits
                 310                       ;provided by two registers.
                 311                       ;
                 312                       ;Obtain current values from wscratch pad memory
                 313                       ;
05C 0B10B        314       calc_next_sine: FETCH sF, sine_y_msb            ;[sF,sE] is Y
E: symbol not defined: `SF'.
05D 0B10A        315                       FETCH sE, sine_y_lsb
E: symbol not defined: `SE'.
05E 0B10D        316                       FETCH sD, sine_y1_msb           ;[sD,sC] is Y1
E: symbol not defined: `SD'.
05F 0B10C        317                       FETCH sC, sine_y1_lsb
E: symbol not defined: `SC'.
060 0B10F        318                       FETCH sB, sine_k_msb            ;[sB,sA] is K
E: symbol not defined: `SB'.
061 0B10E        319                       FETCH sA, sine_k_lsb
E: symbol not defined: `SA'.
                 320                       ;
                 321                       ;16-bit signed by 16-bit unsigned multiplication. [s9,s8]=[sB,sA]x[sF,sE]
                 322                       ;
                 323                       ;The unsigned number is of format UFIX_16_15 resulting
                 324                       ;in a FIX_32_15 product. Since only the integer part of the
                 325                       ;product is to be retained as a 16-bit value, their is no
                 326                       ;shift of the result on the last cycle of the multiplication.
                 327                       ;Execution requires a maximum of 145 instructions.
                 328                       ;
062 00100        329                       LOAD s9, 00                     ;clear temporary result registers [s9,s8]
E: symbol not defined: `S9'.
063 00100        330                       LOAD s8, 00
E: symbol not defined: `S8'.
064 001A0        331                       LOAD s0, 10                     ;16 bit multiply
E: symbol not defined: `S0'.
065 1410A        332            mult_loop: SRX s9                          ;signed divide result by 2
E: symbol not defined: `S9'.
066 14108        333                       SRA s8
E: symbol not defined: `S8'.
067 1410E        334                       SR0 sB                          ;shift coefficient
E: symbol not defined: `SB'.
068 14108        335                       SRA sA
E: symbol not defined: `SA'.
069 3E06C        336                       JUMP NC, no_mult_add            ;test for active bit
06A 10110        337                       ADD s8, sE                      ;16-bit signed addition
E: symbol not defined: `S8'.
E: symbol not defined: `SE'.
06B 12110        338                       ADDCY s9, sF
E: symbol not defined: `S9'.
E: symbol not defined: `SF'.
06C 18110        339          no_mult_add: SUB s0, 01                      ;test for 16 cycles
E: symbol not defined: `S0'.
06D 36065        340                       JUMP NZ, mult_loop
                 341                       ;
                 342                       ;Subtract of delayed sample
                 343                       ;
06E 18110        344                       SUB s8, sC                      ;16-bit signed subtract
E: symbol not defined: `S8'.
E: symbol not defined: `SC'.
06F 1A110        345                       SUBCY s9, sD
E: symbol not defined: `S9'.
E: symbol not defined: `SD'.
                 346                       ;
                 347                       ;Update scratch pad memory with new sample values
                 348                       ;
070 2F10D        349                       STORE sF, sine_y1_msb           ;delayed sample gets previous output
E: symbol not defined: `SF'.
071 2F10C        350                       STORE sE, sine_y1_lsb
E: symbol not defined: `SE'.
072 2F10B        351                       STORE s9, sine_y_msb            ;new current sample
E: symbol not defined: `S9'.
073 2F10A        352                       STORE s8, sine_y_lsb
E: symbol not defined: `S8'.
074 25000        353                       RETURN
                 354                       ;
                 355                       ;
                 356                       ;**************************************************************************************
                 357                       ;SPI communication routines for D/A Converter
                 358                       ;**************************************************************************************
                 359                       ;
                 360                       ;These routines will work with two output ports and one input port which should be
                 361                       ;defined as follows using CONSTANT directives.
                 362                       ;   (replace 'pp' with appropriate port address in each case)
                 363                       ;In the list of CONSTANT directives, only the ones marked with a * are really required
                 364                       ;for the D/A Converter system. The other directives are to control (disable) or
                 365                       ;communicate with the other SPI components on the same SPI bus of the Spartan-3E Starter Kit.
                 366                       ;
                 367                       ;
                 368                       ;
                 369                       ;CONSTANT SPI_control_port, pp       ;SPI clock and chip selects     *
                 370                       ;CONSTANT SPI_sck, 01                ;                  SCK - bit0   *
                 371                       ;CONSTANT SPI_rom_cs, 02             ;    serial rom select - bit1
                 372                       ;CONSTANT SPI_spare_control, 04      ;                spare - bit2
                 373                       ;CONSTANT SPI_amp_cs, 08             ;     amplifier select - bit3
                 374                       ;CONSTANT SPI_adc_conv, 10           ;          A/D convert - bit4
                 375                       ;CONSTANT SPI_dac_cs, 20             ;           D/A select - bit5   *
                 376                       ;CONSTANT SPI_amp_shdn, 40           ;       amplifier SHDN - bit6
                 377                       ;CONSTANT SPI_dac_clr, 80            ;            D/A clear - bit7   *
                 378                       ;
                 379                       ;CONSTANT SPI_output_port, pp        ;SPI data output                *
                 380                       ;CONSTANT SPI_sdo, 80                ;   SDO - bit7                  *
                 381                       ;
                 382                       ;CONSTANT SPI_input_port, pp         ;SPI data input                 *
                 383                       ;CONSTANT SPI_sdi, 80                ;             SDI - bit7        *
                 384                       ;CONSTANT SPI_amp_sdi, 40            ;   amplifier SDI - bit6
                 385                       ;
                 386                       ;
                 387                       ;
                 388                       ;
                 389                       ;Initialise SPI bus
                 390                       ;
                 391                       ;This routine should be used to initialise the SPI bus.
                 392                       ;The SCK clock is made low.
                 393                       ;Device selections are made inactive as follows
                 394                       ;   SPI_sck      = 0      Clock is Low (required)
                 395                       ;   SPI_rom_cs   = 1      Deselect ROM
                 396                       ;   spare        = 1      spare control bit
                 397                       ;   SPI_amp_cs   = 1      Deselect amplifier
                 398                       ;   SPI_adc_conv = 0      A/D convert ready to apply positive pulse
                 399                       ;   SPI_dac_cs   = 1      Deselect D/A
                 400                       ;   SPI_amp_shdn = 0      Amplifier active and available
                 401                       ;   SPI_dac_clr  = 1      D/A clear off
                 402                       ;
075 00110        403             SPI_init: LOAD s0, AE                     ;normally AE
E: symbol not defined: `S0'.
E: symbol not defined: `AE'.
076 2D108        404                       OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
077 25000        405                       RETURN
                 406                       ;
                 407                       ;
                 408                       ;
                 409                       ;Send and receive one byte to and from the SPI D/A converter.
                 410                       ;
                 411                       ;The data supplied in register 's2' is transmitted to the SPI bus and
                 412                       ;at the same time the received byte is used to replace the value in 's2'.
                 413                       ;The SCK clock is generated by software and results in a communication rate of
                 414                       ;2.5Mbit/s with a 50MHz clock.
                 415                       ;
                 416                       ;Note that you must have previously selected the required device on the bus
                 417                       ;before attempting communication and you must subsequently deselect the device
                 418                       ;when appropriate.
                 419                       ;
                 420                       ;Entry to this routine assumes that register s0 defines the state of the SPI
                 421                       ;control signals including SCK which should be Low. The easiest way to achieve this is
                 422                       ;to use the SPI_init routine before calling this one for the first time.
                 423                       ;
                 424                       ;As a 'master' the signal sequence is as follows..
                 425                       ;   Transmit data bit on SDO line
                 426                       ;   Drive SCK transition from low to high
                 427                       ;   Receive data bit from SDI line (D/A transmits on previous falling edge)
                 428                       ;   Drive SCK transition from high to low.
                 429                       ;
                 430                       ;Important note
                 431                       ;   The received data bit must be captured some time before SCK goes low.
                 432                       ;   However the combination of relatively slow clock to output time of the
                 433                       ;   LTC2624 combined with the low drive strength of its SDO output means that
                 434                       ;   the received bit needs maximum time to settle. Therefore this routine
                 435                       ;   schedules the read as late as it can.
                 436                       ;
078 00180        437        SPI_dac_tx_rx: LOAD s1, 08                     ;8-bits to transmit and receive
E: symbol not defined: `S1'.
079 2D104        438     next_SPI_dac_bit: OUTPUT s2, SPI_output_port      ;output data bit ready to be used on rising edge
E: symbol not defined: `S2'.
07A 06110        439                       XOR s0, SPI_sck                 ;clock High (bit0)
E: symbol not defined: `S0'.
07B 2D108        440                       OUTPUT s0, SPI_control_port     ;drive clock High
E: symbol not defined: `S0'.
07C 06110        441                       XOR s0, SPI_sck                 ;prepare clock Low (bit0)
E: symbol not defined: `S0'.
07D 09101        442                       INPUT s3, SPI_input_port        ;read input bit
E: symbol not defined: `S3'.
07E 0C100        443                       TEST s3, SPI_sdi                ;detect state of received bit
E: symbol not defined: `S3'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
07F 14100        444                       SLA s2                          ;shift new data into result and move to next transmit bit
E: symbol not defined: `S2'.
080 2D108        445                       OUTPUT s0, SPI_control_port     ;drive clock Low
E: symbol not defined: `S0'.
081 18110        446                       SUB s1, 01                      ;count bits
E: symbol not defined: `S1'.
082 36079        447                       JUMP NZ, next_SPI_dac_bit       ;repeat until finished
083 25000        448                       RETURN
                 449                       ;
                 450                       ;
                 451                       ;
                 452                       ;Set a voltage on one of the LTC2624 D/A converter outputs
                 453                       ;
                 454                       ;The D/A converter has 4 channels. Specify which channel is to be set using
                 455                       ;register sC as follows....
                 456                       ;   sC     Channel                 Nominal Voltage Range
                 457                       ;   00        A                       0 to 3.30v (or VREFAB)
                 458                       ;   01        B                       0 to 3.30v (or VREFAB)
                 459                       ;   02        C                       0 to 2.50v (or VREFCD)
                 460                       ;   03        D                       0 to 2.50v (or VREFCD)
                 461                       ;   0F        All channels            various as above.
                 462                       ;
                 463                       ;The analogue level is a 12-bit value to be supplied in lower 12-bits of register
                 464                       ;pair [sB,sA]. If this value is called 'k' and is in the range 0 to 4095 (000 to FFF)
                 465                       ;then
                 466                       ;      Vout = (k/4096) * VREFx
                 467                       ;Hence it is not possible to reach the absolute level of the reference.
                 468                       ;
                 469                       ;Here are some useful values..
                 470                       ;    Voltage    A or B    C or D
                 471                       ;      0.0       000       000
                 472                       ;      0.5       26D       333
                 473                       ;      0.65      327               A/D reference -1.00v
                 474                       ;      1.0       4D9       666
                 475                       ;      1.5       746       99A
                 476                       ;      1.65      800       A8F     converter reference = 3.3/2 = 1.65v
                 477                       ;      2.0       9B2       CCD
                 478                       ;      2.5       C1F       FFF
                 479                       ;      2.65      CD9               A/D reference +1.00v
                 480                       ;      3.0       E8C       n/a
                 481                       ;      3.3       FFF       n/a
                 482                       ;
                 483                       ;Note that the full scale deflection of FFF will result in different output
                 484                       ;voltages due to different reference voltages for each pair of channels.
                 485                       ;
                 486                       ;SPI communication with the DAC only requires a 24-bit word to be transmitted.
                 487                       ;However, the device internally contains a 32-bit shift register. When writing
                 488                       ;a command word, the previous contents are shifted out and can be observed by
                 489                       ;the master (Spartan-3E in this case). If you do not use a 32-bit format, then
                 490                       ;the read back is confusing. Hence this routine uses a 32-bit format by transmitting
                 491                       ;a dummy byte first.
                 492                       ;
                 493                       ;  Byte 1 = 00   8 dummy bits
                 494                       ;  Byte 2 = 3c   Command nibble (3=write and update) and channel selection
                 495                       ;  Byte 3 = dd   Upper 8-bits of the 12-bit voltage value
                 496                       ;  Byte 4 = d0   lower 4-bits of the 12-bit voltage value and 4 dummy bits.
                 497                       ;
                 498                       ;At the end of this communication, the register set [s9,s8,s7,s6] will contain the
                 499                       ;data received back from the D/A converter which should be the previous command.
                 500                       ;
084 20075        501              set_dac: CALL SPI_init                   ;ensure known state of bus and s0 register
085 06140        502                       XOR s0, SPI_dac_cs              ;select low on D/A converter
E: symbol not defined: `S0'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
086 2D108        503                       OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
087 00100        504                       LOAD s2, 00                     ;Write dummy byte to DAC
E: symbol not defined: `S2'.
088 20078        505                       CALL SPI_dac_tx_rx
089 00110        506                       LOAD s9, s2                     ;capture response
E: symbol not defined: `S9'.
E: symbol not defined: `S2'.
08A 00110        507                       LOAD s2, sC                     ;Select channel for update
E: symbol not defined: `S2'.
E: symbol not defined: `SC'.
                 508                       AND s2, 0F                      ;isolate channel bits to be certain of correct command
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
08B 041E0        509                       OR s2, 30                       ;Use immediate Write and Update command is "0011"
E: symbol not defined: `S2'.
W: value out of range: 30, allowed range is [0,15] (trimmed to 4 bits) which makes it 14.
08C 20078        510                       CALL SPI_dac_tx_rx
08D 00110        511                       LOAD s8, s2                     ;capture response
E: symbol not defined: `S8'.
E: symbol not defined: `S2'.
08E 14106        512                       SL0 sA                          ;data shift bits into correct position
E: symbol not defined: `SA'.
08F 14100        513                       SLA sB                          ;with 4 dummy bits ('0') in the least significant bits.
E: symbol not defined: `SB'.
090 14106        514                       SL0 sA
E: symbol not defined: `SA'.
091 14100        515                       SLA sB
E: symbol not defined: `SB'.
092 14106        516                       SL0 sA
E: symbol not defined: `SA'.
093 14100        517                       SLA sB
E: symbol not defined: `SB'.
094 14106        518                       SL0 sA
E: symbol not defined: `SA'.
095 14100        519                       SLA sB
E: symbol not defined: `SB'.
096 00110        520                       LOAD s2, sB                     ;Write 12 bit value followed by 4 dummy bits
E: symbol not defined: `S2'.
E: symbol not defined: `SB'.
097 20078        521                       CALL SPI_dac_tx_rx
098 00110        522                       LOAD s7, s2                     ;capture response
E: symbol not defined: `S7'.
E: symbol not defined: `S2'.
099 00110        523                       LOAD s2, sA
E: symbol not defined: `S2'.
E: symbol not defined: `SA'.
09A 20078        524                       CALL SPI_dac_tx_rx
09B 00110        525                       LOAD s6, s2                     ;capture response
E: symbol not defined: `S6'.
E: symbol not defined: `S2'.
09C 06140        526                       XOR s0, SPI_dac_cs              ;deselect the D/A converter to execute
E: symbol not defined: `S0'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
09D 2D108        527                       OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
09E 25000        528                       RETURN
                 529                       ;
                 530                       ;Perform a hard reset of the D/A converter
                 531                       ;
09F 20075        532            dac_reset: CALL SPI_init                   ;ensure known state of bus and s0 register
0A0 06100        533                       XOR s0, SPI_dac_clr             ;pulse the clear signal.
E: symbol not defined: `S0'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
0A1 2D108        534                       OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
0A2 06100        535                       XOR s0, SPI_dac_clr
E: symbol not defined: `S0'.
W: value out of range: 80, allowed range is [0,15] (trimmed to 4 bits) which makes it 0.
0A3 2D108        536                       OUTPUT s0, SPI_control_port
E: symbol not defined: `S0'.
0A4 25000        537                       RETURN
                 538                       ;
                 539                       ;
                 540                       ;**************************************************************************************
                 541                       ;Software delay routines
                 542                       ;**************************************************************************************
                 543                       ;
                 544                       ;
                 545                       ;
                 546                       ;Delay of 1us.
                 547                       ;
                 548                       ;Constant value defines reflects the clock applied to KCPSM3. Every instruction
                 549                       ;executes in 2 clock cycles making the calculation highly predictable. The '6' in
                 550                       ;the following equation even allows for 'CALL delay_1us' instruction in the initiating code.
                 551                       ;
                 552                       ; delay_1us_constant =  (clock_rate - 6)/4       Where 'clock_rate' is in MHz
                 553                       ;
                 554                       ;Registers used s0
                 555                       ;
0A5 00100        556            delay_1us: LOAD s0, delay_1us_constant
E: symbol not defined: `S0'.
0A6 18110        557             wait_1us: SUB s0, 01
E: symbol not defined: `S0'.
0A7 360A6        558                       JUMP NZ, wait_1us
0A8 25000        559                       RETURN
                 560                       ;
                 561                       ;Delay of 40us.
                 562                       ;
                 563                       ;Registers used s0, s1
                 564                       ;
0A9 001C0        565           delay_40us: LOAD s1, 28                     ;40 x 1us = 40us
E: symbol not defined: `S1'.
W: value out of range: 28, allowed range is [0,15] (trimmed to 4 bits) which makes it 12.
0AA 200A5        566            wait_40us: CALL delay_1us
0AB 18110        567                       SUB s1, 01
E: symbol not defined: `S1'.
0AC 360AA        568                       JUMP NZ, wait_40us
0AD 25000        569                       RETURN
                 570                       ;
                 571                       ;
                 572                       ;Delay of 1ms.
                 573                       ;
                 574                       ;Registers used s0, s1, s2
                 575                       ;
0AE 00130        576            delay_1ms: LOAD s2, 19                     ;25 x 40us = 1ms
E: symbol not defined: `S2'.
W: value out of range: 19, allowed range is [0,15] (trimmed to 4 bits) which makes it 3.
0AF 200A9        577             wait_1ms: CALL delay_40us
0B0 18110        578                       SUB s2, 01
E: symbol not defined: `S2'.
0B1 360AF        579                       JUMP NZ, wait_1ms
0B2 25000        580                       RETURN
                 581                       ;
                 582                       ;Delay of 20ms.
                 583                       ;
                 584                       ;Delay of 20ms used during initialisation.
                 585                       ;
                 586                       ;Registers used s0, s1, s2, s3
                 587                       ;
0B3 001E0        588           delay_20ms: LOAD s3, 14                     ;20 x 1ms = 20ms
E: symbol not defined: `S3'.
0B4 200AE        589            wait_20ms: CALL delay_1ms
0B5 18110        590                       SUB s3, 01
E: symbol not defined: `S3'.
0B6 360B4        591                       JUMP NZ, wait_20ms
0B7 25000        592                       RETURN
                 593                       ;
                 594                       ;Delay of approximately 1 second.
                 595                       ;
                 596                       ;Registers used s0, s1, s2, s3, s4
                 597                       ;
0B8 001E0        598             delay_1s: LOAD s4, 14                     ;50 x 20ms = 1000ms
E: symbol not defined: `S4'.
0B9 200B3        599              wait_1s: CALL delay_20ms
0BA 18110        600                       SUB s4, 01
E: symbol not defined: `S4'.
0BB 360B9        601                       JUMP NZ, wait_1s
0BC 25000        602                       RETURN
                 603                       ;
                 604                       ;
                 605                       ;
                 606                       ;**************************************************************************************
                 607                       ;Interrupt Service Routine (ISR)
                 608                       ;**************************************************************************************
                 609                       ;
                 610                       ;Interrupts occur at a rate of 8KHz.
                 611                       ;
                 612                       ;Each interrupt is the fundamental timing trigger used to set the sample rate and
                 613                       ;it is therefore use to set the D/A outputs by copying the values stored in
                 614                       ;scratch pad memory and outputting them to the D/A converter using the SPI bus.
                 615                       ;
                 616                       ;Because the SPI communication is in itself a predictable process, the sample rate
                 617                       ;is preserved without sample jitter. All variable activities are left to the main
                 618                       ;program.
                 619                       ;
                 620                       ;Each time PicoBlaze transmits a 32-bit command word to the D/A converter, the
                 621                       ;D/A responds with the last command it was sent. So as the end of this service routine
                 622                       ;the register set [s9,s8,s7,s6] will contain the command which has just been sent
                 623                       ;for the setting of channel C.
                 624                       ;
                 625                       ;Set channel A
                 626                       ;
0BD 00100        627                  ISR: LOAD sC, 00                     ;channel A
E: symbol not defined: `SC'.
0BE 0B101        628                       FETCH sB, chan_A_msb            ;12-bit value
E: symbol not defined: `SB'.
0BF 0B100        629                       FETCH sA, chan_A_lsb
E: symbol not defined: `SA'.
0C0 20084        630                       CALL set_dac
                 631                       ;
                 632                       ;Set channel B
                 633                       ;
0C1 00110        634                       LOAD sC, 01                     ;channel B
E: symbol not defined: `SC'.
0C2 0B103        635                       FETCH sB, chan_B_msb            ;12-bit value
E: symbol not defined: `SB'.
0C3 0B102        636                       FETCH sA, chan_B_lsb
E: symbol not defined: `SA'.
0C4 20084        637                       CALL set_dac
                 638                       ;
                 639                       ;Set channel C
                 640                       ;
0C5 00120        641                       LOAD sC, 02                     ;channel C
E: symbol not defined: `SC'.
0C6 0B105        642                       FETCH sB, chan_C_msb            ;12-bit value
E: symbol not defined: `SB'.
0C7 0B104        643                       FETCH sA, chan_C_lsb
E: symbol not defined: `SA'.
0C8 20084        644                       CALL set_dac
                 645                       ;
                 646                       ;Set channel A
                 647                       ;
0C9 00130        648                       LOAD sC, 03                     ;channel D
E: symbol not defined: `SC'.
0CA 0B107        649                       FETCH sB, chan_D_msb            ;12-bit value
E: symbol not defined: `SB'.
0CB 0B106        650                       FETCH sA, chan_D_lsb
E: symbol not defined: `SA'.
0CC 20084        651                       CALL set_dac
                 652                       ;
0CD 00100        653                       LOAD sF, 00                     ;clear flag
E: symbol not defined: `SF'.
0CE 29001        654                       RETURNI ENABLE
                 655                       ;
                 656                       ;
                 657                       ;**************************************************************************************
                 658                       ;Interrupt Vector
                 659                       ;**************************************************************************************
                 660                       ;
                 661                       ADDRESS 3FF
E: identifier cannot start with a digit: `3FF'.
E: directive ADDRESS requires a single argument.
0CF 220BD        662                       JUMP ISR
                 663                       ;
                 664                       ;
