                   1     ; Compiler test case for Assembler
                   2     ; instruction opcodes
                   3
                   4
                   5
                   6
  00001            7     NAMEREG         s0, ram_data
E: symbol not defined: `S0'.
  00001            8     NAMEREG         s1, ram_address
E: symbol not defined: `S1'.
W: reusing already reserved space in register file memory at address: 1.
                   9
  00028           10     CONSTANT        ram_locations, 40               ; there are 64 locations
  00000           11     CONSTANT        initial_value, 00               ; initialize to zero
                  12
                  13
                  14     Start:
000 00100         15             LOAD            ram_data, initial_value         ; load initial value
001 00180         16             LOAD            ram_address, ram_locations
W: value out of range: 40, allowed range is [0,15] (trimmed to 4 bits) which makes it 8.
                  17             ; fill from top to bottom
                  18     ram_fill:
002 18110         19             SUB             ram_address, 01
                  20             ; decrement address
003 2F101         21             STORE           ram_data, (ram_address)
                  22             ; initialize location
004 36002         23             JUMP            NZ, ram_fill
                  24             ; if not address 0, goto
                  25             ; ram_fill
                  26
  00000           27     CONSTANT                switches, 00
                  28     ; read switch values at port 0
  00001           29     CONSTANT                LEDs, 01
                  30     ; write 7-seg LED at port 1
                  31     ; Define 7-segment LED pattern {dp,g,f,e,d,c,b,a}
  00001           32     CONSTANT                LED_0, C0
E: symbol not defined: `C0'.
                  33     ; display '0' on 7-segment display
  00001           34     CONSTANT                LED_1, F9
E: symbol not defined: `F9'.
                  35     ; display '1' on 7-segment display
                  36     ;
                  37     CONSTANT                LED_F, 8E
E: identifier cannot start with a digit: `8E'.
E: unexpected end of line.
                  38     ; display 'F' on 7-segment display
  00001           39     NAMEREG                 s0, switch_value
E: symbol not defined: `S0'.
W: reusing already reserved space in register file memory at address: 1.
                  40     ; read switches into register s0
  00001           41     NAMEREG                 s1, LED_output
E: symbol not defined: `S1'.
W: reusing already reserved space in register file memory at address: 1.
                  42     ; load LED output data in register s1
                  43     ; Load 7-segment LED patterns into scratchpad RAM
005 00110         44             LOAD            LED_output, LED_0
                  45             ; grab LED pattern for switches = 0000
006 2F100         46             STORE           LED_output, 00
                  47             ; store in RAM[0]
007 00110         48             LOAD            LED_output, LED_1
                  49             ; grab LED pattern for switches = 0001
008 2F101         50             STORE           LED_output, 01
                  51             ; store in RAM[1]
                  52             ;
009 00110         53             LOAD            LED_output, LED_F
E: symbol not defined: `LED_F'.
                  54             ; grab LED pattern for switches = 1111
                  55             STORE           LED_output, 0F
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
                  56             ; store in RAM[F]
                  57             ; Read switch values and display value on 7-segment LED
                  58     loop:
00A 09100         59             INPUT           switch_value, switches
                  60             ; read value on switches
                  61             AND             switch_value, 0F
E: identifier cannot start with a digit: `0F'.
E: unexpected end of line.
                  62             ; mask upper bits to guarantee < 15
00B 0B101         63             FETCH           LED_output, (switch_value)
                  64             ; look up LED pattern in RAM
00C 2D101         65             OUTPUT          LED_output, LEDs
                  66             ; display switch value on 7-segment LED
00D 2200A         67             JUMP            loop
                  68
                  69
                  70
                  71
  00001           72     NAMEREG         sF, stack_ptr
E: symbol not defined: `SF'.
W: reusing already reserved space in register file memory at address: 1.
                  73     ; reserve register sF for the stack pointer
                  74     ; Initialize stack pointer to location 32 in the scratchpad RAM
00E 00140         75             LOAD            sF, 20
E: symbol not defined: `SF'.
W: value out of range: 20, allowed range is [0,15] (trimmed to 4 bits) which makes it 4.
                  76     my_subroutine:
                  77             ; preserve register s0
00F 20012         78             CALL            push_s0
                  79             ; *** remainder of subroutine algorithm ***
                  80             ; restore register s0
010 20015         81             CALL            pop_s0
011 25000         82             RETURN
                  83
                  84     push_s0:
012 2F101         85             STORE           s0, stack_ptr
E: symbol not defined: `S0'.
                  86             ; preserve register s0 onto “stack”
013 10110         87             ADD             stack_ptr, 01
                  88             ; increment stack pointer
014 25000         89             RETURN
                  90
                  91     pop_s0:
015 18110         92             SUB             stack_ptr, 01
                  93             ; decrement stack pointer
016 0B101         94             FETCH           s0, stack_ptr
E: symbol not defined: `S0'.
                  95             ; restore register s0 from “stack”
017 25000         96             RETURN
