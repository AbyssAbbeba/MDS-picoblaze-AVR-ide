//
// Copyright © 2003..2012 : Henk van Kampen <henk@mediatronix.com>
//
// This file is part of pBlazDIS.
//
// pBlazMRG is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// pBlazDIS is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with pBlazDIS.  If not, see <http://www.gnu.org/licenses/>.
//

; -------------------------------------------------------------------------------
; piggy board I2C routines
; -------------------------------------------------------------------------------

bSDA_In		.EQU	_PIGGY + _I2C0		; gets SDA level in Bit0
bSDA_0		.EQU	_PIGGY + _I2C0		; Pulls SDA to 0
bSDA_Z		.EQU	_PIGGY + _I2C1		; Relases SDA to float to 1
bSCL_0		.EQU    _PIGGY + _I2C2		; Pulls CSCL to 0
bSCL_Z		.EQU    _PIGGY + _I2C3		; Releases SCL to float to 1

; ---\              /--------\                                            /-- 
;     \  SDA       /          \                                          /
;      \----------/ \--------/ \----------------------------------------/
; -------\            /----\                                         /-------
;         \  SCL     /      \                                       /
;          \--------/        \-------------------------------------/
; | Start    |      Data bit     |                             |  Stop     |

Init_I2C:	OUT	sF, bSDA_Z		; SDA = Z
		OUT	sF, bSCL_Z		; SCL = Z
		JUMP	Delay
	

; -------------------------------------------------------------------------------
; Routine to set up for and read four bytes from I2C device
; -------------------------------------------------------------------------------

ReadWrite4_I2C:
		CALL	I2C_Start		; Send Start, control byte and ack
		MOVE	sC, s0			; Load device code for TX		
		SL0	sC			; add write flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck
		
		MOVE	sC, s1			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck

		CALL	I2C_RepStart		; Send repeated start, control byte and ack
		MOVE	sC, s0			; Load device code for TX
		SL1	sC			; add read flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck

		CALL	I2C_Recv		; Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s2, sC
		
		CALL	I2C_Recv		; Read next 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s3, sC
		
		CALL	I2C_Recv		; Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s4, sC
		
		CALL	I2C_Recv		; Read next 8 bits of data and send ack
		CALL	I2C_MNAck
		MOVE	s5, sC
		
		JUMP	I2C_Stop		; Send Stop

; -------------------------------------------------------------------------------
; Routine to set up for and write two bytes to I2C device
; -------------------------------------------------------------------------------
Write3_I2C:
		CALL	I2C_Start		; Send Start, control byte and ack
		MOVE	sC, s0			; Load device code for TX		
		SL0	sC			; add write flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck
		
		MOVE	sC, s1			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck
		
		MOVE	sC, s2			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck
		
		MOVE	sC, s3			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck
		
		JUMP	I2C_Stop		; Send stop

; -------------------------------------------------------------------------------
; Routine to set up for and read two bytes from I2C device
; -------------------------------------------------------------------------------

Read2_I2C:
		CALL	I2C_Start		; Send start, control byte and ack
		MOVE	sC, s0			; Load device code for TX
		SL1	sC			; add read flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck

		CALL	I2C_Recv		; Read 8 bits of data and send ack
		CALL	I2C_MAck
		MOVE	s2, sC
		
		CALL	I2C_Recv		; Read next 8 bits of data and send ack
		CALL	I2C_MNAck
		MOVE	s3, sC
		
		JUMP	I2C_Stop		; Send Stop

; -------------------------------------------------------------------------------
; Routine to set up for and write two bytes to I2C device
; -------------------------------------------------------------------------------
Write2_I2C:
		CALL	I2C_Start		; Send Start, control byte and ack
		MOVE	sC, s0			; Load device code for TX		
		SL0	sC			; add write flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck
		
		MOVE	sC, s1			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck
		
		MOVE	sC, s2			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck
		
		JUMP	I2C_Stop		; Send stop

; -------------------------------------------------------------------------------
; Routine to set up for and read one byte of I2C device
; -------------------------------------------------------------------------------
Read1_I2C:		
		
		CALL	I2C_Start		; Send start, control byte and ack
		MOVE	sC, s0			; Load address for TX
		SL1	sC			; add read flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck
		
		CALL	I2C_Start		; Send start, control byte and ack
		
		CALL	I2C_Recv		; Read 8 bits of data and send ack
		CALL	I2C_MNAck
		MOVE	s2, sC
		
		JUMP	I2C_Stop		; Send Stop

; -------------------------------------------------------------------------------
; Routine to set up for and write one byte to I2C device
; -------------------------------------------------------------------------------
Write1_I2C:
		
		CALL	I2C_Start		; Send Start, control byte and ack
		MOVE	sC, s0			; Load device code for TX
		SL0	sC			; add write flag
		CALL	I2C_Xmit		; Send address and ack
		CALL	I2C_SAck
		
		MOVE	sC, s1			; Load data for TX
		CALL	I2C_Xmit		; Send data and ack
		CALL	I2C_SAck
		
		JUMP	I2C_Stop		; Send stop

; -------------------------------------------------------------------------------
; Transmit 8 bits of I2C data
; -------------------------------------------------------------------------------
I2C_Xmit:
		MOVE    sD, 8			; Load I2C bit counter
I2C_TX:
		CALL    Delay
		SL0     sC			; Move data bit -> carry
		JUMP    C, I2C_TX1		; Jump if bit high
I2C_TX0:
		OUT     sF, bSDA_0		; SDA = 0
		CALL    Delay
		JUMP    I2C_TX2			; Jump over next instructions
I2C_TX1:
		OUT     sF, bSDA_Z		; SDA = 1 due to pull-up
		CALL    Delay
I2C_TX2:

		OUT     sF, bSCL_Z		; SCL = 1 due to pull-up
		CALL    Delay
		CALL    Delay
		CALL    Delay
		OUT     sF, bSCL_0		; SCL = 0

		SUB     sD, 1			; Decrement I2C bit counter
		JUMP    NZ, I2C_TX		; Loop until 8 bits are sent
		JUMP    Delay

; -------------------------------------------------------------------------------
; Read 8 bits of I2C data
; -------------------------------------------------------------------------------
I2C_Recv:	
		MOVE	sD, 8			; Load I2C bit counter
		CALL	Delay	
		OUT     sF, bSDA_Z		; SDA = 1 due to pull-up
		
I2C_RX:
		CALL	Delay	
		OUT	sF, bSCL_Z		; SCL = 1 due to pull-up
		CALL	Delay
		CALL	Delay
		IN	sF, bSDA_In
		CALL	Delay
		SR0	sF			; LSBit -> carry bit
		SLA	sC			; Carry shifted into LSBit
		OUT	sF, bSCL_0		; SCL = 0
		CALL	Delay
		SUB	sD, 1			; Decrement I2C bit counter
		JUMP	NZ, I2C_RX		; Loop until 8 bits are read
		RET

; -------------------------------------------------------------------------------
; Ack by master, keep data 0
; -------------------------------------------------------------------------------
I2C_MAck:	
		CALL    Delay
		OUT     sF, bSDA_0		; SDA = 0
		CALL    Delay
		OUT	sF, bSCL_Z		; SCL = 1 due to pull-up
		CALL	Delay
		CALL    Delay
		CALL    Delay
		OUT	sF, bSCL_0		; SCL = 0
		CALL	Delay
		OUT     sF, bSDA_0		; SDA = 0
		RET

; -------------------------------------------------------------------------------
; NAck by master, release data 
; -------------------------------------------------------------------------------
I2C_MNAck:	
		CALL    Delay
		OUT     sF, bSDA_Z		; SDA = 1 due to pull-up
		CALL    Delay
		OUT	sF, bSCL_Z		; SCL = 1 due to pull-up
		CALL	Delay
		CALL    Delay
		CALL    Delay
		OUT	sF, bSCL_0		; SCL = 0
		CALL	Delay
		OUT     sF, bSDA_0		; SDA = 0
		RET

; -------------------------------------------------------------------------------
; Ack by slave, release data
; -------------------------------------------------------------------------------
I2C_SAck:
		CALL    Delay
		OUT     sF, bSDA_Z		; SDA = 1 due to pull-up
		CALL    Delay
		OUT	sF, bSCL_Z		; SCL = 1 due to pull-up
		CALL	Delay
		CALL    Delay
		CALL    Delay
		OUT	sF, bSCL_0		; SCL = 0
		CALL	Delay
		RET

; -------------------------------------------------------------------------------
; Set up start condition for I2C
; -------------------------------------------------------------------------------

; SCL and SDA set to inputs, signals go high due to pull-up resistors

I2C_RepStart:
		CALL	Delay
		OUT	sF, bSCL_Z		; SCL = Z
I2C_Start:
		CALL	Delay
		OUT	sF, bSDA_0		; SDA = 0
		CALL	Delay
		OUT	sF, bSCL_0		; SCL = 0
		CALL	Delay
		RET

; -------------------------------------------------------------------------------
; Send I2C stop command
; -------------------------------------------------------------------------------
I2C_Stop:
		CALL	Delay
		OUT	sF, bSCL_Z		; SCL = 1 due to pull-up
		CALL	Delay
		OUT	sF, bSDA_Z		; SDA = 1 due to pull-up
		CALL	Delay
		RET

; -----------I2C Subroutines end-------------------------------------------------
