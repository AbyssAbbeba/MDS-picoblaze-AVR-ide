;==============================================================================;
;
; Tesla Agregator
; Michal Kubicek (michal.kubicek@email.cz)
;
;==============================================================================;
;
;   CCCC     AAA    L        L        SSSS         TTTTTTTTT  EEEEEEE  X     X  TTTTTTTTT
;  C    C   A   A   L        L       S    S            T      E         X   X       T    
;  C       A     A  L        L       S                 T      E          X X        T    
;  C       AAAAAAA  L        L        SSSS             T      EEEE        X         T    
;  C       A     A  L        L            S            T      E          X X        T    
;  C    C  A     A  L        L       S    S            T      E         X   X       T    
;   CCCC   A     A  LLLLLLL  LLLLLLL  SSSS             T      EEEEEEE  X     X      T    
;
;==============================================================================;

; UART bit masks
CONSTANT UART_Tx_data_present   , 00000001'b        ; Tx   data_present - bit0
CONSTANT UART_Tx_half_full      , 00000010'b        ;         half_full - bit1
CONSTANT UART_Tx_full           , 00000100'b        ;              full - bit2
CONSTANT UART_Rx_data_present   , 00001000'b        ; Rx   data_present - bit3
CONSTANT UART_Rx_half_full      , 00010000'b        ;         half_full - bit4
CONSTANT UART_Rx_full           , 00100000'b        ;              full - bit5
;
CONSTANT UART_tx_reset          , 00000001'b        ; uart_tx6 reset - bit0
CONSTANT UART_rx_reset          , 00000010'b        ; uart_rx6 reset - bit1
CONSTANT UART_reset             , 00000011'b        ; reset Tx and Rx
CONSTANT UART_operate           , 00000000'b        ; Tx and Rx free to operate

;==============================================================================;
;
; Text strings declaration
;
STRING  st_PicoBlaze$,  "PicoBlaze "
STRING  st_Online$,     "Online"
STRING  st_Offline$,    "Offline"
STRING  st_Status$,     "Status: "
STRING  st_1000Mb$,     "1000 Mb/s"
STRING  st_100Mb$,      " 100 Mb/s"
STRING  st_10Mb$,       "  10 Mb/s"
STRING  st_Discon$,     "Disconnected"
STRING  st_InitPer$,    "Initializing peripherals... "
STRING  st_MAC$,        "MAC "
STRING  st_PHY$,        "PHY "
STRING  st_ROM$,        "ROM "
STRING  st_SFP$,        "SFP "
STRING  st_Port$,       "Port "
STRING  st_TriDot$,     "..."
STRING  st_TriSpace$,   "   "
STRING  st_Wait$,       "Wait"
STRING  st_Error$,      "ERROR!"
STRING  st_Failed$,     "FAILED!"
STRING  st_Done$,       "DONE!"
STRING  st_88E1111$,    "88E1111"
STRING  st_VSC8634$,    "VSC8634 "
STRING  st_UnsSFP$,     "Unsupported SFP module!"
STRING  st_NoSFP$,      "No SFP detected!"
STRING  st_SN$,         "S/N: "
STRING  st_SW$,         "SW build:  "
STRING  st_HW$,         "HW build:  "
STRING  st_Address$,    "Address: "
STRING  st_FDX$,        "FDX"
STRING  st_HDX$,        "HDX"
STRING  st_MDIX$,       "MDI-X"
STRING  st_FIFO$,       "FIFO "
STRING  st_GTP$,        "GTP "
STRING  st_AGR$,        "AGR "
STRING  st_PRI$,        "PRI "
STRING  st_RAD$,        "RAD "
STRING  st_LAG$,        "LAG "
STRING  st_CableCheck$, "Checking cables"
STRING  st_Master$,     "Master"
STRING  st_Slave$,      "Slave"
STRING  st_Direct$,     "Direct"
STRING  st_Isolate$,    "Isolate"
STRING  st_Loopback$,   "Loopback"
STRING  st_Autodetect$, "Autodetect"
STRING  st_HOST$,        "HOST"
STRING  st_ANEG$,        "ANEG"
STRING  st_MDIO$,        "MDIO"
STRING  st_I2C$,         "I2C"
;
;------------------------------------------------------------------------------;
; Predefined autogenerated strings
;------------------------------------------------------------------------------;
;
;  STRING timestamp$, "14:17:58"
;  STRING datestamp$, "31 Jul 2012"
;  STRING KCPSM6_version$, "v2.30"
;
;==============================================================================;
; Usage of strings
;==============================================================================;
;
;                    LOAD        s4, st_TimeStamp'upper
;                    LOAD        s3, st_TimeStamp'lower
;                    CALL        send_string
;
;==============================================================================;
;
; Predefined text message procedures
;
;  mess_time          "14:17:58"
;  mess_date          "31 Jul 2012"
;  mess_KCPSM6_v      "v2.31"
;
;  mess_Pico          "PicoBlaze "
;  mess_Online        "Online"
;  mess_Offline       "Offline"
;  mess_Status        "Status: "
;  mess_1000M         "1000 Mb/s"
;  mess_100M          " 100 Mb/s"
;  mess_10M           "  10 Mb/s"
;  mess_Discon        "Disconnected"
;  mess_InitPer       "Initializing peripherals... "
;  mess_MAC           "MAC "
;  mess_PHY           "PHY "
;  mess_SFP           "SFP "
;  mess_Port          "Port "
;  mess_TriDot        "..."
;  mess_TriSpace      "   "
;  mess_Wait          "Wait"
;  mess_Error         "ERROR!"
;  mess_Failed        "FAILED!"
;  mess_Done          "DONE!"
;  mess_88E1111       "88E1111"
;  mess_VCS           "VSC8634 "
;  mess_UnsSFP        "Unsupported SFP module!"
;  mess_noSFP         "No SFP detected!"
;  mess_SN            "S/N: "
;  mess_SW            "SW build:  "
;  mess_HW            "HW build:  "
;  mess_Address       "Address:  "
;  mess_FDX           "FDX"
;  mess_HDX           "HDX"
;  mess_MDIX          "MDI-X"
;  mess_FIFO          "FIFO "
;  mess_GTP,          "GTP "
;  mess_AGR,          "AGR "
;  mess_PRI,          "PRI "
;  mess_RAD,          "RAD "
;  mess_LAG,          "LAG "
;  mess_CableCheck,   "Checking cables"
;  mess_Master,       "Master"
;  mess_Slave,        "Slave"
;  mess_Direct,       "Direct"
;  mess_Isolate,      "Isolate"
;  mess_Loopback,     "Loopback"
;  mess_Autodetect,   "Autodetect"
;  mess_HOST,         "HOST"
;  mess_ANEG,         "ANEG"
;  mess_MDIO,         "MDIO"
;  mess_I2C,          "I2C"
;
;  wellcome_msg
;
;==============================================================================;
;
;   send_CHAR       s9 (s0)
;   send_BYTE       s9 (s0, s1)
;
;   send_CRLF       (s9, s0)
;   send_SPACE      (s9, s0)
;   send_TAB        (s9, s0)
;   send_CLRSCR     (s9, s0); backpsace
;
;   Send_string     sB, sA (s9, s0)
;   mess_line       "================================"
;
;==============================================================================;




;==============================================================================;
; Reset UART Tx and Rx
;
;  CALL             reset_UART
;
; Inputs:           NONE
; Outputs:          NONE
; Procedures used:  NONE
;==============================================================================;

reset_UART:         OUTPUTK     UART_reset, F
                    OUTPUTK     UART_operate, F
                    RETURN 

;==============================================================================;

; Basic UART text output procedures (CALLs)

;==============================================================================;
; Send character stored in s9 via UART
; Reister used: s0, (s1, s2,) s9
; Procedures used: send_CHAR (s0, s9 + s1, s2 when BrayTerminal patch active)
;==============================================================================;
send_CHAR:          INPUT       s0, 00     ; checking UART status
                    TEST        s0, UART_Tx_half_full   ; can Tx accept another byte?
                    JUMP        NZ, send_CHAR           ; if not, wait until Tx is ready
                    OUTPUT      s9, 00      ; Send the character
                   ;CALL        wait_1ms                ; patch for Bray Terminal
                    RETURN                              ; Return from procedure
                    
;==============================================================================;
; Procedure for sending content of "s9" register in hexadecimal ASCII format
;   (two characters, one for each nibble)
; Reister used: s0, (s1, s2,) s9, sD
; Procedures used: send_CHAR (s0, s9 + s1, s2 when BrayTerminal patch active)
;==============================================================================;
send_BYTE:          LOAD      sD, s9           ; make a backup of s9
                    SR0       s9               ; move upper nibble to lower nibble
                    SR0       s9
                    SR0       s9
                    SR0       s9
                    COMPARE   s9, 0A           ; if not greater than 9, than it is a number
                    JUMP      C, SendBNum1     ; C is set when Temp < 10 (Temp-10)
                    ADD       s9, 37           ; when letter, add 37; letter conversion
                    JUMP      SendB1
SendBNum1:          ADD       s9, 30           ; when number, add 30; number conversion
SendB1:             CALL      send_CHAR         ; Send Character

                    LOAD      s9, sD           ; load the whole byte again
                    AND       s9, 0F           ; select second character
                    COMPARE   s9, 10'd         ; if not greater than 9, than number
                    JUMP      C, SendBNum2     ; C is set when Temp < 10 (Temp-10 under 0)
                    ADD       s9, 37           ; when letter, add 37; letter conversion
                    JUMP      SendB2
SendBNum2:          ADD       s9, 30           ; when number, add 30; number conversion
SendB2:             CALL      send_CHAR         ; Send character
                    RETURN

;==============================================================================;
; Simple messages
; Reister used: s0, (s1, s2,) s9, sC
; Procedures used: send_CHAR (s0, s9 + s1, s2 when BrayTerminal patch active)
;==============================================================================;
send_CRLF:          LOAD      s9, 0D           ; Load CR character
                    CALL      send_CHAR         ; Send CR character
                   ;LOAD      s9, 0A           ; Load LF character
                   ;CALL      send_CHAR         ; Send LF character
                    RETURN                     ; Return from procedure

send_SPACE:         LOAD      s9, 20           ; SPACE character
                    CALL      send_CHAR
                    RETURN

send_TAB:           LOAD      s9, 09           ; TAB character
                    CALL      send_CHAR
                    RETURN

send_CLRSCR:        LOAD      s9, 08           ; 0x08 = backspace character
                    CALL      send_CHAR
                    RETURN

;==============================================================================;
; send line of 32 "=" characters
; Reister used: s0, (s1, s2,) s9, sC
; Procedures used: send_CRLF, send_CHAR (s0, s9 + s1, s2 when BrayTerminal patch active)
;==============================================================================;

mess_line:          LOAD        sC, 32'd            ; send 32 "=" characters
                    LOAD        s9, 3D              ; "=" character
mess_line1:         CALL        send_CHAR
                    SUB         sC, 01              ; Decrement message counter
                    JUMP        NZ, mess_line1      ; if sC is not zero, send another character of first line
                    CALL        send_CRLF
                    RETURN

;==============================================================================;
; send string on address in sA, sB
; Reister used: s0, (s1, s2,) s9, sA, sB, sC
; Procedures used: send_CHAR (s0, s9 + s1, s2 when BrayTerminal patch active)
;==============================================================================;

send_string:        CALL@       (sB, sA)        ; load next character from the string
                    COMPARE     s9, 00          ; string delimiter
                    RETURN      Z               ; return when string delimiter detected
                    CALL        send_CHAR        ; otherwise send character
                    ADD         sA, 01          ; increment string pointer (lower byte)
                    ADDCY       sB, 00          ; increment string pointer (upper byte)
                    JUMP        send_string     ; send next string character

;==============================================================================;
; Write string at address in sA, sB to I2C memory to address s4
; Registers used: sA, sB, s9
; Procedures used: none
;==============================================================================;

I2C_WR_string:      CALL@       (sB, sA)                ; load next character from the string
                    COMPARE     s9, 00                  ; string delimiter
                    RETURN      Z                       ; return when string delimiter detected
                    LOAD        s5, s9                  ; otherwise prepare data for write
                    CALL        000             ; write character to memory
                    ADD         sA, 01                  ; increment string pointer (lower byte)
                    ADDCY       sB, 00                  ; increment string pointer (upper byte)
                    ADD         s4, 01                  ; increment I2C memory (register) address
                    JUMP        I2C_WR_string           ; send next string character

;==============================================================================;
; Text string definitions
;==============================================================================;

st_TimeStamp:       LOAD&RETURN s9, timestamp$
                    LOAD&RETURN s9, 00
st_DateStamp:       LOAD&RETURN s9, datestamp$
                    LOAD&RETURN s9, 00
st_Version:         LOAD&RETURN s9, KCPSM6_version$
                    LOAD&RETURN s9, 00

st_PicoBlaze:       LOAD&RETURN s9, st_PicoBlaze$
                    LOAD&RETURN s9, 00
st_Online:          LOAD&RETURN s9, st_Online$
                    LOAD&RETURN s9, 00
st_Offline:         LOAD&RETURN s9, st_Offline$
                    LOAD&RETURN s9, 00
st_Status:          LOAD&RETURN s9, st_Status$
                    LOAD&RETURN s9, 00
st_1000Mb:          LOAD&RETURN s9, st_1000Mb$
                    LOAD&RETURN s9, 00
st_100Mb:           LOAD&RETURN s9, st_100Mb$
                    LOAD&RETURN s9, 00
st_10Mb:            LOAD&RETURN s9, st_10Mb$
                    LOAD&RETURN s9, 00
st_Discon:          LOAD&RETURN s9, st_Discon$
                    LOAD&RETURN s9, 00
st_InitPer:         LOAD&RETURN s9, st_InitPer$
                    LOAD&RETURN s9, 00
st_MAC:             LOAD&RETURN s9, st_MAC$
                    LOAD&RETURN s9, 00
st_SFP:             LOAD&RETURN s9, st_SFP$
                    LOAD&RETURN s9, 00
st_PHY:             LOAD&RETURN s9, st_PHY$
                    LOAD&RETURN s9, 00
st_ROM:             LOAD&RETURN s9, st_ROM$
                    LOAD&RETURN s9, 00
st_Port:            LOAD&RETURN s9, st_Port$
                    LOAD&RETURN s9, 00
st_TriDot:          LOAD&RETURN s9, st_TriDot$
                    LOAD&RETURN s9, 00
st_TriSpace:        LOAD&RETURN s9, st_TriSpace$
                    LOAD&RETURN s9, 00
st_Wait:            LOAD&RETURN s9, st_Wait$
                    LOAD&RETURN s9, 00
st_Error:           LOAD&RETURN s9, st_Error$
                    LOAD&RETURN s9, 00
st_Failed:          LOAD&RETURN s9, st_Failed$
                    LOAD&RETURN s9, 00
st_Done:            LOAD&RETURN s9, st_Done$
                    LOAD&RETURN s9, 00
st_88E1111:         LOAD&RETURN s9, st_88E1111$
                    LOAD&RETURN s9, 00
st_VSC8634:         LOAD&RETURN s9, st_VSC8634$
                    LOAD&RETURN s9, 00
st_UnsSFP:          LOAD&RETURN s9, st_UnsSFP$
                    LOAD&RETURN s9, 00
st_NoSFP:           LOAD&RETURN s9, st_NoSFP$
                    LOAD&RETURN s9, 00
st_SN:              LOAD&RETURN s9, st_SN$
                    LOAD&RETURN s9, 00
st_SW:              LOAD&RETURN s9, st_SW$
                    LOAD&RETURN s9, 00
st_HW:              LOAD&RETURN s9, st_HW$
                    LOAD&RETURN s9, 00
st_Address:         LOAD&RETURN s9, st_Address$
                    LOAD&RETURN s9, 00
st_FDX:             LOAD&RETURN s9, st_FDX$
                    LOAD&RETURN s9, 00
st_HDX:             LOAD&RETURN s9, st_HDX$
                    LOAD&RETURN s9, 00
st_MDIX:            LOAD&RETURN s9, st_MDIX$
                    LOAD&RETURN s9, 00
st_FIFO:            LOAD&RETURN s9, st_FIFO$
                    LOAD&RETURN s9, 00
st_GTP:             LOAD&RETURN s9, st_GTP$
                    LOAD&RETURN s9, 00
st_AGR:             LOAD&RETURN s9, st_AGR$
                    LOAD&RETURN s9, 00
st_PRI:             LOAD&RETURN s9, st_PRI$
                    LOAD&RETURN s9, 00
st_RAD:             LOAD&RETURN s9, st_RAD$
                    LOAD&RETURN s9, 00
st_LAG:             LOAD&RETURN s9, st_LAG$
                    LOAD&RETURN s9, 00
st_CableCheck:      LOAD&RETURN s9, st_CableCheck$
                    LOAD&RETURN s9, 00
st_Master:          LOAD&RETURN s9, st_Master$
                    LOAD&RETURN s9, 00
st_Slave:           LOAD&RETURN s9, st_Slave$
                    LOAD&RETURN s9, 00
st_Direct:          LOAD&RETURN s9, st_Direct$
                    LOAD&RETURN s9, 00
st_Isolate:         LOAD&RETURN s9, st_Isolate$
                    LOAD&RETURN s9, 00
st_Loopback:        LOAD&RETURN s9, st_Loopback$
                    LOAD&RETURN s9, 00
st_Autodetect:      LOAD&RETURN s9, st_Autodetect$
                    LOAD&RETURN s9, 00
st_HOST:            LOAD&RETURN s9, st_HOST$
                    LOAD&RETURN s9, 00
st_ANEG:            LOAD&RETURN s9, st_ANEG$
                    LOAD&RETURN s9, 00
st_MDIO:            LOAD&RETURN s9, st_MDIO$
                    LOAD&RETURN s9, 00
st_I2C:             LOAD&RETURN s9, st_I2C$
                    LOAD&RETURN s9, 00



;==============================================================================;
; Auto-gemerated strings
;==============================================================================;

; "14:17:58"
mess_time:          LOAD      sB, st_TimeStamp'upper
                    LOAD      sA, st_TimeStamp'lower
                    CALL      send_string
                    RETURN

; "31 Jul 2012"
mess_date:          LOAD      sB, st_DateStamp'upper
                    LOAD      sA, st_DateStamp'lower
                    CALL      send_string
                    RETURN

; "v2.30"
mess_KCPSM6_v:      LOAD      sB, st_Version'upper
                    LOAD      sA, st_Version'lower
                    CALL      send_string
                    RETURN

;==============================================================================;
; User-defined strings
;==============================================================================;

;"PicoBlaze "
mess_Pico:          LOAD      sB, st_PicoBlaze'upper
                    LOAD      sA, st_PicoBlaze'lower
                    CALL      send_string
                    RETURN

; "Online"
mess_Online:        LOAD      sB, st_Online'upper
                    LOAD      sA, st_Online'lower
                    CALL      send_string
                    RETURN

; "Offline"
mess_Offline:       LOAD      sB, st_Offline'upper
                    LOAD      sA, st_Offline'lower
                    CALL      send_string
                    RETURN

;"Status: "
mess_Status:        LOAD      sB, st_Status'upper
                    LOAD      sA, st_Status'lower
                    CALL      send_string
                    RETURN

; "1000 Mb/s"
mess_1000M:         LOAD      sB, st_1000Mb'upper
                    LOAD      sA, st_1000Mb'lower
                    CALL      send_string
                    RETURN

; " 100 Mb/s"
mess_100M:          LOAD      sB, st_100Mb'upper
                    LOAD      sA, st_100Mb'lower
                    CALL      send_string
                    RETURN

; "  10 Mb/s"
mess_10M:           LOAD      sB, st_10Mb'upper
                    LOAD      sA, st_10Mb'lower
                    CALL      send_string
                    RETURN

; "Disconnected"
mess_Discon:        LOAD      sB, st_Discon'upper
                    LOAD      sA, st_Discon'lower
                    CALL      send_string
                    RETURN

; "Initializing peripherals... "
mess_InitPer:       LOAD      sB, st_InitPer'upper
                    LOAD      sA, st_InitPer'lower
                    CALL      send_string
                    RETURN

; "MAC "
mess_MAC:           LOAD      sB, st_MAC'upper
                    LOAD      sA, st_MAC'lower
                    CALL      send_string
                    RETURN

; "PHY "
mess_PHY:           LOAD      sB, st_PHY'upper
                    LOAD      sA, st_PHY'lower
                    CALL      send_string
                    RETURN

; "ROM "
mess_ROM:           LOAD      sB, st_ROM'upper
                    LOAD      sA, st_ROM'lower
                    CALL      send_string
                    RETURN

; "SFP "
mess_SFP:           LOAD      sB, st_SFP'upper
                    LOAD      sA, st_SFP'lower
                    CALL      send_string
                    RETURN

; "Port "
mess_Port:          LOAD      sB, st_Port'upper
                    LOAD      sA, st_Port'lower
                    CALL      send_string
                    RETURN

; "..."
mess_TriDot:        LOAD      sB, st_TriDot'upper
                    LOAD      sA, st_TriDot'lower
                    CALL      send_string
                    RETURN

; "   "
mess_TriSpace:      LOAD      sB, st_TriSpace'upper
                    LOAD      sA, st_TriSpace'lower
                    CALL      send_string
                    RETURN

; "Wait"
mess_Wait:          LOAD      sB, st_Wait'upper
                    LOAD      sA, st_Wait'lower
                    CALL      send_string
                    RETURN

; "ERROR!"
mess_Error:         LOAD      sB, st_Error'upper
                    LOAD      sA, st_Error'lower
                    CALL      send_string
                    RETURN

; "FAILED!"
mess_Failed:        LOAD      sB, st_Failed'upper
                    LOAD      sA, st_Failed'lower
                    CALL      send_string
                    RETURN

; "DONE!"
mess_Done:          LOAD      sB, st_Done'upper
                    LOAD      sA, st_Done'lower
                    CALL      send_string
                    RETURN

; "88E1111 "
mess_88E1111:       LOAD      sB, st_88E1111'upper
                    LOAD      sA, st_88E1111'lower
                    CALL      send_string
                    RETURN

; "VSC8634 "
mess_VCS:           LOAD      sB, st_VSC8634'upper
                    LOAD      sA, st_VSC8634'lower
                    CALL      send_string
                    RETURN

; "Unsupported SFP module!"
mess_UnsSFP:        LOAD      sB, st_UnsSFP'upper
                    LOAD      sA, st_UnsSFP'lower
                    CALL      send_string
                    RETURN

; "No SFP detected!"
mess_noSFP:         LOAD      sB, st_NoSFP'upper
                    LOAD      sA, st_NoSFP'lower
                    CALL      send_string
                    RETURN

; "S/N: "
mess_SN:            LOAD      sB, st_SN'upper
                    LOAD      sA, st_SN'lower
                    CALL      send_string
                    RETURN

; "SW build:  "
mess_SW:            LOAD      sB, st_SW'upper
                    LOAD      sA, st_SW'lower
                    CALL      send_string
                    RETURN

; "HW build:  "
mess_HW:            LOAD      sB, st_HW'upper
                    LOAD      sA, st_HW'lower
                    CALL      send_string
                    RETURN

; "Address: "
mess_Address:       LOAD      sB, st_Address'upper
                    LOAD      sA, st_Address'lower
                    CALL      send_string
                    RETURN

; "FDX"
mess_FDX:           LOAD      sB, st_FDX'upper
                    LOAD      sA, st_FDX'lower
                    CALL      send_string
                    RETURN

; "HDX"
mess_HDX:           LOAD      sB, st_HDX'upper
                    LOAD      sA, st_HDX'lower
                    CALL      send_string
                    RETURN

; "MDI-X"
mess_MDIX:          LOAD      sB, st_MDIX'upper
                    LOAD      sA, st_MDIX'lower
                    CALL      send_string
                    RETURN

; "FIFO "
mess_FIFO:          LOAD      sB, st_FIFO'upper
                    LOAD      sA, st_FIFO'lower
                    CALL      send_string
                    RETURN

; "GTP "
mess_GTP:           LOAD      sB, st_GTP'upper
                    LOAD      sA, st_GTP'lower
                    CALL      send_string
                    RETURN

; "AGR "
mess_AGR:           LOAD      sB, st_AGR'upper
                    LOAD      sA, st_AGR'lower
                    CALL      send_string
                    RETURN

; "PRI "
mess_PRI:           LOAD      sB, st_PRI'upper
                    LOAD      sA, st_PRI'lower
                    CALL      send_string
                    RETURN

; "RAD "
mess_RAD:           LOAD      sB, st_RAD'upper
                    LOAD      sA, st_RAD'lower
                    CALL      send_string
                    RETURN

; "LAG "
mess_LAG:           LOAD      sB, st_LAG'upper
                    LOAD      sA, st_LAG'lower
                    CALL      send_string
                    RETURN

; "Checking cables"
mess_CableCheck:    LOAD      sB, st_CableCheck'upper
                    LOAD      sA, st_CableCheck'lower
                    CALL      send_string
                    RETURN

; "Master"
mess_Master:        LOAD      sB, st_Master'upper
                    LOAD      sA, st_Master'lower
                    CALL      send_string
                    RETURN

; "Slave"
mess_Slave:         LOAD      sB, st_Slave'upper
                    LOAD      sA, st_Slave'lower
                    CALL      send_string
                    RETURN

; "Direct"
mess_Direct:        LOAD      sB, st_Direct'upper
                    LOAD      sA, st_Direct'lower
                    CALL      send_string
                    RETURN

; "Isolate"
mess_Isolate:       LOAD      sB, st_Isolate'upper
                    LOAD      sA, st_Isolate'lower
                    CALL      send_string
                    RETURN

; "Loopback"
mess_Loopback:      LOAD      sB, st_Loopback'upper
                    LOAD      sA, st_Loopback'lower
                    CALL      send_string
                    RETURN

; "Autodetect"
mess_Autodetect:    LOAD      sB, st_Autodetect'upper
                    LOAD      sA, st_Autodetect'lower
                    CALL      send_string
                    RETURN

; "HOST"
mess_HOST:          LOAD      sB, st_HOST'upper
                    LOAD      sA, st_HOST'lower
                    CALL      send_string
                    RETURN

; "ANEG"
mess_ANEG:          LOAD      sB, st_ANEG'upper
                    LOAD      sA, st_ANEG'lower
                    CALL      send_string
                    RETURN

; "MDIO"
mess_MDIO:          LOAD      sB, st_MDIO'upper
                    LOAD      sA, st_MDIO'lower
                    CALL      send_string
                    RETURN

; "I2C"
mess_I2C:           LOAD      sB, st_I2C'upper
                    LOAD      sA, st_I2C'lower
                    CALL      send_string
                    RETURN

;==============================================================================;
; Send PicoBlaze wellcome message
;==============================================================================;

    ;     ================================
    ;     PicoBlaze v2.31
    ;     SW build:  14:17:58  31 Jul 2012
    ;     HW build:  A1
    ;     ================================


wellcome_msg:       CALL        send_CLRSCR     ; clear terminal screen
                   ;CALL        wait_100ms
                    CALL        send_CRLF
                    CALL        send_CRLF
        ; line 1 of the wellcome message
                    CALL        send_TAB
                    CALL        mess_line
        ; line 2 of the wellcome message
                    CALL        send_TAB
                    CALL        mess_Pico
                    CALL        mess_KCPSM6_v
                    CALL        send_CRLF
        ; line 3 of the wellcome message
                    CALL        send_TAB
                    CALL        mess_SW
                    CALL        mess_time
                    CALL        send_SPACE
                    CALL        send_SPACE
                    CALL        mess_date
                    CALL        send_CRLF
        ; line 4 of the wellcome message
                    CALL        send_TAB
                    CALL        mess_HW
                    HWBUILD     s9
                    CALL        send_BYTE
                    CALL        send_CRLF
        ; line 5 of the wellcome message
                    CALL        send_TAB
                    CALL        mess_line
                    CALL        send_CRLF
                    RETURN
		
;==============================================================================;
