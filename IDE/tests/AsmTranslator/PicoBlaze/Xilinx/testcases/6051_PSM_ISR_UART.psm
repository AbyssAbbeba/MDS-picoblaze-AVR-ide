;==============================================================================;
;
; Tesla Agregator
; Michal Kubicek (michal.kubicek@email.cz)
;
;==============================================================================;
;
;   I  N     N  TTTTTTTTT  EEEEEEE  RRRRRR   RRRRRR   U      U  PPPPPP   TTTTTTTTT
;   I  NN    N      T      E        R     R  R     R  U      U  P     P      T
;   I  N N   N      T      E        R     R  R     R  U      U  P     P      T
;   I  N  N  N      T      EEEE     RRRRRR   RRRRRR   U      U  PPPPPP       T
;   I  N   N N      T      E        R   R    R   R    U      U  P            T
;   I  N    NN      T      E        R    R   R    R    U    U   P            T
;   I  N     N      T      EEEEEEE  R     R  R     R    UUUU    P            T
;
;==============================================================================;

ISR_UART:           INPUT       s5, ID_UART_data    ; read data from UART

                    COMPARE     s5, 0D              ; check for ENTER
                    JUMP        Z, ENTER_rx         ; ENTER service procedure

                    COMPARE     s5, 43              ; check for "C"
                    JUMP        Z, C_rx             ; "C" service procedure
                    COMPARE     s5, 63              ; check for "c"
                    JUMP        Z, C_rx             ; "C" service procedure

                    COMPARE     s5, 52              ; check for "R"
                    JUMP        Z, R_rx             ; "R" service procedure
                    COMPARE     s5, 72              ; check for "r"
                    JUMP        Z, R_rx             ; "R" service procedure

                    COMPARE     s5, 4D              ; check for "M"
                    JUMP        Z, Set_AGR_Master
                    COMPARE     s5, 6D              ; check for "m"
                    JUMP        Z, Set_AGR_Master

                    COMPARE     s5, 53              ; check for "S"
                    JUMP        Z, Set_AGR_Slave
                    COMPARE     s5, 73              ; check for "s"
                    JUMP        Z, Set_AGR_Slave

                    COMPARE     s5, 49              ; check for "I"
                    JUMP        Z, Set_Isolate
                    COMPARE     s5, 69              ; check for "i"
                    JUMP        Z, Set_Isolate

                    COMPARE     s5, 44              ; check for "D"
                    JUMP        Z, Set_Direct
                    COMPARE     s5, 64              ; check for "d"
                    JUMP        Z, Set_Direct

                    COMPARE     s5, 4C              ; check for "L"
                    JUMP        Z, Set_Loopback
                    COMPARE     s5, 6C              ; check for "l"
                    JUMP        Z, Set_Loopback

                    COMPARE     s5, 41              ; check for "A"
                    JUMP        Z, Set_Autodetect
                    COMPARE     s5, 61              ; check for "a"
                    JUMP        Z, Set_Autodetect

                    COMPARE     s5, 32              ; check for "2"
                    JUMP        Z, i2c_rx

                    COMPARE     s5, 48              ; check for "H"
                    JUMP        Z, H_rx
                    COMPARE     s5, 68              ; check for "h"
                    JUMP        Z, H_rx



                    COMPARE     s5, 30              ; check for "0"
                    JUMP        Z, Speed_0_rx
                    COMPARE     s5, 31              ; check for "1"
                    JUMP        Z, Speed_1_rx
                    COMPARE     s5, 34              ; check for "4"
                    JUMP        Z, Speed_4_rx


                    COMPARE     s5, 50              ; check for "P"
                    JUMP        Z, P_rx             ; "P" service procedure
                    COMPARE     s5, 70              ; check for "p"
                    JUMP        Z, P_rx             ; "P" service procedure



;                   COMPARE     s0, 1B              ; check for ESC
;                   JUMP        Z, ESC_rx           ; ESC service procedure
                    JUMP        ISR_UART_end        ; other characters => exit interrupt subroutine

;==============================================================================;
; List all standard PHY registers (all channels), SFP ROM and SFP PHY standard registers
;==============================================================================;

ENTER_rx:           CALL        mess_VCS            ; send message "VSC8634 PHY Status: "
                    CALL        mess_PHY
                    CALL        mess_Status
                    CALL        send_CRLF
    
                    LOAD        s3, 00              ; load address of first PHY (first channel)
                    LOAD        s4, 00              ; read from register address 0
    
rd_VSC8634_PHY:     CALL        SMI_RD              ; read data
                    CALL        send_SMI_reg        ; send data via UART
                    ADD         s4, 01              ; select next register
                    COMPARE     s4, 20              ; last register read?
                    JUMP        NZ, rd_VSC8634_PHY  ; if not, read next register

                    CALL        send_CRLF
                    CALL        send_CRLF
                    LOAD        s4, 00              ; read from register address 0
                    ADD         s3, 01              ; select next device (PHY channel)
                    COMPARE     s3, 04              ; last device read?
                    JUMP        NZ, rd_VSC8634_PHY  ; if not, read next register
    
                    CALL        send_CRLF
                    CALL        send_CRLF


;==============================================================================;
; SFP    EEPROM     SFP_ROM_RD              device address = 10 (EEPROM with basic SFP info)

rd_SFP_ROM:         LOAD        s3, ID_SFP_EEPROM_ADDR ; load EEPROM address of SFP/PHY on TWI

                    CALL        mess_SFP            ; send message "SFP PCS Address 0x10 Status: "
                    CALL        mess_ROM
                    CALL        mess_Address
                    LOAD        s9, s3
                    CALL        send_BYTE
                    CALL        send_SPACE
                    CALL        mess_Status
                    CALL        send_CRLF
    
                    LOAD        s4, 00              ; read from register address 0
rd_SFP_ROM_i:       CALL        SFP_ROM_RD          ; read data
                    CALL        send_SFP_reg        ; send data via UART
                    CALL        send_CRLF
                    ADD         s4, 01              ; select next register
                    COMPARE     s4, 80              ; last register read?
                    JUMP        NZ, rd_SFP_ROM_i    ; if not, try next register
    
                    CALL        send_CRLF
                    CALL        send_CRLF

;==============================================================================;
; SFP    PHY        SFP_ROM_RD              device address = 16 (PHY chip inside SFP)

rd_SFP_PHY:         LOAD        s3, ID_SFP_PHY_ADDR    ; load PHY address of SFP/PHY on TWI

                    CALL        mess_SFP            ; send message "SFP PHY Address 0x16 Status: "
                    CALL        mess_PHY
                    CALL        mess_Address
                    LOAD        s9, s3
                    CALL        send_BYTE
                    CALL        send_SPACE
                    CALL        mess_Status
                    CALL        send_CRLF
    
                    LOAD        s4, 00              ; read from register address 0
rd_SFP_PHY_i:       CALL        SFP_PHY_RD          ; read data
                    CALL        send_SMI_reg        ; send data via UART
                    ADD         s4, 01              ; select next register
                    COMPARE     s4, 20              ; last register read?
                    JUMP        NZ, rd_SFP_PHY_i    ; if not, try next device
    
                    CALL        send_CRLF
                    CALL        send_CRLF
                    JUMP        ISR_UART_end

;==============================================================================;
; Report link status (all ports)
;==============================================================================;

R_rx:               CALL        report_all
                    JUMP        ISR_UART_end

;==============================================================================;
; Report link status (all ports)
;==============================================================================;

i2c_rx:             CALL        I2C_radio_emul_rd
                    JUMP        ISR_UART_end

;==============================================================================;
; I2C sort register dump (only selected registers are reported)
;==============================================================================;

P_rx:               CALL        I2C_reg_dump_short
                    JUMP        ISR_UART_end

;==============================================================================;
; Report cabling status
;==============================================================================;
; 15:12     Pair A
; 11:8      Pair B
;  7:4      Pair C
;  3:0      Pair D
;------------------------------------------------------------------------------;
; CODE      Denotes
;
; 0000      Correctly terminated pair
; 0001      Open pair
; 0010      Shorted pair
; 0100      Abnormal termination
; 1000      Cross-pair short to pair A
; 1001      Cross-pair short to pair B
; 1010      Cross-pair short to pair C
; 1011      Cross-pair short to pair D
; 1100      Abnormal cross-pair coupling to pair A
; 1101      Abnormal cross-pair coupling to pair B
; 1110      Abnormal cross-pair coupling to pair C
; 1111      Abnormal cross-pair coupling to pair D
;------------------------------------------------------------------------------;

C_rx:               CALL        send_CRLF
                    CALL        mess_CableCheck
                    CALL        mess_TriDot
                    CALL        send_CRLF
                    LOAD        s3, 00          ; select first channel (0; unused)

; Read REG_0x1A, PAGE 1 -------------------------------------------------------;
                    ; select next page
cable_test:         LOAD        s4, 1F          ; register 0x1F (select next page)
                    LOAD        s5, 01          ; LSB
                    LOAD        s6, 00          ; MSB
                    CALL        SMI_WR

                    ; trigger VeriPHY feature
                    LOAD        s4, 18          ; register 0x18 (24E)
                    LOAD        s5, 00000000'b  ; LSB
                    LOAD        s6, 10000000'b  ; MSB
                    CALL        SMI_WR

; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
;
; PHY nechce sesadi bit 15 v registru 24E respektive nastavit bit 14 v 24E
; Tim padem VeriPHY jakoby nikdy neskonci. Hodnoty lze vycist rucne po cca 5-10 s,
; ale neni jiste, jak moc je mozne udajum verit.
;
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                    ; check if VeriPHY has completed (read register 0x18 = 24E)
;check_test_done:    CALL        SMI_RD
;                    TEST        s6, 10000000'b  ; MSB
;                    JUMP        NZ, check_test_done
check_test_done:    CALL        SMI_RD
                    TEST        s6, 01000000'b  ; MSB
                    JUMP        NZ, check_test_done

                    ; send channel number
                    LOAD        s9, s3
                    CALL        send_BYTE
                    CALL        send_TAB

                    ; send content of register 0x18 (24E)
                    LOAD        s9, s6
                    CALL        send_BYTE
                    LOAD        s9, s5
                    CALL        send_BYTE
                    CALL        send_SPACE

                    ; read register 0x19 (25E) and send its content
                    LOAD        s4, 19
                    CALL        SMI_RD
                    LOAD        s9, s6
                    CALL        send_BYTE
                    LOAD        s9, s5
                    CALL        send_BYTE
                    CALL        send_SPACE

                    ; read register 0x1A (26E) and send its content
                    LOAD        s4, 1A
                    CALL        SMI_RD
                    LOAD        s9, s6
                    CALL        send_BYTE
                    LOAD        s9, s5
                    CALL        send_BYTE
                    CALL        send_SPACE

                    ; select base page again
                    LOAD        s4, 1F          ; register 0x1F (select base page)
                    LOAD        s5, 00          ; LSB
                    LOAD        s6, 00          ; MSB
                    CALL        SMI_WR
                    CALL        send_CRLF

; Next channel ----------------------------------------------------------------;
                    ADD         s3, 01
                    COMPARE     s3, 04          ; last channel done?
                    JUMP        NZ, cable_test
                    CALL        send_CRLF
                    CALL        send_CRLF
                    JUMP        ISR_UART_end

;==============================================================================;
;==============================================================================;
; CONSTANT Mode_Isolate           , 00000000'b
; CONSTANT Mode_Loopback          , 00000001'b
; CONSTANT Mode_Direct            , 00000010'b
; CONSTANT Mode_AGR_Slave         , 00000011'b
; CONSTANT Mode_AGR_Master        , 00000100'b
; CONSTANT Mode_Autodetect        , 00000111'b

Set_AGR_Master:     LOAD        s6, Mode_AGR_Master
                    JUMP        Set_mode_common

Set_AGR_Slave:      LOAD        s6, Mode_AGR_Slave
                    JUMP        Set_mode_common

Set_Isolate:        LOAD        s6, Mode_Isolate
                    JUMP        Set_mode_common

Set_Direct:         LOAD        s6, Mode_Direct
                    JUMP        Set_mode_common

Set_Loopback:       LOAD        s6, Mode_Loopback
                    JUMP        Set_mode_common

Set_Autodetect:     LOAD        s6, Mode_Autodetect
                   ;JUMP        Set_mode_common

Set_mode_common:    LOAD        s3, 53                  ; I2C device address
                    LOAD        s4, 00                  ; register address
                    CALL        I2C_radio_read
                    SL0         s6
                    SL0         s6
                    SL0         s6
                    SL0         s6
                    SL0         s6
                    AND         s5, 00011111'b          ; clear upper three bits
                    OR          s5, s6
                    CALL        I2C_radio_write
                   ;CALL        wait_10ms
                   ;CALL        AGR_Autodetect
                    JUMP        ISR_UART_end


;==============================================================================;
;==============================================================================;


Speed_4_rx:         LOAD        s6, C_Radio_Speed_4k0
                    SL0         s6
                    LOAD        s3, 53                  ; I2C device address
                    LOAD        s4, 00                  ; register address
                    CALL        I2C_radio_read
                    AND         s5, 11100000'b          ; clear speed and link status, set link ONLINE
                    OR          s5, s6                  ; set speed
                   ;OR          s5, 00000001'b          ; set link status to OFFLINE
                    CALL        I2C_radio_write
                    JUMP        ISR_UART_end
                    
Speed_1_rx:         LOAD        s6, C_Radio_Speed_1k0
                    SL0         s6
                    LOAD        s3, 53                  ; I2C device address
                    LOAD        s4, 00                  ; register address
                    CALL        I2C_radio_read
                    AND         s5, 11100000'b          ; clear speed and link status, set link ONLINE
                    OR          s5, s6                  ; set speed
                   ;OR          s5, 00000001'b          ; set link status to OFFLINE
                    CALL        I2C_radio_write
                    JUMP        ISR_UART_end

Speed_0_rx:         LOAD        s6, C_Radio_Speed_1k0   ; speed info for 0k0 has no meaning
                    SL0         s6
                    LOAD        s3, 53                  ; I2C device address
                    LOAD        s4, 00                  ; register address
                    CALL        I2C_radio_read
                    AND         s5, 11100000'b          ; clear speed and link status, set link ONLINE
                    OR          s5, s6                  ; set speed
                    OR          s5, 00000001'b          ; set link status to OFFLINE
                    CALL        I2C_radio_write
                    JUMP        ISR_UART_end


;==============================================================================;
; Read HOST registers
;==============================================================================;

H_rx:               CALL        send_CRLF
                    LOAD        s3, 00              ; select HOST_0
                    OUTPUT      s3, ID_HOST_select
                    CALL        rep_H_HOST_regs
                    CALL        rep_H_MDIO_regs

                    LOAD        s3, 01              ; select HOST_1
                    OUTPUT      s3, ID_HOST_select
                    CALL        rep_H_HOST_regs
                    CALL        rep_H_MDIO_regs

                    LOAD        s3, 02              ; select HOST_2
                    OUTPUT      s3, ID_HOST_select
                    CALL        rep_H_HOST_regs
                    CALL        rep_H_MDIO_regs

                    LOAD        s3, 03              ; select HOST_3
                    OUTPUT      s3, ID_HOST_select
                    CALL        rep_H_HOST_regs
                    CALL        rep_H_MDIO_regs

                    JUMP        ISR_UART_end

;------------------------------------------------------------------------------;

rep_H_HOST_regs:    CALL        send_CRLF
                    CALL        mess_HOST
                    CALL        send_SPACE
                    INPUT       s9, ID_HOST_select
                    CALL        send_BYTE
                    CALL        send_CRLF
                    LOAD        s4, 02              ; 0x200
                    LOAD        s3, 00
                    CALL        send_HOST_reg
                    LOAD        s4, 02              ; 0x240
                    LOAD        s3, 40
                    CALL        send_HOST_reg
                    LOAD        s4, 02              ; 0x280
                    LOAD        s3, 80
                    CALL        send_HOST_reg
                    LOAD        s4, 02              ; 0x2C0
                    LOAD        s3, C0
                    CALL        send_HOST_reg
                    LOAD        s4, 03              ; 0x300
                    LOAD        s3, 00
                    CALL        send_HOST_reg
                    LOAD        s4, 03              ; 0x340
                    LOAD        s3, 40
                    CALL        send_HOST_reg
                    RETURN

send_HOST_reg:      CALL        rd_HOST_MAC
                    CALL        send_TAB
                    LOAD        s9, s4
                    CALL        send_BYTE
                    LOAD        s9, s3
                    CALL        send_BYTE
                    CALL        send_SPACE
                    LOAD        s9, s8
                    CALL        send_BYTE
                    LOAD        s9, s7
                    CALL        send_BYTE
                    LOAD        s9, s6
                    CALL        send_BYTE
                    LOAD        s9, s5
                    CALL        send_BYTE
                    CALL        send_CRLF
                    RETURN

;------------------------------------------------------------------------------;

rep_H_MDIO_regs:    CALL        send_CRLF
                    CALL        mess_MDIO
                    CALL        send_SPACE
                    INPUT       s9, ID_HOST_select
                    CALL        send_BYTE
                    CALL        send_CRLF

                    LOAD        s3, 01              ; device address $01
                    LOAD        s4, 00              ; read from register address $00
H_rd_MDIO:          CALL        send_TAB
                    CALL        rd_HOST_MDIO        ; BUG!!!!!!! dummy read (first read access is not successful)
                    CALL        rd_HOST_MDIO
                    LOAD        s9, s3
                    CALL        send_BYTE
                    CALL        send_SPACE
                    LOAD        s9, s4
                    CALL        send_BYTE
                    CALL        send_SPACE
                    LOAD        s9, s6
                    CALL        send_BYTE
                    LOAD        s9, s5
                    CALL        send_BYTE
                    CALL        send_CRLF

                    ADD         s4, 01
                    COMPARE     s4, 17'd
                    JUMP        NZ, H_rd_MDIO
                    CALL        send_CRLF
                    RETURN

;==============================================================================;
ISR_UART_end:       JUMP        Int_End
;==============================================================================;
