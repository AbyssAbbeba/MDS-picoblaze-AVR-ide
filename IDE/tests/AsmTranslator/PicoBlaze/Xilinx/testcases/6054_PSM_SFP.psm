;==============================================================================;
;
; Tesla Agregator
; Michal Kubicek (michal.kubicek@email.cz)
;
;==============================================================================;
;
;   CCCC     AAA    L        L        SSSS            SSSS   EEEEEEE  RRRRRR 
;  C    C   A   A   L        L       S    S          S    S  E        R     R
;  C       A     A  L        L       S               S       E        R     R
;  C       AAAAAAA  L        L        SSSS            SSSS   EEEE     RRRRRR 
;  C       A     A  L        L            S               S  E        R      
;  C    C  A     A  L        L       S    S          S    S  E        R      
;   CCCC   A     A  LLLLLLL  LLLLLLL  SSSS            SSSS   E        R      
;
;==============================================================================;
;
;==============================================================================;
; SFP PHY setup
;    - detect presence and type of SFP module
;    - check whether it is 88E1111 based
;    - set Tri-Speed, SGMII-to-Copper, enable ANEG
;==============================================================================;
; detect SFP (PHY) presence and report its type
Setup_SFP:          LOAD        s3, ID_SFP_EEPROM_ADDR  ; load EEPROM address of SFP on TWI
                    TEST        sF, 01                  ; is bit 0 set? (SFP presence bit)
                    JUMP        Z, Detect_SFP_insert    ; SFP was not present, check whether it is now
                                                        ; otherwise SFP should be present, check for its unpliging
;------------------------------------------------------------------------------;
; SFP was present, check whether it still is present
Detect_SFP_unplug:  LOAD      s4, 00                ; register address
                    CALL      SFP_ROM_RD              ; read data from EEPROM
                    COMPARE   s5, 03                ; SFP transceiver?
                    JUMP      Z, Setup_SFP_done     ; SFP still present, leave procedure
                    ; SFP was unplugged
                    AND       sF, FC                ; clear bits 1,0 = SFP compatibility and presence
                    JUMP      no_SFP_present        ; report "no SFP"

;------------------------------------------------------------------------------;
; SFP was not present and now it is =>
;       - update sF register
;       - check SFP compatibility
;       - setup PHY in SFP

Detect_SFP_insert:  LOAD        s4, 00                ; register address
                    CALL        SFP_ROM_RD              ; read data from EEPROM
                    COMPARE     s5, 03                ; SFP transceiver?
                    JUMP        NZ, Setup_SFP_done    ; if not, no SFP was plugged in, finish setup
                    ; new SFP detected
                    OR          sF, 01                ; set bit 0 = SFP presence bit
                    CALL        SFP_ASCII_info      ; read and send info about SFP

;------------------------------------------------------------------------------;
; check SFP compatibility (currently only 88E1111 based SFPs are acceptable)
check_SFP_comp:     LOAD        s3, ID_SFP_PHY_ADDR     ; load PHY address of SFP on TWI

                    ; register 2 = 0x0141
                    LOAD        s4, 2'd                ; register address
                    CALL        SFP_PHY_RD              ; read register
                    COMPARE     s6, 01              ; check upper byte
                    JUMP        NZ, SFP_not_supported   ; report incompatible SFP
                    COMPARE     s5, 41              ; check lower byte
                    JUMP        NZ, SFP_not_supported   ; report incompatible SFP

                    ; register 3 = 0b000011001100xxxx = 0x0CCx
                    LOAD        s4, 3'd                ; register address
                    CALL        SFP_PHY_RD              ; read register
                    COMPARE     s6, 0C              ; check upper byte
                    JUMP        NZ, SFP_not_supported   ; report incompatible SFP
                    AND         s5, F0              ; mask lower nibble (chip revision)
                    COMPARE     s5, C0              ; check lower byte
                    JUMP        NZ, SFP_not_supported   ; report indompatible SFP
    
                    OR          sF, 02         ; set bit 1 = SFP is compatible

;------------------------------------------------------------------------------;
; 88E1111 setup (will not work for other PHYs)
; set Tri-speed, SGMII-to-Copper mode, ANEG enable + soft reset
; first read the register, then modify bitst and finaly perform write

setup_SFP_88E1111:  LOAD        s3, ID_SFP_PHY_ADDR     ; device address on TWI

                    ; set mode to SGMII to Copper, disable "ANEG bypass" on serial interface
                    LOAD        s4, 27'd          ; register address
                   ;CALL        SFP_PHY_RD           ; read register
                   ;AND         s6, 40           ; 1x00_0000; clear bits
                   ;OR          s6, 80           ; 1x00_0000; set bits
                    LOAD        s6, 80           ; 1x00_0000; set bits
                    LOAD        s5, 84           ; 0000_0100
                    CALL        SFP_PHY_WR

                    ; Advertise also 100M and 10M modes
                    LOAD        s4, 4'd             ; register address
                   ;CALL        SFP_PHY_RD           ; read register
                   ;AND         s6, 10           ; 100x_0001; clear bits
                   ;OR          s6, 81           ; 100x_0001; set bits
                    LOAD        s6, 0D           ; 
                    LOAD        s5, E1           ; 1110_0001
                    CALL        SFP_PHY_WR

                    ; enable ANEG
                    LOAD        s4, 0'd             ; register address
;                   CALL        SFP_PHY_RD           ; read register
                    LOAD        s6, 11           ; 0001_0001
                    LOAD        s5, 40           ; 01xx_xxxx
;                   AND         s5, 3F           ; 01xx_xxxx; clear bits
;                   OR          s5, 40           ; 01xx_xxxx; set bits
                    CALL        SFP_PHY_WR

                    ; soft reset
                    LOAD        s4, 0'd             ; register address
;                   OR          s6, 80
                    LOAD        s6, 91
                    LOAD        s5, 40
                    CALL        SFP_PHY_WR

wait_RST_SFP_PHY:   CALL        SFP_PHY_RD           ; read PHY reset status
                    TEST        s6, 80           ; reset done?
                    JUMP        NZ, wait_RST_SFP_PHY ; when not done, wait

;------------------------------------------------------------------------------;
; check that the 88E1111 was configured correctly
;check_SFP_comp:     LOAD      s3, SFP_PHY_ADDR     ; load PHY address of SFP on TWI
;                    LOAD      s4, 00               ; register address
;                    CALL      SFP_PHY_RD              ; read register

;                    JUMP      xZ, SFP_not_supported   ; report incompatible SFP
                    JUMP        Setup_SFP_done

;------------------------------------------------------------------------------;
SFP_not_supported:  CALL        mess_Error
                    CALL        send_SPACE
                    CALL        send_CHAR
                    CALL        mess_UnsSFP
                    CALL        send_CRLF
                    CALL        send_CRLF
                    JUMP        Setup_SFP_done
;------------------------------------------------------------------------------;
no_SFP_present:     CALL        mess_Error
                    CALL        send_SPACE
                    CALL        mess_noSFP
                    CALL        send_CRLF
                    CALL        send_CRLF
                    JUMP        Setup_SFP_done

;------------------------------------------------------------------------------;
Setup_SFP_done:     CALL        wait_100ms
                    RETURN


;==============================================================================;
; send basic info about SFP module (EEPROM ASCII data) via UART
; SFP   <vendor>
;       <P/N> <rev>
;       <S/N> <date>
;
;==============================================================================;

SFP_ASCII_info:     CALL        mess_SFP                ; "SFP "
;------------------------------------------------------------------------------;
                    ; vendor
                    CALL        send_TAB
                    LOAD        s4, 20'd                ; register address
rd_SFP_gen_1:       CALL        SFP_ROM_RD                ; read data from EEPROM
                    LOAD        s9, s5                  ; prepare data for sending
                    CALL        send_CHAR               ; send data
                    ADD         s4, 01                  ; select next character
                    COMPARE     s4, 36'd                ; last character?
                    JUMP        NZ, rd_SFP_gen_1        ; if not, send another character
                    CALL        send_CRLF
;------------------------------------------------------------------------------;
                     ; vendo PN + vendor rev
                    CALL        send_TAB
                    LOAD        s4, 40'd                ; register address
rd_SFP_gen_2:       CALL        SFP_ROM_RD                ; read data from EEPROM
                    LOAD        s9, s5                  ; prepare data for sending
                    CALL        send_CHAR               ; send data
                    ADD         s4, 01                  ; select next character
                    COMPARE     s4, 60'd                ; last character?
                    JUMP        NZ, rd_SFP_gen_2        ; if not, send another character
                    CALL        send_CRLF
;------------------------------------------------------------------------------;
                    ; "    S/N: " + date code
                    CALL        send_TAB
                   ;CALL        mess_SN
                    LOAD        s4, 68'd                ; register address
rd_SFP_gen_3:       CALL        SFP_ROM_RD                ; read data from EEPROM
                    LOAD        s9, s5                  ; prepare data for sending
                    CALL        send_CHAR                ; send data
                    ADD         s4, 01                  ; select next character
                    COMPARE     s4, 92'd                ; last character?
                    JUMP        NZ, rd_SFP_gen_3        ; if not, send another character
                    CALL        send_CRLF
                    CALL        send_CRLF
                    RETURN

;==============================================================================;
