;==============================================================================;
;
; Tesla Agregator
; Michal Kubicek (michal.kubicek@email.cz)
;
;==============================================================================;
;
;   I  N     N  TTTTTTTTT  EEEEEEE  RRRRRR   RRRRRR   U      U  PPPPPP   TTTTTTTTT
;   I  NN    N      T      E        R     R  R     R  U      U  P     P      T
;   I  N N   N      T      E        R     R  R     R  U      U  P     P      T
;   I  N  N  N      T      EEEE     RRRRRR   RRRRRR   U      U  PPPPPP       T
;   I  N   N N      T      E        R   R    R   R    U      U  P            T
;   I  N    NN      T      E        R    R   R    R    U    U   P            T
;   I  N     N      T      EEEEEEE  R     R  R     R    UUUU    P            T
;
;==============================================================================;

; select device address according to active interrupt number
ISR_PHY_0:          LOAD        s3, 00
                    JUMP        ISR_PHY_common
ISR_PHY_1:          LOAD        s3, 01
                    JUMP        ISR_PHY_common
ISR_PHY_2:          LOAD        s3, 02
                    JUMP        ISR_PHY_common
ISR_PHY_3:          LOAD        s3, 03
                    JUMP        ISR_PHY_common

ISR_SFP:            JUMP        Int_End

;==============================================================================;

ISR_PHY_common:     LOAD        s4, 1A              ; read IRQ register in PHY = clear IRQ
                    CALL        SMI_RD
                    CALL        report_PHY_link     ; report and update link status
                                                    ; the function returs link status in sC
                                                    ; 00000000      offline
                                                    ; 00000010      online  100 Mb/s
                                                    ; 00000011      online 1000 Mb/s

                    COMPARE     s3, 00              ; MAC_0 ?
                    JUMP        Z, ISR_PHY_update_0
                    COMPARE     s3, 01              ; MAC_1 ?
                    JUMP        Z, ISR_PHY_update_1
                    COMPARE     s3, 02              ; MAC_2 ?
                    JUMP        Z, ISR_PHY_update_2
;                   COMPARE     s3, 03              ; MAC_3 ?
;                   JUMP        Z, ISR_PHY_update_3
                    JUMP        ISR_PHY_update_3


                    ; update current link state
ISR_PHY_update_0:   OUTPUT      sC, ID_MAC_0_link_status
                    JUMP        ISR_update_done
ISR_PHY_update_1:   OUTPUT      sC, ID_MAC_1_link_status
                    JUMP        ISR_update_done
ISR_PHY_update_2:   OUTPUT      sC, ID_MAC_2_link_status
                    JUMP        ISR_update_done
ISR_PHY_update_3:   OUTPUT      sC, ID_MAC_3_link_status
;                   JUMP        ISR_update_done
                    
ISR_update_done:    CALL        LED_patch           ; turn on/off green LED on RJ-54
                    CALL        AGR_Autodetect      ; autodetect AGR mode according to links status

                    JUMP        Int_End

;==============================================================================;
; LED patch (manual software control of RJ-45 LEDs)
LED_patch:          LOAD        s0, s3              ; store s3 value
                    LOAD        s3, 00              ; all LEDs are on Port0
                    LOAD        s4, 1D              ; register for LED on/off control
                    CALL        SMI_RD              ; read content of SMI register
                    COMPARE     s0, 00              ; check number of active port
                    JUMP        Z, LED_0
                    COMPARE     s0, 01
                    JUMP        Z, LED_1
                    COMPARE     s0, 02
                    JUMP        Z, LED_2
                    COMPARE     s0, 03
                    JUMP        Z, LED_3
                    JUMP        LED_patch_end

;------------------------------------------------------------------------------;
LED_0:              TEST        sC, 00000011'b      ; port online at 1 Gbps?
                    JUMP        NZ, LED_0_on        ; of yes, turn on the LED
LED_0_off:          AND         s5, FE              ; turn off LED0
                    JUMP        LED_patch_end
LED_0_on:           OR          s5, 0F              ; turn on LED0
                    JUMP        LED_patch_end
                    
;------------------------------------------------------------------------------;
LED_1:              TEST        sC, 00000011'b      ; port online at 1 Gbps?
                    JUMP        NZ, LED_1_on        ; of yes, turn on the LED
LED_1_off:          AND         s5, EF              ; turn off LED1
                    JUMP        LED_patch_end
LED_1_on:           OR          s5, F0              ; turn on LED1
                    JUMP        LED_patch_end

;------------------------------------------------------------------------------;
LED_2:              TEST        sC, 00000011'b      ; port online at 1 Gbps?
                    JUMP        NZ, LED_2_on        ; of yes, turn on the LED
LED_2_off:          AND         s6, FE              ; turn off LED2
                    JUMP        LED_patch_end
LED_2_on:           OR          s6, 0F              ; turn on LED2
                    JUMP        LED_patch_end
                    
;------------------------------------------------------------------------------;
LED_3:              TEST        sC, 00000011'b      ; port online at 1 Gbps?
                    JUMP        NZ, LED_3_on        ; of yes, turn on the LED
LED_3_off:          AND         s6, EF              ; turn off LED3
                    JUMP        LED_patch_end
LED_3_on:           OR          s6, F0              ; turn on LED3
                    JUMP        LED_patch_end

;------------------------------------------------------------------------------;
LED_patch_end:      CALL        SMI_WR
                    LOAD        s3, s0              ; restore s3 value
                    RETURN
;==============================================================================;

ISR_PHY_end:        JUMP        Int_End

;==============================================================================;
