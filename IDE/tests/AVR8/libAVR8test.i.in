/*
 * swig -c++ -python AVR8_test.i (AVR8_test.i is a file generated by CMake from this file)
 */

%module libAVR8test

%{
#define SWIG_FILE_WITH_INIT
#include "AVR8/AVR8Sim.h"
#include "AVR8/AVR8ProgramMemory.h"
#include "AVR8/AVR8DataMemory.h"
#include "AVR8/AVR8DataEEPROM.h"
#include "MCUDataFiles/HexFile.h"
#include "McuSimCfgMgr/McuSimCfgMgr.h"
%}

class McuSimCfgMgr {
public:
	bool openConfigFile(const char * filename);
	bool setupSimulator(const char * mcuName, MCUSim::Config & mcuConfig);
};

class HexFile {
public:
	HexFile(unsigned int arrsize = 0x10000);
	void clearAndLoad(const char * filename);
	void save(const char * filename, bool makeBackup = true);
	void clear();
};

class AVR8Sim {
public:
	AVR8Sim();
	void reset(MCUSim::ResetMode mode);
	float cycles2time(int numOfCycles);
	int executeInstruction();
	int timeStep(float timeStep);
};

class AVR8ProgramMemory {
public:
	MCUSim::RetCode directRead(unsigned int addr, unsigned int & data);
	MCUSim::RetCode directWrite(unsigned int addr, unsigned int data);
	void loadDataFile(const DataFile * file);
	void storeInDataFile(DataFile * file) const;
};

class AVR8DataMemory {
public:
	MCUSim::RetCode directRead(unsigned int addr, unsigned int & data);
	MCUSim::RetCode directWrite(unsigned int addr, unsigned int data);
	void loadDataFile(const DataFile * file);
	void storeInDataFile(DataFile * file) const;
};

class AVR8DataEEPROM {
public:
	MCUSim::RetCode directRead(unsigned int addr, unsigned int & data);
	MCUSim::RetCode directWrite(unsigned int addr, unsigned int data);
	void loadDataFile(const DataFile * file);
	void storeInDataFile(DataFile * file) const;
};
