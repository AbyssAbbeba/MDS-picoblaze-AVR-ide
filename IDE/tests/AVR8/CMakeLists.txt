
## Simulator engine module for 8-bit AVR

# NOTE for Ubuntu:
#   apt-get install python-cxx-dev

# ------------------------------------------------------------------------------
# GENERAL OPTIONS
# ------------------------------------------------------------------------------

# Set project name
project(AVR8_test)

# Set the minimum required version of CMake
cmake_minimum_required(VERSION 2.8)

# Create verbose makefiles if on
set(CMAKE_VERBOSE_MAKEFILE OFF)

# After this command, you can add tests in the project using ADD_TEST command.
enable_testing()


# ------------------------------------------------------------------------------
# COMPILATION OPTIONS
# ------------------------------------------------------------------------------

set(MY_IDE_ROOT_DIR "${CMAKE_CURRENT_BINARY_DIR}/../..")

# Specify directories in which the linker will look for libraries.
link_directories(
	"${MY_IDE_ROOT_DIR}/utilities/MCUDataFiles"
	"${MY_IDE_ROOT_DIR}/simulators/MCUSim/AVR8")

# Add include directories to the build.
include_directories(
	"${MY_IDE_ROOT_DIR}/utilities"
	"${MY_IDE_ROOT_DIR}/simulators/MCUSim")

## Add switches to compiler command line
 # -Wall       : Enables all the warnings.
 # -Wextra     : Enables some extra warning flags that are not enabled by -Wall.
 # -std=c++0x  : Default template arguments may not be used in function templates without -std=c++0x or -std=gnu++0x.
 # -O2         : Optimization, level 2.
 # -pipe       : Use pipes rather than temporary files for communication between the various stages of compilation.
add_definitions(-pipe)

# # Add an executable to the project using the specified source files.
# add_executable(${PROJECT_NAME}
# 	${PROJECT_NAME}.cxx
# )
# 
# # Add a dependency between top-level targets.
# add_dependencies(${PROJECT_NAME} AVR8Sim MCUDataFiles)
# 
# # Link a target to given libraries.
# target_link_libraries(${PROJECT_NAME} AVR8Sim MCUDataFiles)


configure_file("${CMAKE_CURRENT_BINARY_DIR}/AVR8_test.i.in" "${CMAKE_CURRENT_BINARY_DIR}/AVR8_test.i")

FIND_PACKAGE(SWIG 1.3 REQUIRED)
INCLUDE(${SWIG_USE_FILE})

FIND_PACKAGE(PythonLibs)
INCLUDE_DIRECTORIES(${PYTHON_INCLUDE_PATH})

# INCLUDE_DIRECTORIES(${CMAKE_CURRENT_SOURCE_DIR})

SET(CMAKE_SWIG_FLAGS "")

SET_SOURCE_FILES_PROPERTIES(AVR8_test.i PROPERTIES CPLUSPLUS ON)
SET_SOURCE_FILES_PROPERTIES(AVR8_test.i PROPERTIES SWIG_FLAGS "-includeall")
SWIG_ADD_MODULE(AVR8_test python AVR8_test.i)
SWIG_LINK_LIBRARIES(AVR8_test ${PYTHON_LIBRARIES} AVR8Sim MCUDataFiles)



# include(UseSWIG)
# FIND_PACKAGE(SWIG 1.1)
# if(NOT SWIG_FOUND)
# 	message(FATAL_ERROR "swig not found")
# endif(NOT SWIG_FOUND)
# 
# CPLUSPLUS()
# # SWIG_FLAGS()
# SWIG_ADD_MODULE(AVR8_test python)
# SWIG_LINK_LIBRARIES(AVR8_test AVR8Sim MCUDataFiles)

# SWIG module for CMake
#  Defines the following macros:
#    SWIG_ADD_MODULE(name language [ files ])
#      - Define swig module with given name and specified language
#    SWIG_LINK_LIBRARIES(name [ libraries ])
#      - Link libraries to swig module
#
#  All other macros are for internal use only. To get the actual name of the swig module, use: ${SWIG_MODULE_${name}_REAL_NAME}. Set Source files properties such as CPLUSPLUS and SWIG_FLAGS to specify special behavior of SWIG. Also global CMAKE_SWIG_FLAGS can be used to add special flags to all swig calls. Another special variable is CMAKE_SWIG_OUTDIR, it allows one to specify where to write all the swig generated module (swig -outdir option) The name-specific variable SWIG_MODULE_<name>_EXTRA_DEPS may be used to specify extra dependencies for the generated modules. If the source file generated by swig need some special flag you can use SET_SOURCE_FILES_PROPERTIES( ${swig_generated_file_fullname}
#         PROPERTIES COMPILE_FLAGS "-bla")

# ------------------------------------------------------------------------------
# TESTS
# ------------------------------------------------------------------------------

add_test(NAME SimpleTest0 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME} Hello)
add_test(NAME SimpleTest1 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME} Hello)
add_test(NAME SimpleTest2 COMMAND ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME} Hello)

