
# ------------------------------------------------------------------------------
# GENERAL OPTIONS
# ------------------------------------------------------------------------------

# Set project name
project(IDE)

# Set the minimum required version of CMake
cmake_minimum_required(VERSION 2.8)

# Create verbose makefiles if on
set(CMAKE_VERBOSE_MAKEFILE OFF)

# Set default build type to Debug
if(NOT CMAKE_BUILD_TYPE)
  set(CMAKE_BUILD_TYPE Debug CACHE STRING
      "Choose the type of build, options are: None Debug Release RelWithDebInfo MinSizeRel."
      FORCE)
endif(NOT CMAKE_BUILD_TYPE)

# After this command, you can add tests in the project using ADD_TEST command.
enable_testing()

# ------------------------------------------------------------------------------
# GENERATE API DOCUMENTATION WITH DOXYGEN
# ------------------------------------------------------------------------------

find_package(Doxygen)
if(DOXYGEN_FOUND)
	configure_file(${CMAKE_CURRENT_BINARY_DIR}/Doxyfile.in ${CMAKE_CURRENT_BINARY_DIR}/Doxyfile @ONLY)
	add_custom_target(doc
		${DOXYGEN_EXECUTABLE}
		${CMAKE_CURRENT_BINARY_DIR}/Doxyfile
		WORKING_DIRECTORY ${CMAKE_CURRENT_BINARY_DIR}
		COMMENT "Generating API documentation with Doxygen" VERBATIM)
endif(DOXYGEN_FOUND)


# ------------------------------------------------------------------------------
# BUILD COMPONENTS IN THE SUBDIRECTORIES
# ------------------------------------------------------------------------------

# Build utility libraries
add_subdirectory(utilities)

# Build GUI
add_subdirectory(GUI)

# Build simulators
add_subdirectory(simulators)

# Build automated tests
add_subdirectory(tests)


# ------------------------------------------------------------------------------
# BUILD INSTALLATION PACKAGES
# ------------------------------------------------------------------------------

# Set which packages we want to build
set(CPACK_GENERATOR "DEB" "STGZ")

set(CPACK_PACKAGE_VENDOR "Moravia Microsystems")
set(CPACK_PACKAGE_VERSION_MAJOR 0)
set(CPACK_PACKAGE_VERSION_MINOR 1)
set(CPACK_PACKAGE_VERSION_PATCH 0)

#    CPACK_PACKAGE_DESCRIPTION_FILE - A text file used to describe the
#    project. Used, for example, the introduction screen of a
#    CPack-generated Windows installer to describe the project.
#
#    CPACK_PACKAGE_DESCRIPTION_SUMMARY - Short description of the
#    project (only a few words).
#
#    CPACK_PACKAGE_INSTALL_DIRECTORY - Installation directory on the
#    target system, e.g., "CMake 2.5".
#
#    CPACK_PROJECT_CONFIG_FILE - File included at cpack time, once per
#    generator after setting CPACK_GENERATOR to the actual generator
#    being used. Allows per-generator setting of CPACK_* variables at
#    cpack time.
#
#    CPACK_RESOURCE_FILE_LICENSE - License file for the project, which
#    will typically be displayed to the user (often with an explicit
#    "Accept" button, for graphical installers) prior to installation.
#
#    CPACK_RESOURCE_FILE_README - ReadMe file for the project, which
#    typically describes in some detail
#
#    CPACK_RESOURCE_FILE_WELCOME - Welcome file for the project, which
#    welcomes users to this installer. Typically used in the graphical
#    installers on Windows and Mac OS X.
#
#    CPACK_MONOLITHIC_INSTALL - Disables the component-based
#    installation mechanism, so that all components are always installed.
#
#    CPACK_GENERATOR - List of CPack generators to use. If not
#    specified, CPack will create a set of options (e.g.,
#    CPACK_BINARY_NSIS) allowing the user to enable/disable individual
#    generators.
#
#    CPACK_OUTPUT_CONFIG_FILE - The name of the CPack configuration file
#    for binary installers that will be generated by the CPack
#    module. Defaults to CPackConfig.cmake.
#
#    CPACK_PACKAGE_EXECUTABLES - Lists each of the executables along
#    with a text label, to be used to create Start Menu shortcuts on
#    Windows. For example, setting this to the list ccmake;CMake will
#    create a shortcut named "CMake" that will execute the installed
#    executable ccmake.
#
#    CPACK_STRIP_FILES - List of files to be stripped. Starting with
#    CMake 2.6.0 CPACK_STRIP_FILES will be a boolean variable which
#    enables stripping of all files (a list of files evaluates to TRUE
#    in CMake, so this change is compatible).

# Options for the "DEB" generator
set(CPACK_DEBIAN_PACKAGE_ARCHITECTURE "")
set(CPACK_DEBIAN_PACKAGE_DEPENDS "")
set(CPACK_DEBIAN_PACKAGE_MAINTAINER "MAINTAINER")
set(CPACK_DEBIAN_PACKAGE_DESCRIPTION " DESCRIPTION")
set(CPACK_DEBIAN_PACKAGE_SECTION "devel")
set(CPACK_DEBIAN_PACKAGE_RECOMMENDS "")
set(CPACK_DEBIAN_PACKAGE_SUGGESTS "")

# Include packaging driver provided by CMake.
include(CPack)


# ------------------------------------------------------------------------------
# SUPPORT FOR AUTOMATED TESTS
# ------------------------------------------------------------------------------

# CTest is a testing tool distributed as a part of CMake.
include(CTest)

