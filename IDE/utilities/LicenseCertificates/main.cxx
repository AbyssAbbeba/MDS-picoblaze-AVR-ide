
#include "LicenseCertificates.h"

#include "rsa.h"
using CryptoPP::RSA;
using CryptoPP::RSASS;
using CryptoPP::InvertibleRSAFunction;
#include "base64.h"
#include "pssr.h"
using CryptoPP::PSS;

#include "sha.h"
using CryptoPP::SHA1;

#include "files.h"
using CryptoPP::FileSink;
using CryptoPP::FileSource;

#include "filters.h"
using CryptoPP::SignerFilter;
using CryptoPP::SignatureVerificationFilter;
using CryptoPP::StringSink;
using CryptoPP::StringSource;

#include "osrng.h"
using CryptoPP::AutoSeededRandomPool;

#include "secblock.h"
using CryptoPP::SecByteBlock;

#include <string>
using std::string;

#include <iostream>
using std::cout;
using std::endl;

int main ( int argc, char ** argv )
{

// gawk '{print($2)}' /home/millenium/.ssh/id_rsa.pub | base64 -d | hexdump -vb | gawk 'BEGIN {c=0} END {print("\n" c)} {for(i=2;i<=NF;i++) {printf("\\%s", $i);c++}}'
// std::string pub_key = std::string("\000\000\000\007\163\163\150\055\162\163\141\000\000\000\003\001\000\001\000\000\001\001\000\334\156\374\371\130\000\064\051\111\235\160\032\035\177\243\075\303\111\132\316\267\240\347\305\210\327\265\072\260\356\361\302\054\257\210\110\162\041\227\121\261\102\213\203\353\330\172\104\321\257\371\340\101\053\362\166\326\114\344\074\170\314\060\077\020\330\240\132\270\155\350\305\267\352\043\202\071\346\353\115\143\341\067\233\007\003\120\303\253\272\244\104\252\153\174\315\112\064\332\014\167\251\150\136\302\342\123\123\130\161\147\244\305\130\325\124\252\265\231\170\022\143\361\067\376\056\035\207\273\357\315\312\220\330\264\312\320\020\047\042\350\215\014\270\050\150\063\146\300\140\101\036\114\054\066\213\227\127\343\323\220\141\260\062\343\176\173\331\206\175\260\125\113\103\061\255\067\006\247\040\304\201\302\162\130\165\305\005\156\241\124\333\000\053\213\057\231\071\260\244\110\155\014\243\347\146\350\130\005\366\111\116\006\174\300\170\311\246\213\244\326\324\006\151\157\302\134\276\147\117\153\034\243\235\115\247\006\156\227\131\204\327\230\277\054\316\172\340\142\360\302\103\364\103\231\077", 279 );
// cat /home/millenium/.ssh/id_rsa | gawk '/^-----/ {next} {printf($0)}' | base64 -d | hexdump -vb | gawk 'BEGIN {c=0} END {print("\n" c)} {for(i=2;i<=NF;i++) {printf("\\%s", $i);c++}}'
// std::string priv_key = std::string

std::string pub_key = "AAAAB3NzaC1yc2EAAAADAQABAAABAQDcbvz5WAA0KUmdcBodf6M9w0lazreg58WI17U6sO7xwiyviEhyIZdRsUKLg+vYekTRr/ngQSvydtZM5Dx4zDA/ENigWrht6MW36iOCOebrTWPhN5sHA1DDq7qkRKprfM1KNNoMd6loXsLiU1NYcWekxVjVVKq1mXgSY/E3/i4dh7vvzcqQ2LTK0BAnIuiNDLgoaDNmwGBBHkwsNouXV+PTkGGwMuN+e9mGfbBVS0MxrTcGpyDEgcJyWHXFBW6hVNsAK4svmTmwpEhtDKPnZuhYBfZJTgZ8wHjJpouk1tQGaW/CXL5nT2sco51NpwZul1mE15i/LM564GLwwkP0Q5k/";
std::string priv_key = "MIIEpAIBAAKCAQEA3G78+VgANClJnXAaHX+jPcNJWs63oOfFiNe1OrDu8cIsr4hIciGXUbFCi4Pr2HpE0a/54EEr8nbWTOQ8eMwwPxDYoFq4bejFt+ojgjnm601j4TebBwNQw6u6pESqa3zNSjTaDHepaF7C4lNTWHFnpMVY1VSqtZl4EmPxN/4uHYe7783KkNi0ytAQJyLojQy4KGgzZsBgQR5MLDaLl1fj05BhsDLjfnvZhn2wVUtDMa03BqcgxIHCclh1xQVuoVTbACuLL5k5sKRIbQyj52boWAX2SU4GfMB4yaaLpNbUBmlvwly+Z09rHKOdTacGbpdZhNeYvyzOeuBi8MJD9EOZPwIDAQABAoIBAGjq5rtjOE2bbS9jQPrTWoY2If73rw0F4847JUY3GrO1AQHXMuwnstcuMIcpFiMmJwVK5frn6hvwlhVo+KNiRIBv6zt/kpK1nQ3pglckahWK80Qp7D7NRC6t2RsAl8CrWSa9ux7+AYLsv4Nrt5q792HEkICRWOMwlabjLNfCwn5IzvB46TK1K6fY0/ama0D809AUAH+FiFxk+MsDBCCqh9NbKidS5KsPS6wtKfYRkx102QDVWco+k9KKJ9bRAEQKJ3RsfAgNEMwAB5IASGW3TqHvVD/l5zg+92yZWibxAPv92Y94qZNC5c50TnCfEIy6vI5JqkMdtMSYXLBRa6tJVDECgYEA/ldsWOKnBFJjMZ+Zhj0WAwn3vNVaGRVnqrR3DNaPe9wgBXbaCZdKX55o49alb98FLNy1brwaq4NJ8OnVS7l1O9NXas4dGwoniecXSGsrSGC86xWBaCs7yXB82Gt6errSwHV9eY4YrzxkfNeWJnEeOURzXVAFQrsEiTZt0TaPmkkCgYEA3d72OQOzEbkNGosHmYzViVwwqE5dX9mGrQX32esuzwOicXWq/JHZauiXZ0SevcmbyG27FMYxrZaT2sAluq9jxC8NnutvW/B/yMo5pwnlVXxYYY3gsy3oH5DVJU6GdZnkhfm97o2GdsuF55Ix/RoYweVTP1euzDZ05mK4NlT5V0cCgYA9YUu8h7ZWzKszppieVM+jHBy1bae4tfm2sKaqan1mHtF7gBtOhTxlpw0ZLwvt25ycHweKGcs16RFHGqdnBvLL5U0LcYKErAauuR5dU7+2T+JHuYDpasWa75Kxh/6e78c8ux30394FLEXz+vM5g8MPfv14X39lg0ys8H3AJ7KwQQKBgQCqB6RKLTud6WLRZJp+Yh+DFNN1KBkGy30aO+ilaEaG/xIOQU64IE2uUHE3Aq9kYoywHOeyE/EeRrcofPhtCNw8DJMzptnAa56CEff8uui1ioVwvXnl1th82FGANZ11omovAiU8G9lgULhdrvwAK2+tqEET2e5rMZCEvkLN4HD1IQKBgQDH/tZ50U5Zflqr4howF0muoTkH4wmvCbuoh0hpjalOpb/nIoTB7CXnN+2HBsoo8emRicN1jeFRL6hcMbNepnAFJwVA29erxraSVWMnpRPa7pL31xV6UTrPfFrWnX+py3O1tmoro11TzqBeJxvt9/G8FZgE/DBYtNASmo8sl/scfw==";
    try
    {
        AutoSeededRandomPool rng;

RSA::PrivateKey privateKey;
RSA::PublicKey publicKey;

publicKey.Load(StringSource(pub_key,true,new CryptoPP::Base64Decoder()).Ref());
privateKey.Load(StringSource(priv_key,true,new CryptoPP::Base64Decoder()).Ref());

//         CryptoPP::Base64Decoder decoder;
//         decoder.Put( (byte*)priv_key.c_str(), priv_key.size() );
//         decoder.MessageEnd();
//         RSA::PrivateKey privateKey;
//         privateKey.Load(decoder);
//
//         CryptoPP::Base64Decoder _decoder;
//         _decoder.Put( (byte*)pub_key.c_str(), pub_key.size() );
//         _decoder.MessageEnd();
//         RSA::PublicKey publicKey;
//         publicKey.Load(_decoder);

//         InvertibleRSAFunction parameters;
//         parameters.GenerateRandomWithKeySize( rng, 1024 );
//         RSA::PrivateKey privateKey( parameters );
//         RSA::PublicKey publicKey( parameters );

        // Message
        string message = "Yoda said, Do or Do Not. There is not try.";
        string signature;

        ////////////////////////////////////////////////
        // Sign and Encode
        RSASS<PSS, SHA1>::Signer signer( privateKey );
        StringSource( message, true,
            new SignerFilter( rng, signer,
                new StringSink( signature )
            ) // SignerFilter
        ); // StringSource

        ////////////////////////////////////////////////
        // Verify and Recover
        RSASS<PSS, SHA1>::Verifier verifier( publicKey );

        StringSource( message+signature, true,
            new SignatureVerificationFilter(
                verifier, NULL,
                SignatureVerificationFilter::THROW_EXCEPTION
            ) // SignatureVerificationFilter
        ); // StringSource

        cout << "Verified signature on message" << endl;

    }
    catch( CryptoPP::Exception& e )
    {
        std::cerr << "Error: " << e.what() << std::endl;
    }

    return 0;
}