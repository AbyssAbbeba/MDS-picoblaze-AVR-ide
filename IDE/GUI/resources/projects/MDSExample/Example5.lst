                   1     ; ----------------------------------------------------------------------------------------------------------------------
                   2     ; MDS for PicoBlaze - Demonstration code V: Loops.
                   3     ; ----------------------------------------------------------------------------------------------------------------------
                   4     ; This example covers compilation time and run-time loops.
                   5     ; ----------------------------------------------------------------------------------------------------------------------
                   6
                   7                 ; Start at address 0x000.
  00000            8                 org         0x000
                   9
                  10     ; ======================================================================================================================
                  11     ; A task.
                  12     ; ======================================================================================================================
                  13
                  14                 ; Lets make an example, suppose we want for some reason to output the content of S0 register to ports in
                  15                 ; address range [0, 4]. Of course, there is a countless number of ways how to do it but lets see some the
                  16                 ; simple ones.
                  17
                  18                 ; 1) No loop at all.
000 01011         19                 load        S0, #0x11       ; (value to output)
001 01100         20                 load        S1, #0          ; (starting address)
                  21
002 2C010         22                 output      S0, @S1
003 11101         23                 add         S1, #1
004 2C010         24                 output      S0, @S1
005 11101         25                 add         S1, #1
006 2C010         26                 output      S0, @S1
007 11101         27                 add         S1, #1
008 2C010         28                 output      S0, @S1
009 11101         29                 add         S1, #1
00A 2C010         30                 output      S0, @S1
00B 11101         31                 add         S1, #1
                  32
                  33     ; ----------------------------------------------------------------------------------------------------------------------
                  34
                  35                 ; 2) Still the same approach but with a little less slavish writing.
00C 01022         36                 ld          S0, #0x22       ; (value to output)
00D 01100         37                 ld          S1, #0          ; (starting address)
                  38
00E 2C010         39                 out         S0, @S1         ; (output)
00F 11101         40                 inc         S1              ; (increment)
010 2C010         41                 out         S0, @S1
011 11101         42                 inc         S1
012 2C010         43                 out         S0, @S1
013 11101         44                 inc         S1
014 2C010         45                 out         S0, @S1
015 11101         46                 inc         S1
016 2C010         47                 out         S0, @S1
017 11101         48                 inc         S1
                  49
                  50     ; ======================================================================================================================
                  51     ; Using a compilation time loop (i.e. repeat code automatically for the given fixed number of times).
                  52     ; ======================================================================================================================
                  53
                  54                 ; 3) REPEAT & ENDR : This time let the assembler put the code down repeatedly for you.
018 01033         55                 ld          S0, #0x33       ; (value to output)
019 01100         56                 ld          S1, #0          ; (starting address)
                  57
                  58             repeat  5                       ; 5 Ã repeat (copy) the code between `repeat' and `endr'.
                  59                 out         S0, @S1
                  60                 inc         S1
                  61             endr
01A 2C010         62 +1              out         S0, @S1
01B 11101         63 +1              inc         S1
01C 2C010         64 +1              out         S0, @S1
01D 11101         65 +1              inc         S1
01E 2C010         66 +1              out         S0, @S1
01F 11101         67 +1              inc         S1
020 2C010         68 +1              out         S0, @S1
021 11101         69 +1              inc         S1
022 2C010         70 +1              out         S0, @S1
023 11101         71 +1              inc         S1
                  72
                  73     ; ----------------------------------------------------------------------------------------------------------------------
                  74
                  75                 ; 4) #WHILE & #ENDW : Similar to point 3 but using a different kind of compilation time loop.
024 01044         76                 ld          S0, #0x44       ; (value to output)
  00000           77     addr        set         0               ; (starting address)
                  78
                  79             #while ( addr < 5 )             ; Repeat while `addr' is lower than 5.
                  80                 out         S0, addr
                  81     addr        set         addr + 1        ; Redefine user constant `addr' like this: "addr := addr + 1".
                  82             #endw                           ; End the while loop.
025 2D000         83 +1              out         S0, addr
  00001           84 +1  addr        set         addr + 1        ; Redefine user constant `addr' like this: "addr := addr + 1".
026 2D001         85 +1              out         S0, addr
  00002           86 +1  addr        set         addr + 1        ; Redefine user constant `addr' like this: "addr := addr + 1".
027 2D002         87 +1              out         S0, addr
  00003           88 +1  addr        set         addr + 1        ; Redefine user constant `addr' like this: "addr := addr + 1".
028 2D003         89 +1              out         S0, addr
  00004           90 +1  addr        set         addr + 1        ; Redefine user constant `addr' like this: "addr := addr + 1".
029 2D004         91 +1              out         S0, addr
  00005           92 +1  addr        set         addr + 1        ; Redefine user constant `addr' like this: "addr := addr + 1".
                  93
                  94     ; ======================================================================================================================
                  95     ; Using loops, both hand written and assembler generated run time loops.
                  96     ; ======================================================================================================================
                  97
                  98                 ; 5) A loop, hand written (one of possible ways to write it, not necessarily the best one).
02A 01055         99                 ld          S0, #0x55       ; (value to output)
02B 01100        100                 ld          S1, #0          ; (starting address)
                 101
02C 2C010        102     loop_0:     out         S0, @S1
02D 11101        103                 inc         S1
02E 1D105        104                 cmp         S1, #5
02F 3602C        105                 jump        NZ, loop_0
                 106
                 107     ; ----------------------------------------------------------------------------------------------------------------------
                 108
                 109                 ; 6) Another loop, also hand written.
030 01066        110                 ld          S0, #0x66       ; (value to output)
031 01100        111                 ld          S1, #0          ; (starting address)
032 01205        112                 ld          S2, #5          ; (number of repeats)
                 113
033 2C010        114     loop_1:     out         S0, @S1
034 11101        115                 inc         S1
035 19201        116                 djnz        S2, loop_1      ; Decrement (S2) and jump (at loop_1) if not zero.
036 36033
                 117
                 118     ; ----------------------------------------------------------------------------------------------------------------------
                 119
                 120                 ; 7) The for loop - an assembler generated run time loop.
037 01077        121                 ld          S0, #0x77       ; (value to output)
                 122
                 123                 ; S1 serves as the iterator, and 5 is the number of iterations.
                 124                 for         S1, 5           ; C: for ( S1 = 0; S1 < 5; S1++ ) {
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
038 01100        125 +1      LOAD    0x1, #0x0
  00039          126 +1  FOR-0:
039 1D105        127 +1      COMPARE S1, #0x5
03A 3203E        128 +1      JUMP    Z, FOR-0-END
03B 2C010        129                     out     S0, @S1
                 130                 endf                        ; C: }
03C 11101        131 +1      ADD     0x1, #0x1
03D 22039        132 +1      JUMP    FOR-0
  0003E          133 +1  FOR-0-END:
                 134
                 135     ; ----------------------------------------------------------------------------------------------------------------------
                 136
                 137                 ; 8) The for loop again.
03E 01088        138                 ld          S0, #0x88       ; (value to output)
                 139
                 140                 ; S1 again as the iterator, 0 is the starting value, and 4 is the maximum value.
                 141                 for         S1, 0 .. 4      ; C: for ( S1 = 0; S1 <= 4; S1++ ) {
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
03F 01100        142 +1      LOAD    0x1, #0x0
  00040          143 +1  FOR-1:
040 1D104        144 +1      COMPARE S1, #0x4
041 32045        145 +1      JUMP    Z, FOR-1-END
042 2C010        146                     out     S0, @S1
                 147                 endf                        ; C: }
043 11101        148 +1      ADD     0x1, #0x1
044 22040        149 +1      JUMP    FOR-1
  00045          150 +1  FOR-1-END:
                 151
                 152     ; ----------------------------------------------------------------------------------------------------------------------
                 153
                 154                 ; 9) Yet another for loop.
045 01099        155                 ld          S0, #0x99       ; (value to output)
                 156
                 157                 ; S1 again as the iterator, 0 is the starting value, 4 is the maximum value, and 1 is the increment.
                 158                 for         S1, 0..4, 1     ; C: for ( S1 = 0; S1 <= 4; S1 += 1 ) {
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
W: instruction `ADD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: number.
046 01100        159 +1      LOAD    0x1, #0x0
  00047          160 +1  FOR-2:
047 1D104        161 +1      COMPARE S1, #0x4
048 3204C        162 +1      JUMP    Z, FOR-2-END
049 2C010        163                     out     S0, @S1
                 164                 endf                        ; C: }
04A 11101        165 +1      ADD     0x1, #0x1
04B 22047        166 +1      JUMP    FOR-2
  0004C          167 +1  FOR-2-END:
                 168
                 169     ; ----------------------------------------------------------------------------------------------------------------------
                 170
                 171                 ; 10) While loop.
04C 010AA        172                 ld          S0, #0xAA       ; (value to output)
04D 01100        173                 ld          S1, #0          ; (starting address)
                 174
                 175                 while       S1 < #5         ; C: while ( S1 < 5 ) {
  0004E          176 +1  WHILE-0:
04E 1D105        177 +1      COMPARE S1, #0x5
04F 3E053        178 +1      JUMP    NC, WHILE-0-END
050 2C010        179                     out     S0, @S1         ; C:     S0 = *S1;
051 11101        180                     inc     S1              ; C:     S1++;
                 181                 endw                        ; C: }
052 2204E        182 +1      JUMP    WHILE-0
  00053          183 +1  WHILE-0-END:
                 184
                 185     ; ======================================================================================================================
                 186
                 187
                 188                 ; Infinite loop, and end of assembly.
053 22053        189                 jump        $
                 190                 end
                 191
                 192     ; ----------------------------------------------------------------------------------------------------------------------
                 193     ; Notes:
                 194     ;   1) you may also use nested loops, any loop may be present in any other loop with no limit in depth of nesting,
                 195     ;      for instance you can write something like this:
                 196     ;
                 197                 for         S0, 10..100, 5
                 198                     for     S1, 1..5
                 199                         for S2, 10
                 200                             nop
                 201                         endf; S2, 10
                 202                     endf    ; S1, 1..5
                 203                 endf        ; S0, 10..100, 5
                 204     ;
                 205     ; ----------------------------------------------------------------------------------------------------------------------
                 206     ; The next example shows user defined macro-instructions.
                 207     ; ----------------------------------------------------------------------------------------------------------------------
