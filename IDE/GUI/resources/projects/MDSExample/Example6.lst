                   1     ; ----------------------------------------------------------------------------------------------------------------------
                   2     ; MDS for PicoBlaze - Demonstration code VI: User defined macro instructions.
                   3     ; ----------------------------------------------------------------------------------------------------------------------
                   4     ;
                   5     ; This example code demonstrates usage of user defined macros. Examples used here serve only as demonstration, they
                   6     ; are not meant to have any usage in real life application but they certainly should give you some idea on how to use
                   7     ; macros in this assembly language.
                   8     ;
                   9     ; IMPORTANT NOTE:
                  10     ;   This is a pretty advanced topic, even entire books have been written about using macros and similar techniques
                  11     ;   applied in the assembly language; this example code only illustrates how that might look like, and demonstrates that
                  12     ;   macros really work here but if you are unsure how exactly that works, it might be advisable to avoid using it at
                  13     ;   all, at least before you get to know all the pitfalls and limitations of this. On the other hand when you master
                  14     ;   this technique, you will probably get much more efficient in writing assembly code, it's a powerful feature, one
                  15     ;   just needs to know how exactly to use it properly.
                  16     ;
                  17     ; ----------------------------------------------------------------------------------------------------------------------
                  18
                  19                 ; Start at address 0x000.
  00000           20                 org         0x000
                  21
                  22     ; ======================================================================================================================
                  23     ; A simple example: macro without parameters.
                  24     ; ======================================================================================================================
                  25
                  26     ; Define macro named `backup' contaning three loads: S10 <- S0, S11 <- S1, and S12 <- S2.
                  27     backup      macro
                  28                 ld          S3, S0
                  29                 ld          S4, S1
                  30                 ld          S5, S2
                  31     endm
                  32
                  33     ; Define macro named `restore' to do the exact opposite of what the `backup' does.
                  34     restore     macro
                  35                 ld          S0, S3
                  36                 ld          S1, S4
                  37                 ld          S2, S5
                  38     endm
                  39
                  40                 ; Now lets load S0..S2 with some values.
000 01001         41                 ld          S0, #1
001 01102         42                 ld          S1, #2
002 01203         43                 ld          S2, #3
                  44                 ; Backup current content of S0..S2.
                  45                 backup
003 00300         46 +1              ld          S3, S0
004 00410         47 +1              ld          S4, S1
005 00520         48 +1              ld          S5, S2
                  49
                  50                 ; And load S0..S2 with another values.
006 0100A         51                 ld          S0, #10
007 01114         52                 ld          S1, #20
008 0121E         53                 ld          S2, #30
                  54                 ; Restore the previous content of S0..S2.
                  55                 restore
009 00030         56 +1              ld          S0, S3
00A 00140         57 +1              ld          S1, S4
00B 00250         58 +1              ld          S2, S5
                  59
                  60     ; ----------------------------------------------------------------------------------------------------------------------
                  61
                  62     ; Wait 100 instruction cycles where you want.
                  63     w100        macro
                  64                 nop
                  65                 ld          S0, #49
                  66                 djnz        S0, $-1
W: instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
                  67     endm
                  68
                  69                 ; Wait 100 instruction cycles here.
                  70                 w100
00C 00000         71 +1              nop
00D 01031         72 +1              ld          S0, #49
00E 19001         73 +1              djnz        S0, $-1
00F 3600E
W: ==> instruction `JUMP NZ, aaa' requires operand #2 to be of type(s): label; while the given operand is of type: expression.
                  74 +1              djnz        S0, $-1
                  75
                  76     ; ======================================================================================================================
                  77     ; A little more advanced example: macro with parameters.
                  78     ; ======================================================================================================================
                  79
                  80     ; Double load, loads two different registers with two different values at once.
                  81     dload       macro       reg0, reg1, val0, val1
                  82                 ld          reg0, #val0
                  83                 ld          reg1, #val1
                  84     endm
                  85
                  86                 ; Lets give it a try...
                  87                 dload       S0, S1, 0x11, 0x22
010 01011         88 +1              ld          reg0, #val0
011 01122         89 +1              ld          reg1, #val1
                  90
                  91     ; ----------------------------------------------------------------------------------------------------------------------
                  92
                  93     ; Copy content of registers at addresses [source, source+4] to registers at addresses [target, target+4].
                  94     copy5       macro       target, source
                  95                 ld          target + 0, source + 0
                  96                 ld          target + 1, source + 1
                  97                 ld          target + 2, source + 2
                  98                 ld          target + 3, source + 3
                  99                 ld          target + 4, source + 4
                 100     endm
                 101
                 102     ; Put the given number of NOPs (No Operation instruction) at the place where this macro is expanded.
                 103     nops        macro       number
                 104                 repeat      number
                 105                     nop
                 106                 endr
                 107     endm
                 108
                 109                 ; Put 10 NOPs here.
                 110                 nops        10
                 111 +1              repeat      number
                 112 +1                  nop
                 113 +1              endr
012 00000        114 +2                  nop
013 00000        115 +2                  nop
014 00000        116 +2                  nop
015 00000        117 +2                  nop
016 00000        118 +2                  nop
017 00000        119 +2                  nop
018 00000        120 +2                  nop
019 00000        121 +2                  nop
01A 00000        122 +2                  nop
01B 00000        123 +2                  nop
                 124
                 125     ; Wait for the given number number of instruction cycles, and use the given register as iterator for the delay loop.
                 126     wait        macro       register, cycles
                 127                 for         register, ( cycles - 1 ) / 4
                 128                     nop
                 129                 endf
                 130     endm
                 131
                 132     ; ======================================================================================================================
                 133     ; A pretty complex example: macro with local symbol(s), and forced exit combined with conditions and loops.
                 134     ; ======================================================================================================================
                 135
                 136     ; Fill registers at addresses in range [target, target+length] with the given value.
                 137     fill        macro       target, value, length
                 138                 local       n
                 139         n       set         0
                 140
                 141             #if ( length == 0 )
                 142                 warning     "Zero length doesn't make sense here."
                 143             #elseif ( target == S1 )
                 144                 warning     "I won't accept S1 as target ... for some reason, I guess."
                 145                 exitm
                 146             #endif
                 147
                 148             #while n < length
                 149                 ld          target + n, #value
                 150         n       set         n + 1
                 151             #endw
                 152     endm
                 153
                 154     ; Global label named simply `label'.
01C 2201C        155     label:      jump        $
                 156
                 157     ; Copy contents of registers addresses in range [source, source+number] to registers at [target, target+number].
                 158     copy        macro       target, source, number
                 159
                 160                 local       n
                 161         n       set         0
                 162
                 163         ; Local label with same name a global label delared before.
                 164                 local       label
                 165                 jump        label
                 166         label:
                 167
                 168             #while n < number
                 169                 ld          target + n, source + n
                 170         n       set         n + 1
                 171             #endw
                 172     endm
                 173
                 174     ; Lets have some fun here...
  0001D          175     loop:       fill        S0, 0x55, 8    ; S0..S7 <- #0x55
                 176 +1              local       n
  00000          177 +1      n       set         0
                 178 +1
  00000          179 +1          #if ( length == 0 )
                 180 +1              warning     "Zero length doesn't make sense here."
  00000          181 +1          #elseif ( target == S1 )
                 182 +1              warning     "I won't accept S1 as target ... for some reason, I guess."
                 183 +1              exitm
                 184 +1          #endif
                 185 +1
                 186 +1          #while n < length
                 187 +1              ld          target + n, #value
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
                 188 +1      n       set         n + 1
                 189 +1          #endw
01D 01055        190 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00001          191 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
01E 01155        192 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00002          193 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
01F 01255        194 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00003          195 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
020 01355        196 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00004          197 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
021 01455        198 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00005          199 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
022 01555        200 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00006          201 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
023 01655        202 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00007          203 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
024 01755        204 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00008          205 +2      n       set         n + 1
                 206                 copy        S8, S0, 8      ; S8..SA <- S0..S7
                 207 +1              local       n
  00000          208 +1      n       set         0
                 209 +1
                 210 +1
                 211 +1              local       label
025 22026        212 +1              jump        label
  00026          213 +1      label:
                 214 +1
                 215 +1          #while n < number
                 216 +1              ld          target + n, source + n
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 217 +1      n       set         n + 1
                 218 +1          #endw
026 00800        219 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00001          220 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
027 00910        221 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00002          222 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
028 00A20        223 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00003          224 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
029 00B30        225 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00004          226 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
02A 00C40        227 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00005          228 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
02B 00D50        229 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00006          230 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
02C 00E60        231 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00007          232 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
02D 00F70        233 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00008          234 +2      n       set         n + 1
                 235
                 236                 fill        S0, 0xAA, 8    ; S0..S7 <- #0xAA
                 237 +1              local       n
  00000          238 +1      n       set         0
                 239 +1
  00000          240 +1          #if ( length == 0 )
                 241 +1              warning     "Zero length doesn't make sense here."
  00000          242 +1          #elseif ( target == S1 )
                 243 +1              warning     "I won't accept S1 as target ... for some reason, I guess."
                 244 +1              exitm
                 245 +1          #endif
                 246 +1
                 247 +1          #while n < length
                 248 +1              ld          target + n, #value
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
                 249 +1      n       set         n + 1
                 250 +1          #endw
02E 010AA        251 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00001          252 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
02F 011AA        253 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00002          254 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
030 012AA        255 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00003          256 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
031 013AA        257 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00004          258 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
032 014AA        259 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00005          260 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
033 015AA        261 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00006          262 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
034 016AA        263 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00007          264 +2      n       set         n + 1
W: instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
035 017AA        265 +2              ld          target + n, #value
W: ==> instruction `LOAD sX, kk' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
  00008          266 +2      n       set         n + 1
                 267                 copy        S8, S0, 8      ; S8..SA <- S0..S7
                 268 +1              local       n
  00000          269 +1      n       set         0
                 270 +1
                 271 +1
                 272 +1              local       label
036 22037        273 +1              jump        label
  00037          274 +1      label:
                 275 +1
                 276 +1          #while n < number
                 277 +1              ld          target + n, source + n
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
                 278 +1      n       set         n + 1
                 279 +1          #endw
037 00800        280 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00001          281 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
038 00910        282 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00002          283 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
039 00A20        284 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00003          285 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
03A 00B30        286 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00004          287 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
03B 00C40        288 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00005          289 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
03C 00D50        290 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00006          291 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
03D 00E60        292 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00007          293 +2      n       set         n + 1
W: instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
03E 00F70        294 +2              ld          target + n, source + n
W: ==> instruction `LOAD sX, sY' requires operand #1 to be of type(s): register; while the given operand is of type: expression.
W: ==> instruction `LOAD sX, sY' requires operand #2 to be of type(s): register; while the given operand is of type: expression.
  00008          295 +2      n       set         n + 1
                 296
03F 2201D        297                 jump        loop            ; And again...
                 298
                 299
                 300     ; ======================================================================================================================
                 301
                 302                 ; End of assembly.
                 303                 end
                 304
                 305     ; ----------------------------------------------------------------------------------------------------------------------
                 306     ; Notes:
                 307     ;   1) Expressions in conditions, for loops, etc. may be enclosed in parenthesis, however, it is not mandatory.
                 308     ; ----------------------------------------------------------------------------------------------------------------------
