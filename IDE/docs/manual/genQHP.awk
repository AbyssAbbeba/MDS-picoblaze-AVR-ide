#! /usr/bin/gawk -f

# ==============================================================================
#
# MDS utility for automated generation of Qt Help Project Files from HTML index
# file(s) generated by latex2html converter.
#
# Note:
# this utility always omits the last entry in the HTML index file, this is done
# on purpose since the last entry is expected to be "Index" which is supposed to
# be handled separately.
#
# Usage:
# genQHP.awk -v DNPR=1 -v RESFILE=<file.qhp> <index.html> <file.qhp.in>
#   - DNPR=1 : Do Not PRint final result at the end (it will be written to the
#              file specified in the RESFILE variable instead).
#   - Use @GENQHP_KEYWORDS@ and @GENQHP_SECTIONS@ in the .qhp.in file, these
#     will be automatically replaced with appropriate XML tag sequences by this
#     script.
#
# (C) copyright 2013, 2014 Moravia Microsystems, s.r.o.
#
# author: Martin OÅ¡mera <martin.osmera@moravia-microsystems.com>
#
# ==============================================================================

BEGIN {
    start      = 0
    sectionsNL = 0
    keywordsNL = 0
    indent     = 3
    nodeName   = ""
    nodeUrn    = ""
    indentCh   = ""
    lastClass  = ""

    genIndentation(indent)
}

END {
    if ( ! DNPR ) {
        for ( i = 0; i < sectionsNL; i++ ) {
            print ( sections[i] )
        }
    }
}

function genIndentation ( level ) {
    indentCh = ""
    for ( i = 0; i < level; i++ ) {
        indentCh = indentCh "    "
    }
}

( FILENAME ~ /\.qhp\.in$/ ) {
    if ( RESFILE ) {
        printf("") > RESFILE

        if ( $0 ~ /@GENQHP_SECTIONS@/ ) {
            for ( i = 0; i < sectionsNL; i++ ) {
                print ( sections[i] ) >> RESFILE
            }
        } else if ( $0 ~ /@GENQHP_KEYWORDS@/ ) {
            for ( i = 0; i < keywordsNL; i++ ) {
                print ( keywords[i] ) >> RESFILE
            }
        } else {
            print($0) >> RESFILE
        }
    }

    next
}

/div class="tableofcontents"/ {
    start = 1

#     sections [ sectionsNL++ ] = sprintf ( "%s<section title=\"%s\" ref=\"%s\">", indentCh, NAME, INDEX_FILE )

    lastClass = "C"
#     indent++
    genIndentation(indent)
}

/href=".+\.html(#[^"]*)?"/ && ( start ) {
    if ( ( "" != nodeName ) && ( "" != nodeUrn ) ) {
        sections [ sectionsNL++ ] = sprintf ( "%s<section title=\"%s\" ref=\"%s\"/>", indentCh, nodeName, nodeUrn )
    }

    match ( $0, />[^<>]*</ )
    nodeName = substr ( $0, RSTART + 1, RLENGTH - 2 )

    if ( "Contents" == nodeName )
    {
        nodeName = ""
        next
    }

    match ( $0, /"[^\"]*"/ )
    nodeUrn = substr ( $0, RSTART + 1, RLENGTH - 2 )
    sub ( /#.+$/, "", nodeUrn )
}

/class="chapterToc"/ && ( start ) {
    if ( "S" == lastClass ) {
        if ( ( "" != nodeName ) && ( "" != nodeUrn ) ) {
            sections [ sectionsNL++ ] = sprintf ( "%s<section title=\"%s\" ref=\"%s\"/>", indentCh, nodeName, nodeUrn )
            nodeName = ""
            nodeUrn  = ""
        }

        indent--
        genIndentation(indent)
        sections [ sectionsNL++ ] = sprintf ( "%s</section>", indentCh )
    }

    lastClass = "C"
}

/class="sectionToc"/ && ( start ) {
    if ( "C" == lastClass ) {
        sections [ sectionsNL++ ] = sprintf ( "%s<section title=\"%s\" ref=\"%s\">", indentCh, nodeName, nodeUrn )

        nodeName = ""
        nodeUrn  = ""

        indent++
        genIndentation(indent)
    }

    lastClass = "S"
}

/<\/div>/ && ( start ) {
    start = 0

    if ( ( "" != nodeName ) && ( "" != nodeUrn ) ) {
        sections [ sectionsNL++ ] = sprintf ( "%s<section title=\"%s\" ref=\"%s\"/>", indentCh, nodeName, nodeUrn )
    }

    if ( "S" == lastClass ) {
        indent--
        genIndentation(indent)
        sections [ sectionsNL++ ] = sprintf ( "%s</section>", indentCh )
    }

#     indent--
#     genIndentation(indent)
#     sections [ sectionsNL++ ] = sprintf ( "%s</section>", indentCh )
}
