.\" ====================================================================================================================
.\"
.\"  M   M  OO  RRR    A   V   V III   A      M   M III  OOO  RRR   OO   SSSS Y   Y  SSSS TTTTT EEEEE M   M  SSSS
.\"  MM MM O  O R  R  A A  V   V  I   A A     MM MM  I  O     R  R O  O S      Y Y  S       T   E     MM MM S
.\"  M M M O  O RRR  A   A V   V  I  A   A    M M M  I  O     RRR  O  O  SS     Y    SS     T   EEEEE M M M  SS
.\"  M   M O  O RR   AAAAA  V V   I  AAAAA    M   M  I  O     RR   O  O    SS   Y      SS   T   E     M   M    SS
.\"  M   M O  O R R  A   A  V V   I  A   A    M   M  I  O     R R  O  O      S  Y        S  T   E     M   M      S
.\"  M   M  OO  R  R A   A   V   III A   A    M   M III  OOO  R  R  OO   SSSS   Y    SSSS   T   EEEEE M   M  SSSS
.\"
.\" (C) copyright 2014 Moravia Microsystems, s.r.o.
.\"     trida Kpt. Jarose 1946/35, 602 00 Brno, CZ, European Union
.\"     http://www.moravia-microsystems.com
.\"
.\" ====================================================================================================================

.TH "mds-compiler" "1" "January 2015" "User Commands"
.SH NAME
mds-compiler \- Compiler for processors, microcontrolles, etc. used by the Multitarget Development System by Moravia
Microsystems, s.r.o.
.SH USAGE
.B mds\-compiler
.I <OPTIONS>
[ -- ]
[
.I source\-file ...
]

.SH DESCRIPTION
\fB mds\-compiler\fR is macro-assembler developed by Moravia Microsystems, s.r.o. for PicoBlaze soft-core processors.
mds-compiler is a tool which take one or more source code files and produces compiled machine code file usable in JTAG
loaders, processors simulators, and similar tools; along with these files containing compiled machine code compiler also
produces extensive debugging output. mds-compiler is made to run fast and extensively tested for greater reliability, it
feature set includes various special macros and user defined macros support making it one of the world most advanced
assemblers available on the market today for PicoBlaze soft-core processors.

By default the compiler does not generate any output files, that might be useful when you simply want to check a file for errors but you do not want that when you actually need to compile something a use the resulting machine code. When you need the machine code or any other file output, you have to specify which file or files you want the compiler to generate by providing the corresponding options.

For more information please consult the MDS handbook.

.SH OPTIONS
.TP
\fB\-\-architecture\fR, \fB\-a\fI <architecture>\fR
\fB(MANDATORY)\fR Specify target architecture, supported architectures are:
.IP 1.
\fBPicoBlaze\fR: (K)constant Coded Programmable State Machine.
.TP
\fB\-\-language\fR, \fB\-l\fI <programming\-language>\fR
\fB(MANDATORY)\fR Specify programming language, supported languages are:
.IP 1.
\fBasm\fR: assembly language.
.TP
\fB\-\-hex\fR, \fB\-x\fI <Intel\-HEX\-file>\fR
Specify output file with machine code generated as a result of compilation, data will be stored in Intel 8 Hex format.
.TP
\fB\-\-debug\fR, \fB\-g\fI <MDS\-native\-debug\-file>\fR
Specify output file with code for MCU simulator and other debugging tools.
.TP
\fB\-\-srec\fI <Motorola\-S\-REC\-file>\fR
Specify output file with machine code generated as a result of compilation, data will be stored in Motorola S-record
format.
.TP
\fB\-\-binary\fI <binary\-file>\fR
Specify output file with machine code generated as a result of compilation, data will be stored in raw binary format.
.TP
\fB\-\-lst\fR <code\-listing>\fR
Specify output file where code listing generated during compilation will be stored.
.TP
\fB\-\-mtable\fR, \fB\-m\fI <table\-of\-macros>\fR
Specify file in which the compiler will put table of macros defined in your code.
.TP
\fB\-\-stable\fR, \fB\-s\fI <table\-of\-symbols>\fR
Specify file in which the compiler will put table of symbols defined in your code.
.TP
\fB\-\-help\fR, \fB\-h\fR
Print help message.
.TP
\fB\-\-version\fR, \fB\-V\fR
Print compiler version and exit.
.TP
\fB\-\-check\fR, \fB\-c\fR
Do not perform the actual compilation, do only lexical and syntax analysis of the the provided source code and exit.
.TP
\fB\-\-no\-backup\fR
Don't generate backup files.
.TP
\fB\-\-brief\-msg\fR
Print only unique messages.
.TP
\fB\-\-no\-strict\fR
Disable certain error and warning messages.
.TP
\fB\-\-no\-warnings\fR
Do not print any warnings.
.TP
\fB\-\-no\-errors\fR
Do not print any errors.
.TP
\fB\-\-no\-remarks\fR
Do not print any remarks.
.TP
\fB\-\-silent\fR
Do not print any warnings, errors, or any other messages, stay completely silent.
.TP
\fB\-\-include\fR, \fB\-I\fI <directory>\fR
Add directory where the compiler will search for include files.
.TP
\fB\-\-device\fR, \fB\-d\fI <device>\fR
Specify exact target device, options are:
.IP 1.
For PicoBlaze: \fBkcpsm1\fR, \fBkcpsm1cpld\fR, \fBkcpsm2\fR, \fBkcpsm3\fR, and \fBkcpsm6\fR
.TP
\fB\-\-precompile\fR, \fB\-P\fI <.prc\-file>\fR
Specify target file for generation of precompiled code.
.TP
\fB\-\-vhdl\fI <.vhd\-file>\fR
Specify target file for generation of VHDL code.
.TP
\fB\-\-vhdl\-tmpl\fI <.vhd\-file>\fR
Specify VHDL template file.
.TP
\fB\-\-verilog\fI <.v\-file>\fR
Specify target file for generation of verilog code.
.TP
\fB\-\-verilog\-tmpl\fI <.v\-file>\fR
Specify verilog template file.
.TP
\fB\-\-mem\fI <.mem\-file>\fR
Specify target file for generation of MEM file.
.TP
\fB\-\-raw\-hex\-dump\fI <.hex\-file>\fR
Specify target file for Raw Hex Dump (sequence of 5 digit long hexadecimal numbers separated by CRLF sequence).
.TP
\fB\-\-define, \fB\-D\fR \fI <name[=value]>\fR
Define a symbol with the given name. Value is optional, the default value is 1; value has to be a decimal number, if
specified. Symbol defined using this option is of type number and is re-definable. This option is particularly useful in
conjunction with the conditional compilation directives

.SH NOTES
.IP 1.
`--' marks the end of options, it becomes useful when you want to compile file(s) which name(s) could be mistaken for a
command line option.
.IP 2.
When multiple source files are specified, they are compiled as one unit in the order in which they appear on the command
line (from left to right).

.SH EXAMPLES
.TP
\fBmds-compiler --arch=PicoBlaze --plang=asm --hex=abc.hex abc.asm\fR
Compile source code file `abc.asm' (--file=abc.asm) for architecture PicoBlaze (--arch=PicoBlaze) written in assembly
language (--plang=asm), and create file `abc.hex' containing machine code generated generated by the compiler.
.TP
\fBmds-compiler --plang asm --arch PicoBlaze --hex abc.hex abc.asm\fR
Do the same at the above, only in this case we have used another variant of usage of switches with argument.
.TP
\fBmds-compiler -p asm -a PicoBlaze -x abc.hex abc.asm\fR
Do the same at the above, only in this case we have used short version of the switches.

.SH "SEE ALSO"
.TP
.BR mds-translator (1)
Assembly language variant translator used by the Multitarget Development System by Moravia Microsystems.
.TP
.BR mds-disasm (1)
Disassembler for embedded applications used by the Multitarget Development System by Moravia Microsystems.
.TP
.BR mds-proc-sim (1)
Processor simulator used by the Multitarget Development System by Moravia Microsystems.

.SH AUTHOR
(C) Moravia Microsystems, s.r.o.
.br
trida Kpt. Jarose 1946/35, CZ-602 00
.br
Brno, Czech Republic, European Union
.br
http://www.moravia-microsystems.com
